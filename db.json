{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/images/msgp-speed.png","path":"images/msgp-speed.png","modified":1,"renderable":0},{"_id":"source/images/smtp-overview.png","path":"images/smtp-overview.png","modified":1,"renderable":0},{"_id":"source/images/smtp-port.png","path":"images/smtp-port.png","modified":1,"renderable":0},{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/cactus/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1574917065911},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1574917065912},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1574917065912},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1574917065912},{"_id":"themes/cactus/README.md","hash":"859d11941c46be4f7b4a6d62297ccbeb4f732bc9","modified":1574917065912},{"_id":"themes/cactus/_config.yml","hash":"18ff5d5a583cf7420c4ca78ecdac6d4d9038dc0d","modified":1576129299827},{"_id":"themes/cactus/gulpfile.js","hash":"2bae290993507026a509665ee5a5326b616f8d68","modified":1574917065913},{"_id":"themes/cactus/package.json","hash":"5bbdbc429e9d46acf97baf7ac5654edde0781064","modified":1574917065919},{"_id":"source/_posts/ZooKeeper.md","hash":"01e01a79315eb0eea54f8ca5068a711cda2e2638","modified":1578538694732},{"_id":"source/about/index.md","hash":"b6c4971f02956173b75df75f69a3c01ee39f87b3","modified":1576123991985},{"_id":"source/categories/index.md","hash":"3c60293a32d993d8095859a73f64cd4ad442fabf","modified":1576129357348},{"_id":"source/images/msgp-speed.png","hash":"f291983dbec69728f06dcc9cffb11f96e7d4834d","modified":1576123991986},{"_id":"source/images/smtp-overview.png","hash":"082557515fd207bd4842e1303f6ba0fe686b1557","modified":1576123991986},{"_id":"source/images/smtp-port.png","hash":"fb89306a646277e9310dc71fb39f475ac9c2327d","modified":1576123991987},{"_id":"source/search/index.md","hash":"38b0125e4b70a252d5fdf9f35f6c4e39840ab511","modified":1576124529874},{"_id":"source/tags/index.md","hash":"316cfa3ca76a46e73066152b19fa23ed00038220","modified":1576123991988},{"_id":"themes/cactus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1574917065906},{"_id":"themes/cactus/.git/config","hash":"c9a0b9fc0b92d2337dc125357f2bb7c648badb22","modified":1574917065908},{"_id":"themes/cactus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1574917055223},{"_id":"themes/cactus/.git/index","hash":"48c367988f11cb011612df8f76e3846bd55fb093","modified":1576121782003},{"_id":"themes/cactus/.git/packed-refs","hash":"46a02646fdebb43bcd183544ebed42fe66b6b1f8","modified":1574917065904},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1574917065913},{"_id":"themes/cactus/languages/default.yml","hash":"703548ad90034d4e5207a27eb50f726dc27e4c0c","modified":1574917065913},{"_id":"themes/cactus/languages/en.yml","hash":"703548ad90034d4e5207a27eb50f726dc27e4c0c","modified":1574917065913},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1574917065913},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1574917065913},{"_id":"themes/cactus/languages/fr.yml","hash":"4fea266d3c522903f3eee4fffee6e66c44775005","modified":1574917065914},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1574917065914},{"_id":"themes/cactus/languages/kr.yml","hash":"c9066759b6a0fd916ad021802e719146764fe2b2","modified":1574917065914},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1574917065914},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1574917065914},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1574917065915},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1574917065915},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1574917065915},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1574917065915},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"8f81faaad9a0615b09dbc23868484a55ec958f6f","modified":1574917065915},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1574917065916},{"_id":"themes/cactus/layout/archive.ejs","hash":"53de8817e37be01b3ba8fa5ca31b9cafa2f3c011","modified":1574917065918},{"_id":"themes/cactus/layout/index.ejs","hash":"4a2c7e69efe85cd8e65f5db5f59f7e21c38d2142","modified":1574924177247},{"_id":"themes/cactus/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1574917065918},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1574917065918},{"_id":"themes/cactus/layout/post.ejs","hash":"a7d164ce888a60cd3eddd9c04bc6762428fa66bb","modified":1574917065919},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1574917065919},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1574917065919},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1574917065919},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1574917065919},{"_id":"source/_posts/3a/kerberos.md","hash":"a7e6d06162e68407a2c826dd888a57d53a4e3352","modified":1576129327701},{"_id":"source/_posts/architecture/Web-Document.md","hash":"9aa4a7dd35b9599f4565dbc9883f4e870317f517","modified":1578551400351},{"_id":"source/_posts/cloud/Consul.md","hash":"7715c4a6422507267a9ff5280dba3a5a765c5c8a","modified":1578538686897},{"_id":"source/_posts/business/affiliate.md","hash":"3b8e2f9e8ebf2649438fd98f54172440c54e2f03","modified":1578278043037},{"_id":"source/_posts/cloud/Consensus-Protocol-Paxos-Zab-and-Raft.md","hash":"e808751784963ecadc50afd7f15ba07aa674514c","modified":1577943215884},{"_id":"source/_posts/email/smtp.md","hash":"bc7be1f71a0ad22552b0534d90f37d9139777501","modified":1576129338684},{"_id":"source/_posts/golang/context.md","hash":"a71403b1bf69f82a82b7448b4dc944f25e0f2280","modified":1577331183364},{"_id":"source/_posts/email/how-to-send-non-spam-email.md","hash":"32b8cad6ab06e75071d31b298e97187c3ba864fb","modified":1576129333683},{"_id":"source/_posts/golang/msgp.md","hash":"e28e0f3b62261054a66c33fb335afbba35465ca2","modified":1577331194402},{"_id":"source/_posts/linux/POSIX.md","hash":"8d49e4ead818076a4ba7809f2f2b380f64fd5868","modified":1578543427344},{"_id":"source/_posts/leetcode/LeetCode-Valid-Number.md","hash":"d8b9f26c7fc769ad6e938b3994efe22b3276a394","modified":1583993064988},{"_id":"source/_posts/golang/rate-limit-circuit-breaker.md","hash":"0a56f2656ebb6e8244cd9a2a1d1cc59281fff7b0","modified":1577351749964},{"_id":"source/_posts/odd/See-you-2019.md","hash":"4688a81d9ad8bfe4d6176174cd5c45d38fd1fdac","modified":1577789312300},{"_id":"source/_posts/mq/Rocket-MQ.md","hash":"87909c7a283ae8e1bedd521f2e616ebb356f049d","modified":1577674837453},{"_id":"source/_posts/odd/one-piece.md","hash":"05846de3d50fdfb55e69c312ee573b014b71c7b4","modified":1576379205164},{"_id":"source/_posts/operation/iptables.md","hash":"def73c41a40f86d0d94ff070d613a03d9d07e91a","modified":1577674833157},{"_id":"source/_posts/paper/GFS.md","hash":"97d1836b569defcc2278292406cb27ec5255131d","modified":1578552703533},{"_id":"source/_posts/protocal/http-2.md","hash":"b3279df5e605113d98c4256dda62525a08de9465","modified":1576588198516},{"_id":"source/_posts/sso/oauth2.md","hash":"6043e339293d8662185fa74224a9aa4d4857cebe","modified":1576129349572},{"_id":"source/_posts/operation/nginx.md","hash":"25278db7af166c80d176a034e6593e36a702a787","modified":1578224012451},{"_id":"source/_posts/storage/HBase.md","hash":"9ec430f9b3498d267cae0d31c6bfa42cfaa40f5c","modified":1578538375519},{"_id":"source/_posts/storage/HDFS.md","hash":"80305e8923113d20985649966308b3727db34028","modified":1578538388487},{"_id":"source/_posts/storage/Hive.md","hash":"7c63f211f7221f79833fdaaffe79452ee22e8244","modified":1578538391312},{"_id":"source/_posts/storage/Hadoop.md","hash":"46bfb0d03d72faf7c60807f7c2bcfaa2a005ae74","modified":1578538382288},{"_id":"source/_posts/storage/RocksDB.md","hash":"361a53d7d712361b2b4af9ad9e871ae843533d40","modified":1577943077614},{"_id":"source/_posts/storage/TiDB.md","hash":"bce5acca77150d518224d06ade542d9aa63fc80b","modified":1577972845364},{"_id":"source/_posts/storage/Redis.md","hash":"81495a5e33a6af7f144884c3661b3baba0337647","modified":1578030627550},{"_id":"source/_posts/storage/LevelDB.md","hash":"7062943ffe8111df4ac29817a7c373c74f940eaf","modified":1578029449219},{"_id":"source/_posts/storage/InfluxDB.md","hash":"8ca1a8711b64819f121f1c7342efd098f32546c1","modified":1578032731569},{"_id":"source/_posts/ted/why-do-cats-act-so-weird.md","hash":"e937176b81dc653c49b2962c9bbadb7e1af8fb26","modified":1577352285653},{"_id":"source/_posts/storage/mysql.md","hash":"0e30dffe088980abf354ff7aaa80a3662f26e9ae","modified":1578539139877},{"_id":"source/_posts/ted/All-it-takes-is-10-minutes-mindful-minutes.md","hash":"92d0499e6f29c3aaab92ee7f342f2383cd00d1ba","modified":1582178304925},{"_id":"source/_posts/ted/are-you-a-giver-or-a-taker.md","hash":"b0946eacba200808a6093a1719235d168919e140","modified":1577788334012},{"_id":"source/_posts/ted/why-good-leaders-make-you-feel-safe.md","hash":"b23f0ec8bc4bf1a6cc3f9959d86b5ede0e2cc8c7","modified":1577351837727},{"_id":"themes/cactus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1574917055224},{"_id":"themes/cactus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1574917055223},{"_id":"themes/cactus/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1574917055224},{"_id":"themes/cactus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1574917055225},{"_id":"themes/cactus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1574917055225},{"_id":"themes/cactus/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1574917055224},{"_id":"themes/cactus/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1574917055224},{"_id":"themes/cactus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1574917055225},{"_id":"themes/cactus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1574917055225},{"_id":"themes/cactus/.git/logs/HEAD","hash":"281e2b54a8972a9c8859f464cf47e404dd2c8244","modified":1574917065907},{"_id":"themes/cactus/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1574917055225},{"_id":"themes/cactus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1574917055223},{"_id":"themes/cactus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1574917055226},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1574917065916},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"6b534801486f6baa989bd351915a9156b838b777","modified":1574917065916},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"c3a80e347cb11022baf5e65fb4d0209b8d205693","modified":1574917065916},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"b7db191b7ad066b1f3f9c34d8a4b77e1ee815215","modified":1576121781945},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1574917065916},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"83d912956b00537e0b20a9905f14885ff3899ed4","modified":1574917065918},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1574917065918},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1574917065918},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1574917065921},{"_id":"themes/cactus/source/css/_extend.styl","hash":"2c8751d132e62f5f068dc3a184d160670737ba1f","modified":1574917065920},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1574917065936},{"_id":"themes/cactus/source/css/_variables.styl","hash":"02079fb71b7d1c01d15fa512a1948ad4cbb416b5","modified":1574917065939},{"_id":"themes/cactus/source/css/rtl.styl","hash":"98355abe9ef3a398a5b4cb40d3d33bf86ac8d1d4","modified":1574917065939},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1574917065938},{"_id":"themes/cactus/source/css/style.styl","hash":"9a946631f0e59addc57c39bd7f2081b3e9256ab1","modified":1574917065939},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1574917065939},{"_id":"themes/cactus/source/images/favicon.ico","hash":"0bcff16c29e2eaf4b474c2c9546b8501a88af51b","modified":1574923061396},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"1fe6c4d8fbce4ef30ad5446f2fba17379415795c","modified":1574923061396},{"_id":"themes/cactus/source/images/logo.png","hash":"1fe6c4d8fbce4ef30ad5446f2fba17379415795c","modified":1574923068071},{"_id":"themes/cactus/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1574917065942},{"_id":"themes/cactus/source/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1574917065942},{"_id":"themes/cactus/.git/refs/heads/master","hash":"6dcfa311d08371986baa2b03e918974f2ca31332","modified":1574917065907},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1574917065917},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1574917065916},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1574917065917},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1574917065917},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1574917065917},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1574917065917},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1574917065918},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"1a294382bd14d979525b8ed934d807bc7d083e4d","modified":1574917065917},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1574917065920},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1574917065920},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1574917065920},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1574917065920},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1574917065921},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1574917065921},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1574917065921},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1574917065921},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1574917065922},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1574917065922},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1574917065922},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1574917065922},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1574917065922},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1574917065922},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1574917065923},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1574917065924},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1574917065925},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1574917065925},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1574917065925},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1574917065923},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1574917065923},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1574917065926},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1574917065926},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1574917065926},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1574917065927},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1574917065927},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1574917065927},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1574917065927},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1574917065927},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1574917065928},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1574917065928},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1574917065928},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1574917065927},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1574917065928},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1574917065928},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1574917065928},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1574917065929},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1574917065929},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1574917065929},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1574917065929},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1574917065929},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1574917065929},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1574917065930},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1574917065930},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1574917065930},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1574917065930},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1574917065931},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1574917065930},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1574917065930},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1574917065931},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1574917065931},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1574917065931},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1574917065932},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1574917065932},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1574917065931},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1574917065932},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1574917065932},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1574917065932},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1574917065932},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1574917065932},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1574917065933},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1574917065933},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1574917065933},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1574917065933},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1574917065933},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1574917065933},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1574917065934},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1574917065934},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1574917065934},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1574917065934},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1574917065934},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1574917065935},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1574917065935},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1574917065935},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1574917065935},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1574917065935},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1574917065935},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1574917065936},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"c6a3c395ceb4aacba8c995bcde7b58a7ca501919","modified":1574917065936},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1574917065936},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"d9b13e402808175dc90761cc4fdfe3d4808034f8","modified":1574917065937},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1574917065937},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"b64021d680f856d24dc17bc8f53674bfe2e241e4","modified":1574917065937},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1574917065937},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1574917065937},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1574917065938},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1574917065938},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1574917065938},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1574917065942},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1574917065985},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1574917065987},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1574917065987},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1574917065990},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1574917065990},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1574917065993},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1574917065993},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1574917065995},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1574917065996},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1574917065998},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1574917065998},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1574917065998},{"_id":"themes/cactus/.git/objects/pack/pack-b0c5387491c826b8a8c8594c1ec0fc3e8da0b8aa.idx","hash":"aee5af31e3b3fd20e89dcf8f16ed3b78d2a30ae2","modified":1574917065894},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1574917065985},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1574917065983},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1574917065984},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1574917065986},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1574917065987},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1574917065989},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1574917065990},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1574917065993},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1574917065991},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1574917065994},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1574917065995},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1574917065996},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1574917065997},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1574917065961},{"_id":"themes/cactus/.git/logs/refs/heads/master","hash":"281e2b54a8972a9c8859f464cf47e404dd2c8244","modified":1574917065907},{"_id":"themes/cactus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1574917065906},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"dc726537928fc0d7703e73c0a5e4b82ad1731d59","modified":1574917065938},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1574917065938},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1574917065943},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1574917065950},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1574917065951},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1574917065952},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1574917065953},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1574917065953},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1574917065960},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1574917065962},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1574917065944},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1574917065950},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1574917065950},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1574917065960},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1574917065962},{"_id":"themes/cactus/.git/logs/refs/remotes/origin/HEAD","hash":"281e2b54a8972a9c8859f464cf47e404dd2c8244","modified":1574917065906},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1574917065952},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1574917065960},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1574917065954},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1574917065981},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1574917065981},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1574917065971},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1574917065977},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1574917065978},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1574917065974},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1574917065979},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1574917065975},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1574917065980},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1574917065982},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1574917065973},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1574917065969},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1574917065948},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1574917065958},{"_id":"themes/cactus/.git/objects/pack/pack-b0c5387491c826b8a8c8594c1ec0fc3e8da0b8aa.pack","hash":"6a08eb1f275529cdb71852d03e0702bfa401843b","modified":1574917065893}],"Category":[{"name":"email","_id":"ck7ockxcc000blkyxa8fs8ih7"},{"name":"golang","_id":"ck7ockxcr000flkyxahky3k03"},{"name":"odd","_id":"ck7ockxd1000rlkyx0z7o0zmt"},{"name":"mq","_id":"ck7ockxd5000wlkyxgrtoflc4"},{"name":"operation","_id":"ck7ockxd80010lkyxappe3ute"},{"name":"protocal","_id":"ck7ockxdc0015lkyxdz22hnus"},{"name":"sso","_id":"ck7ockxdf0019lkyxcd44gjx8"},{"name":"db","_id":"ck7ockxdj001dlkyx7v1xfe96"},{"name":"ted","_id":"ck7ockxdn001jlkyx96xy7m0d"},{"name":"authentication","_id":"ck7ockxe7001tlkyxa4xz6h6e"}],"Data":[],"Page":[{"title":"about","type":"about","date":"2019-11-28T05:00:10.000Z","_content":"\n","source":"about/index.md","raw":"---\ntitle: about\ntype: about\ndate: 2019-11-28 13:00:10\n---\n\n","updated":"2019-12-12T04:13:11.985Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck7ockxak0001lkyx44f5azrl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","type":"categories","date":"2019-11-28T05:18:19.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: categories\ndate: 2019-11-28 13:18:19\n---\n","updated":"2019-12-12T05:42:37.348Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck7ockxal0002lkyxb1877nuk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Search","type":"search","date":"2019-11-28T05:19:34.000Z","_content":"","source":"search/index.md","raw":"---\ntitle: Search\ntype: search\ndate: 2019-11-28 13:19:34\n---\n","updated":"2019-12-12T04:22:09.874Z","path":"search/index.html","comments":1,"layout":"page","_id":"ck7ockxao0003lkyxdbprecl9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","date":"2019-11-28T05:18:19.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype : tags\ndate: 2019-11-28 13:18:19\n---\n","updated":"2019-12-12T04:13:11.988Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck7ockxap0004lkyx23q52glv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ZooKeeper","date":"2020-01-09T02:58:14.000Z","_content":"","source":"_posts/ZooKeeper.md","raw":"---\ntitle: ZooKeeper\ndate: 2020-01-09 10:58:14\ntags:\n---\n","slug":"ZooKeeper","published":1,"updated":"2020-01-09T02:58:14.732Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxad0000lkyx7k4j7m7w","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Web Document","date":"2020-01-09T06:30:00.000Z","_content":"","source":"_posts/architecture/Web-Document.md","raw":"---\ntitle: Web Document\ndate: 2020-01-09 14:30:00\ntags:\n---\n","slug":"architecture/Web-Document","published":1,"updated":"2020-01-09T06:30:00.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxc40005lkyx8uy3c5e5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Consul","date":"2020-01-09T02:58:06.000Z","_content":"","source":"_posts/cloud/Consul.md","raw":"---\ntitle: Consul\ndate: 2020-01-09 10:58:06\ntags:\n---\n","slug":"cloud/Consul","published":1,"updated":"2020-01-09T02:58:06.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxc50006lkyx8l6l5676","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"affiliate","date":"2020-01-06T02:34:03.000Z","_content":"","source":"_posts/business/affiliate.md","raw":"---\ntitle: affiliate\ndate: 2020-01-06 10:34:03\ntags:\n---\n","slug":"business/affiliate","published":1,"updated":"2020-01-06T02:34:03.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxc60007lkyx122l9btt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Consensus Protocol: Paxos, Zab and Raft","date":"2020-01-02T05:33:35.000Z","_content":"","source":"_posts/cloud/Consensus-Protocol-Paxos-Zab-and-Raft.md","raw":"---\ntitle: 'Consensus Protocol: Paxos, Zab and Raft'\ndate: 2020-01-02 13:33:35\ntags:\n---\n","slug":"cloud/Consensus-Protocol-Paxos-Zab-and-Raft","published":1,"updated":"2020-01-02T05:33:35.884Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxc70008lkyxh8mh0o4c","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Simple Mail Transfer Protocol (SMTP)","date":"2019-11-28T06:48:16.000Z","_content":"\n## Overview \nSMTP is a __connection-oriented__, __text-based protocol__ in which a mail sender communicates with a mail receiver by issuing command strings and supplying necessary data over a reliable ordered data stream channel, typically a TCP connection.\n\nSMTP defines __message transport__, not the message content. Thus, it defines the mail envelope and its parameters, such as the envelope sender, but not the header (except trace information) nor the body of the message itself.\n\nSMTP is a __Application Layer Protocal__. E-mail is submitted by a __MUA__(mail user agent) to a __MSA__(mail submission agent) using __SMTP__ on __TCP__. The MSA delivers the mail to its __MTA__(MTA). Often, these two agents are instances of the same software launched with different options on the same machine. Local processing can be done either on a single machine, or split among multiple machines; mail agent processes on one machine can share files, but if processing is on multiple machines, they transfer messages between each other using SMTP, where each machine is configured to use the next machine as a smart host. Each process is an __MTA__(an SMTP server) in its own right.\n\nThe boundary MTA uses the __DNS__(Domain name system) to look up the __MX Record__(mail exchanger record) for the recipient's domain (the part of the email address on the right of @). The MX record contains the name of the target host. Based on the target host and other factors, the MTA selects an exchange server: see the article MX record. The MTA connects to the exchange server as an SMTP client.\n\nMessage transfer can occur in a single connection between two MTAs, or in a series of hops through intermediary systems. A receiving SMTP server may be the ultimate destination, an intermediate \"relay\" (that is, it stores and forwards the message) or a \"gateway\" (that is, it may forward the message using some protocol other than SMTP). Each hop is a formal handoff of responsibility for the message, whereby the receiving server must either deliver the message or properly report the failure to do so.\n\nOnce the final hop accepts the incoming message, it hands it to a __MDA__(mail delivery agent) for local delivery. An MDA saves messages in the relevant mailbox format. As with sending, this reception can be done using one or multiple computers, but in the diagram above the MDA is depicted as one box near the mail exchanger box. An MDA may deliver messages directly to storage, or forward them over a network using SMTP or other protocol such as __LMTP__(Local Mail Transfer Protocol), a derivative of SMTP designed for this purpose.\n\nOnce delivered to the local mail server, the mail is stored for batch retrieval by authenticated mail clients (MUAs). Mail is retrieved by end-user applications, called email clients, using __IMAP__(Internet Message Access Protocol), a protocol that both facilitates access to mail and manages stored mail, or the __POP3__(Post Office Protocol Version 3) which typically uses the traditional mbox mail file format or a proprietary system such as Microsoft Exchange/Outlook or Lotus Notes/Domino. Webmail clients may use either method, but the retrieval protocol is often not a formal standard.\n\n![overview](/images/smtp-overview.png)\n\n## MX Record\n\nA MX record(mail exchanger record) specifies the mail server responsible for accepting email messages on behalf of a domain name. It is a resource record in the DNS(Domain Name System). It is possible to configure several MX records, typically pointing to an array of mail servers for load balancing and redundancy.\n\nYou can search for the MX records for a specific domain with __nslookup__ on mac:\n```\n# nslookup\n> set q=mx\n> gmail.com\nServer:\t\t10.86.96.1\nAddress:\t10.86.96.1#53\n\nNon-authoritative answer:\ngmail.com\tmail exchanger = 40 alt4.gmail-smtp-in.l.google.com.\ngmail.com\tmail exchanger = 5 gmail-smtp-in.l.google.com.\ngmail.com\tmail exchanger = 10 alt1.gmail-smtp-in.l.google.com.\ngmail.com\tmail exchanger = 20 alt2.gmail-smtp-in.l.google.com.\ngmail.com\tmail exchanger = 30 alt3.gmail-smtp-in.l.google.com.\n\nAuthoritative answers can be found from:\n\n```\n## Authentication\nAuthencication, Authorization and Audit is a big topic, we'll discuss later.\n\n## Port\n\nThere're three ports for SMTP\n1. Port 25\nthe oldest port. It's suggested to be used between MTAs in order to against spam E-mail.\n\n2. Port 587\nYou need authentication when use port 587, that's why it's recomanded to use between MUA and MSA.\n\n3. Port 465\nDeprecated.\n\n![port](/images/smtp-port.png)\n\n\n## Transport Example\n```\n~ telnet smtp.163.com 25\nTrying 220.181.12.12...\nConnected to smtp.163.com.\nEscape character is '^]'.\n220 163.com Anti-spam GT for Coremail System (163com[20141201])\nEHLO SMTP\n250-mail\n250-PIPELINING\n250-AUTH LOGIN PLAIN\n250-AUTH=LOGIN PLAIN\n250-coremail 1Uxr2xKj7kG0xkI17xGrU7I0s8FY2U3Uj8Cz28x1UUUUU7Ic2I0Y2UFJbpo8UCa0xDrUUUUj\n250-STARTTLS\n250 8BITMIME\nAUTH LOGIN\n334 dXNlcm5hbWU6\ndG9ueUAxNjMuY29t\n334 UGFzc3dvcmQ6\ndGVzdA==\n535 Error: authentication failed\n```\n\n","source":"_posts/email/smtp.md","raw":"---\ntitle: Simple Mail Transfer Protocol (SMTP)\ncategories: email\ndate: 2019-11-28 14:48:16\n---\n\n## Overview \nSMTP is a __connection-oriented__, __text-based protocol__ in which a mail sender communicates with a mail receiver by issuing command strings and supplying necessary data over a reliable ordered data stream channel, typically a TCP connection.\n\nSMTP defines __message transport__, not the message content. Thus, it defines the mail envelope and its parameters, such as the envelope sender, but not the header (except trace information) nor the body of the message itself.\n\nSMTP is a __Application Layer Protocal__. E-mail is submitted by a __MUA__(mail user agent) to a __MSA__(mail submission agent) using __SMTP__ on __TCP__. The MSA delivers the mail to its __MTA__(MTA). Often, these two agents are instances of the same software launched with different options on the same machine. Local processing can be done either on a single machine, or split among multiple machines; mail agent processes on one machine can share files, but if processing is on multiple machines, they transfer messages between each other using SMTP, where each machine is configured to use the next machine as a smart host. Each process is an __MTA__(an SMTP server) in its own right.\n\nThe boundary MTA uses the __DNS__(Domain name system) to look up the __MX Record__(mail exchanger record) for the recipient's domain (the part of the email address on the right of @). The MX record contains the name of the target host. Based on the target host and other factors, the MTA selects an exchange server: see the article MX record. The MTA connects to the exchange server as an SMTP client.\n\nMessage transfer can occur in a single connection between two MTAs, or in a series of hops through intermediary systems. A receiving SMTP server may be the ultimate destination, an intermediate \"relay\" (that is, it stores and forwards the message) or a \"gateway\" (that is, it may forward the message using some protocol other than SMTP). Each hop is a formal handoff of responsibility for the message, whereby the receiving server must either deliver the message or properly report the failure to do so.\n\nOnce the final hop accepts the incoming message, it hands it to a __MDA__(mail delivery agent) for local delivery. An MDA saves messages in the relevant mailbox format. As with sending, this reception can be done using one or multiple computers, but in the diagram above the MDA is depicted as one box near the mail exchanger box. An MDA may deliver messages directly to storage, or forward them over a network using SMTP or other protocol such as __LMTP__(Local Mail Transfer Protocol), a derivative of SMTP designed for this purpose.\n\nOnce delivered to the local mail server, the mail is stored for batch retrieval by authenticated mail clients (MUAs). Mail is retrieved by end-user applications, called email clients, using __IMAP__(Internet Message Access Protocol), a protocol that both facilitates access to mail and manages stored mail, or the __POP3__(Post Office Protocol Version 3) which typically uses the traditional mbox mail file format or a proprietary system such as Microsoft Exchange/Outlook or Lotus Notes/Domino. Webmail clients may use either method, but the retrieval protocol is often not a formal standard.\n\n![overview](/images/smtp-overview.png)\n\n## MX Record\n\nA MX record(mail exchanger record) specifies the mail server responsible for accepting email messages on behalf of a domain name. It is a resource record in the DNS(Domain Name System). It is possible to configure several MX records, typically pointing to an array of mail servers for load balancing and redundancy.\n\nYou can search for the MX records for a specific domain with __nslookup__ on mac:\n```\n# nslookup\n> set q=mx\n> gmail.com\nServer:\t\t10.86.96.1\nAddress:\t10.86.96.1#53\n\nNon-authoritative answer:\ngmail.com\tmail exchanger = 40 alt4.gmail-smtp-in.l.google.com.\ngmail.com\tmail exchanger = 5 gmail-smtp-in.l.google.com.\ngmail.com\tmail exchanger = 10 alt1.gmail-smtp-in.l.google.com.\ngmail.com\tmail exchanger = 20 alt2.gmail-smtp-in.l.google.com.\ngmail.com\tmail exchanger = 30 alt3.gmail-smtp-in.l.google.com.\n\nAuthoritative answers can be found from:\n\n```\n## Authentication\nAuthencication, Authorization and Audit is a big topic, we'll discuss later.\n\n## Port\n\nThere're three ports for SMTP\n1. Port 25\nthe oldest port. It's suggested to be used between MTAs in order to against spam E-mail.\n\n2. Port 587\nYou need authentication when use port 587, that's why it's recomanded to use between MUA and MSA.\n\n3. Port 465\nDeprecated.\n\n![port](/images/smtp-port.png)\n\n\n## Transport Example\n```\n~ telnet smtp.163.com 25\nTrying 220.181.12.12...\nConnected to smtp.163.com.\nEscape character is '^]'.\n220 163.com Anti-spam GT for Coremail System (163com[20141201])\nEHLO SMTP\n250-mail\n250-PIPELINING\n250-AUTH LOGIN PLAIN\n250-AUTH=LOGIN PLAIN\n250-coremail 1Uxr2xKj7kG0xkI17xGrU7I0s8FY2U3Uj8Cz28x1UUUUU7Ic2I0Y2UFJbpo8UCa0xDrUUUUj\n250-STARTTLS\n250 8BITMIME\nAUTH LOGIN\n334 dXNlcm5hbWU6\ndG9ueUAxNjMuY29t\n334 UGFzc3dvcmQ6\ndGVzdA==\n535 Error: authentication failed\n```\n\n","slug":"email/smtp","published":1,"updated":"2019-12-12T05:42:18.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxc80009lkyx4f71fwiz","content":"<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>SMTP is a <strong>connection-oriented</strong>, <strong>text-based protocol</strong> in which a mail sender communicates with a mail receiver by issuing command strings and supplying necessary data over a reliable ordered data stream channel, typically a TCP connection.</p>\n<p>SMTP defines <strong>message transport</strong>, not the message content. Thus, it defines the mail envelope and its parameters, such as the envelope sender, but not the header (except trace information) nor the body of the message itself.</p>\n<p>SMTP is a <strong>Application Layer Protocal</strong>. E-mail is submitted by a <strong>MUA</strong>(mail user agent) to a <strong>MSA</strong>(mail submission agent) using <strong>SMTP</strong> on <strong>TCP</strong>. The MSA delivers the mail to its <strong>MTA</strong>(MTA). Often, these two agents are instances of the same software launched with different options on the same machine. Local processing can be done either on a single machine, or split among multiple machines; mail agent processes on one machine can share files, but if processing is on multiple machines, they transfer messages between each other using SMTP, where each machine is configured to use the next machine as a smart host. Each process is an <strong>MTA</strong>(an SMTP server) in its own right.</p>\n<p>The boundary MTA uses the <strong>DNS</strong>(Domain name system) to look up the <strong>MX Record</strong>(mail exchanger record) for the recipient’s domain (the part of the email address on the right of @). The MX record contains the name of the target host. Based on the target host and other factors, the MTA selects an exchange server: see the article MX record. The MTA connects to the exchange server as an SMTP client.</p>\n<p>Message transfer can occur in a single connection between two MTAs, or in a series of hops through intermediary systems. A receiving SMTP server may be the ultimate destination, an intermediate “relay” (that is, it stores and forwards the message) or a “gateway” (that is, it may forward the message using some protocol other than SMTP). Each hop is a formal handoff of responsibility for the message, whereby the receiving server must either deliver the message or properly report the failure to do so.</p>\n<p>Once the final hop accepts the incoming message, it hands it to a <strong>MDA</strong>(mail delivery agent) for local delivery. An MDA saves messages in the relevant mailbox format. As with sending, this reception can be done using one or multiple computers, but in the diagram above the MDA is depicted as one box near the mail exchanger box. An MDA may deliver messages directly to storage, or forward them over a network using SMTP or other protocol such as <strong>LMTP</strong>(Local Mail Transfer Protocol), a derivative of SMTP designed for this purpose.</p>\n<p>Once delivered to the local mail server, the mail is stored for batch retrieval by authenticated mail clients (MUAs). Mail is retrieved by end-user applications, called email clients, using <strong>IMAP</strong>(Internet Message Access Protocol), a protocol that both facilitates access to mail and manages stored mail, or the <strong>POP3</strong>(Post Office Protocol Version 3) which typically uses the traditional mbox mail file format or a proprietary system such as Microsoft Exchange/Outlook or Lotus Notes/Domino. Webmail clients may use either method, but the retrieval protocol is often not a formal standard.</p>\n<p><img src=\"/images/smtp-overview.png\" alt=\"overview\"></p>\n<h2 id=\"MX-Record\"><a href=\"#MX-Record\" class=\"headerlink\" title=\"MX Record\"></a>MX Record</h2><p>A MX record(mail exchanger record) specifies the mail server responsible for accepting email messages on behalf of a domain name. It is a resource record in the DNS(Domain Name System). It is possible to configure several MX records, typically pointing to an array of mail servers for load balancing and redundancy.</p>\n<p>You can search for the MX records for a specific domain with <strong>nslookup</strong> on mac:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"># nslookup</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; set q&#x3D;mx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; gmail.com</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">Server:\t\t10.86.96.1</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">Address:\t10.86.96.1#53</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">Non-authoritative answer:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">gmail.com\tmail exchanger &#x3D; 40 alt4.gmail-smtp-in.l.google.com.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">gmail.com\tmail exchanger &#x3D; 5 gmail-smtp-in.l.google.com.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">gmail.com\tmail exchanger &#x3D; 10 alt1.gmail-smtp-in.l.google.com.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">gmail.com\tmail exchanger &#x3D; 20 alt2.gmail-smtp-in.l.google.com.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">gmail.com\tmail exchanger &#x3D; 30 alt3.gmail-smtp-in.l.google.com.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">Authoritative answers can be found from:</span></pre></td></tr></table></figure>\n<h2 id=\"Authentication\"><a href=\"#Authentication\" class=\"headerlink\" title=\"Authentication\"></a>Authentication</h2><p>Authencication, Authorization and Audit is a big topic, we’ll discuss later.</p>\n<h2 id=\"Port\"><a href=\"#Port\" class=\"headerlink\" title=\"Port\"></a>Port</h2><p>There’re three ports for SMTP</p>\n<ol>\n<li><p>Port 25<br>the oldest port. It’s suggested to be used between MTAs in order to against spam E-mail.</p>\n</li>\n<li><p>Port 587<br>You need authentication when use port 587, that’s why it’s recomanded to use between MUA and MSA.</p>\n</li>\n<li><p>Port 465<br>Deprecated.</p>\n</li>\n</ol>\n<p><img src=\"/images/smtp-port.png\" alt=\"port\"></p>\n<h2 id=\"Transport-Example\"><a href=\"#Transport-Example\" class=\"headerlink\" title=\"Transport Example\"></a>Transport Example</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">~ telnet smtp.163.com 25</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">Trying 220.181.12.12...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">Connected to smtp.163.com.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">Escape character is &#39;^]&#39;.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">220 163.com Anti-spam GT for Coremail System (163com[20141201])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">EHLO SMTP</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">250-mail</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">250-PIPELINING</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">250-AUTH LOGIN PLAIN</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">250-AUTH&#x3D;LOGIN PLAIN</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">250-coremail 1Uxr2xKj7kG0xkI17xGrU7I0s8FY2U3Uj8Cz28x1UUUUU7Ic2I0Y2UFJbpo8UCa0xDrUUUUj</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">250-STARTTLS</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">250 8BITMIME</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">AUTH LOGIN</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">334 dXNlcm5hbWU6</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">dG9ueUAxNjMuY29t</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">334 UGFzc3dvcmQ6</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">dGVzdA&#x3D;&#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">535 Error: authentication failed</span></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>SMTP is a <strong>connection-oriented</strong>, <strong>text-based protocol</strong> in which a mail sender communicates with a mail receiver by issuing command strings and supplying necessary data over a reliable ordered data stream channel, typically a TCP connection.</p>\n<p>SMTP defines <strong>message transport</strong>, not the message content. Thus, it defines the mail envelope and its parameters, such as the envelope sender, but not the header (except trace information) nor the body of the message itself.</p>\n<p>SMTP is a <strong>Application Layer Protocal</strong>. E-mail is submitted by a <strong>MUA</strong>(mail user agent) to a <strong>MSA</strong>(mail submission agent) using <strong>SMTP</strong> on <strong>TCP</strong>. The MSA delivers the mail to its <strong>MTA</strong>(MTA). Often, these two agents are instances of the same software launched with different options on the same machine. Local processing can be done either on a single machine, or split among multiple machines; mail agent processes on one machine can share files, but if processing is on multiple machines, they transfer messages between each other using SMTP, where each machine is configured to use the next machine as a smart host. Each process is an <strong>MTA</strong>(an SMTP server) in its own right.</p>\n<p>The boundary MTA uses the <strong>DNS</strong>(Domain name system) to look up the <strong>MX Record</strong>(mail exchanger record) for the recipient’s domain (the part of the email address on the right of @). The MX record contains the name of the target host. Based on the target host and other factors, the MTA selects an exchange server: see the article MX record. The MTA connects to the exchange server as an SMTP client.</p>\n<p>Message transfer can occur in a single connection between two MTAs, or in a series of hops through intermediary systems. A receiving SMTP server may be the ultimate destination, an intermediate “relay” (that is, it stores and forwards the message) or a “gateway” (that is, it may forward the message using some protocol other than SMTP). Each hop is a formal handoff of responsibility for the message, whereby the receiving server must either deliver the message or properly report the failure to do so.</p>\n<p>Once the final hop accepts the incoming message, it hands it to a <strong>MDA</strong>(mail delivery agent) for local delivery. An MDA saves messages in the relevant mailbox format. As with sending, this reception can be done using one or multiple computers, but in the diagram above the MDA is depicted as one box near the mail exchanger box. An MDA may deliver messages directly to storage, or forward them over a network using SMTP or other protocol such as <strong>LMTP</strong>(Local Mail Transfer Protocol), a derivative of SMTP designed for this purpose.</p>\n<p>Once delivered to the local mail server, the mail is stored for batch retrieval by authenticated mail clients (MUAs). Mail is retrieved by end-user applications, called email clients, using <strong>IMAP</strong>(Internet Message Access Protocol), a protocol that both facilitates access to mail and manages stored mail, or the <strong>POP3</strong>(Post Office Protocol Version 3) which typically uses the traditional mbox mail file format or a proprietary system such as Microsoft Exchange/Outlook or Lotus Notes/Domino. Webmail clients may use either method, but the retrieval protocol is often not a formal standard.</p>\n<p><img src=\"/images/smtp-overview.png\" alt=\"overview\"></p>\n<h2 id=\"MX-Record\"><a href=\"#MX-Record\" class=\"headerlink\" title=\"MX Record\"></a>MX Record</h2><p>A MX record(mail exchanger record) specifies the mail server responsible for accepting email messages on behalf of a domain name. It is a resource record in the DNS(Domain Name System). It is possible to configure several MX records, typically pointing to an array of mail servers for load balancing and redundancy.</p>\n<p>You can search for the MX records for a specific domain with <strong>nslookup</strong> on mac:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"># nslookup</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; set q&#x3D;mx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; gmail.com</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">Server:\t\t10.86.96.1</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">Address:\t10.86.96.1#53</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">Non-authoritative answer:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">gmail.com\tmail exchanger &#x3D; 40 alt4.gmail-smtp-in.l.google.com.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">gmail.com\tmail exchanger &#x3D; 5 gmail-smtp-in.l.google.com.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">gmail.com\tmail exchanger &#x3D; 10 alt1.gmail-smtp-in.l.google.com.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">gmail.com\tmail exchanger &#x3D; 20 alt2.gmail-smtp-in.l.google.com.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">gmail.com\tmail exchanger &#x3D; 30 alt3.gmail-smtp-in.l.google.com.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">Authoritative answers can be found from:</span></pre></td></tr></table></figure>\n<h2 id=\"Authentication\"><a href=\"#Authentication\" class=\"headerlink\" title=\"Authentication\"></a>Authentication</h2><p>Authencication, Authorization and Audit is a big topic, we’ll discuss later.</p>\n<h2 id=\"Port\"><a href=\"#Port\" class=\"headerlink\" title=\"Port\"></a>Port</h2><p>There’re three ports for SMTP</p>\n<ol>\n<li><p>Port 25<br>the oldest port. It’s suggested to be used between MTAs in order to against spam E-mail.</p>\n</li>\n<li><p>Port 587<br>You need authentication when use port 587, that’s why it’s recomanded to use between MUA and MSA.</p>\n</li>\n<li><p>Port 465<br>Deprecated.</p>\n</li>\n</ol>\n<p><img src=\"/images/smtp-port.png\" alt=\"port\"></p>\n<h2 id=\"Transport-Example\"><a href=\"#Transport-Example\" class=\"headerlink\" title=\"Transport Example\"></a>Transport Example</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">~ telnet smtp.163.com 25</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">Trying 220.181.12.12...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">Connected to smtp.163.com.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">Escape character is &#39;^]&#39;.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">220 163.com Anti-spam GT for Coremail System (163com[20141201])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">EHLO SMTP</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">250-mail</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">250-PIPELINING</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">250-AUTH LOGIN PLAIN</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">250-AUTH&#x3D;LOGIN PLAIN</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">250-coremail 1Uxr2xKj7kG0xkI17xGrU7I0s8FY2U3Uj8Cz28x1UUUUU7Ic2I0Y2UFJbpo8UCa0xDrUUUUj</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">250-STARTTLS</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">250 8BITMIME</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">AUTH LOGIN</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">334 dXNlcm5hbWU6</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">dG9ueUAxNjMuY29t</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">334 UGFzc3dvcmQ6</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">dGVzdA&#x3D;&#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">535 Error: authentication failed</span></pre></td></tr></table></figure>\n\n"},{"title":"Context In Go","date":"2019-12-24T03:29:50.000Z","_content":"","source":"_posts/golang/context.md","raw":"---\ntitle: Context In Go\ncategories: golang\ndate: 2019-12-24 11:29:50\n---\n","slug":"golang/context","published":1,"updated":"2019-12-26T03:33:03.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxc9000alkyxap16dvjt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"How to Send Non-Spam E-mail","date":"2019-11-29T03:48:16.000Z","_content":"\n## Why is E-mail still alive\nE-mail has already existed for nearly 50 years [1971](https://blog.cloudflare.com/the-history-of-email/). Though IM and OA have developed a lot recently years, it seems that we still can not eliminate E-mail from our lives. The reasons may be:\n- E-mail is widespread around the world. No matter Facebook, Google, Wechat or any others couldn't claim that they have already connected everyone. But excatly everyone has E-mail address.\n- E-mail has already been the foundation of the Internet account system. Though [OAuth](https://rony13.github.io/2019/11/28/oauth2/) has already been the most convenient way to sign up/in, you'll find it out that E-mail is usually the origianl way of OAuth trace.\n- It can be used not only for communication but also as a storage tool.\n- The agreement reached by mail have legal effectiveness cause E-mail is irreversible and read-only. Recall your offers.\n\n\n","source":"_posts/email/how-to-send-non-spam-email.md","raw":"---\ntitle: How to Send Non-Spam E-mail\ncategories: email\ndate: 2019-11-29 11:48:16\n---\n\n## Why is E-mail still alive\nE-mail has already existed for nearly 50 years [1971](https://blog.cloudflare.com/the-history-of-email/). Though IM and OA have developed a lot recently years, it seems that we still can not eliminate E-mail from our lives. The reasons may be:\n- E-mail is widespread around the world. No matter Facebook, Google, Wechat or any others couldn't claim that they have already connected everyone. But excatly everyone has E-mail address.\n- E-mail has already been the foundation of the Internet account system. Though [OAuth](https://rony13.github.io/2019/11/28/oauth2/) has already been the most convenient way to sign up/in, you'll find it out that E-mail is usually the origianl way of OAuth trace.\n- It can be used not only for communication but also as a storage tool.\n- The agreement reached by mail have legal effectiveness cause E-mail is irreversible and read-only. Recall your offers.\n\n\n","slug":"email/how-to-send-non-spam-email","published":1,"updated":"2019-12-12T05:42:13.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxcl000clkyx5deebmqs","content":"<h2 id=\"Why-is-E-mail-still-alive\"><a href=\"#Why-is-E-mail-still-alive\" class=\"headerlink\" title=\"Why is E-mail still alive\"></a>Why is E-mail still alive</h2><p>E-mail has already existed for nearly 50 years <a href=\"https://blog.cloudflare.com/the-history-of-email/\" target=\"_blank\" rel=\"noopener\">1971</a>. Though IM and OA have developed a lot recently years, it seems that we still can not eliminate E-mail from our lives. The reasons may be:</p>\n<ul>\n<li>E-mail is widespread around the world. No matter Facebook, Google, Wechat or any others couldn’t claim that they have already connected everyone. But excatly everyone has E-mail address.</li>\n<li>E-mail has already been the foundation of the Internet account system. Though <a href=\"https://rony13.github.io/2019/11/28/oauth2/\">OAuth</a> has already been the most convenient way to sign up/in, you’ll find it out that E-mail is usually the origianl way of OAuth trace.</li>\n<li>It can be used not only for communication but also as a storage tool.</li>\n<li>The agreement reached by mail have legal effectiveness cause E-mail is irreversible and read-only. Recall your offers.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Why-is-E-mail-still-alive\"><a href=\"#Why-is-E-mail-still-alive\" class=\"headerlink\" title=\"Why is E-mail still alive\"></a>Why is E-mail still alive</h2><p>E-mail has already existed for nearly 50 years <a href=\"https://blog.cloudflare.com/the-history-of-email/\" target=\"_blank\" rel=\"noopener\">1971</a>. Though IM and OA have developed a lot recently years, it seems that we still can not eliminate E-mail from our lives. The reasons may be:</p>\n<ul>\n<li>E-mail is widespread around the world. No matter Facebook, Google, Wechat or any others couldn’t claim that they have already connected everyone. But excatly everyone has E-mail address.</li>\n<li>E-mail has already been the foundation of the Internet account system. Though <a href=\"https://rony13.github.io/2019/11/28/oauth2/\">OAuth</a> has already been the most convenient way to sign up/in, you’ll find it out that E-mail is usually the origianl way of OAuth trace.</li>\n<li>It can be used not only for communication but also as a storage tool.</li>\n<li>The agreement reached by mail have legal effectiveness cause E-mail is irreversible and read-only. Recall your offers.</li>\n</ul>\n"},{"title":"MSGP","date":"2019-12-09T06:26:00.000Z","_content":"\n\"MessagePack is an efficient binary serialization format. It lets you exchange data among multiple languages like JSON. But it's faster and smaller. Small integers are encoded into a single byte, and typical short strings require only one extra byte in addition to the strings themselves.\"\n\n![Speed Test](/images/msgp-speed.png)\n\nFor more detail specification, you can view [MSGP update proposal V5](https://gist.github.com/frsyuki/543255).\n\n## Why Smaller\ncause JSON is a __text based protocal__, it's easy to read by human while extra format characters are necessary. There's a example.\n\nIf we define a struct __User__ in golang,\n```\ntype User struct {\n\tName      string `json:\"name\"`\n\tGender    string `json:\"gender\"`\n\tAge       int    `json:\"age\"`\n\tBio       string `json:\"bio\"`\n}\n\n```\n\nthe JSON marshal result will be\n```\n{\n    \"name\":\"DL\",\n    \"gender\":\"male\",\n    \"age\":1024,\n    \"bio\":\"let's dance!\"\n}\n```\nthere're __23__ bytes for brace, comma and colon. While, MSGP uses a Type System to reduce these extra overhead, for example:\n\n```\nfixmap stores a map whose length is upto 15 elements\n+--------+~~~~~~~~~~~~~~~~~+\n|1000XXXX|   N*2 objects   |\n+--------+~~~~~~~~~~~~~~~~~+\nwhere\n* XXXX is a 4-bit unsigned integer which represents N\n```\nWhat's more, there's a compression algorithm of MSGP, which means less bytes will be used. For example:\n\n```\nfalse:\n+--------+\n|  0xc2  |\n+--------+\n\ntrue:\n+--------+\n|  0xc3  |\n+--------+\n\n```\n\n## Why Faster\nWe usually use cJSON library to marshal/unmarshal JSON. cJSON uses __linked list__ to store a __tree__. We need to scan each char to locate it's node one by one. With useing MSGP, we do not need to match char cause there's a __type__ and __length__ of each kind of MSGP data type.\n\n","source":"_posts/golang/msgp.md","raw":"---\ntitle: MSGP\ncategories: golang\ndate: 2019-12-09 14:26:00\n---\n\n\"MessagePack is an efficient binary serialization format. It lets you exchange data among multiple languages like JSON. But it's faster and smaller. Small integers are encoded into a single byte, and typical short strings require only one extra byte in addition to the strings themselves.\"\n\n![Speed Test](/images/msgp-speed.png)\n\nFor more detail specification, you can view [MSGP update proposal V5](https://gist.github.com/frsyuki/543255).\n\n## Why Smaller\ncause JSON is a __text based protocal__, it's easy to read by human while extra format characters are necessary. There's a example.\n\nIf we define a struct __User__ in golang,\n```\ntype User struct {\n\tName      string `json:\"name\"`\n\tGender    string `json:\"gender\"`\n\tAge       int    `json:\"age\"`\n\tBio       string `json:\"bio\"`\n}\n\n```\n\nthe JSON marshal result will be\n```\n{\n    \"name\":\"DL\",\n    \"gender\":\"male\",\n    \"age\":1024,\n    \"bio\":\"let's dance!\"\n}\n```\nthere're __23__ bytes for brace, comma and colon. While, MSGP uses a Type System to reduce these extra overhead, for example:\n\n```\nfixmap stores a map whose length is upto 15 elements\n+--------+~~~~~~~~~~~~~~~~~+\n|1000XXXX|   N*2 objects   |\n+--------+~~~~~~~~~~~~~~~~~+\nwhere\n* XXXX is a 4-bit unsigned integer which represents N\n```\nWhat's more, there's a compression algorithm of MSGP, which means less bytes will be used. For example:\n\n```\nfalse:\n+--------+\n|  0xc2  |\n+--------+\n\ntrue:\n+--------+\n|  0xc3  |\n+--------+\n\n```\n\n## Why Faster\nWe usually use cJSON library to marshal/unmarshal JSON. cJSON uses __linked list__ to store a __tree__. We need to scan each char to locate it's node one by one. With useing MSGP, we do not need to match char cause there's a __type__ and __length__ of each kind of MSGP data type.\n\n","slug":"golang/msgp","published":1,"updated":"2019-12-26T03:33:14.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxcm000dlkyxgraobwtr","content":"<p>“MessagePack is an efficient binary serialization format. It lets you exchange data among multiple languages like JSON. But it’s faster and smaller. Small integers are encoded into a single byte, and typical short strings require only one extra byte in addition to the strings themselves.”</p>\n<p><img src=\"/images/msgp-speed.png\" alt=\"Speed Test\"></p>\n<p>For more detail specification, you can view <a href=\"https://gist.github.com/frsyuki/543255\" target=\"_blank\" rel=\"noopener\">MSGP update proposal V5</a>.</p>\n<h2 id=\"Why-Smaller\"><a href=\"#Why-Smaller\" class=\"headerlink\" title=\"Why Smaller\"></a>Why Smaller</h2><p>cause JSON is a <strong>text based protocal</strong>, it’s easy to read by human while extra format characters are necessary. There’s a example.</p>\n<p>If we define a struct <strong>User</strong> in golang,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">type User struct &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tName      string &#96;json:&quot;name&quot;&#96;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tGender    string &#96;json:&quot;gender&quot;&#96;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tAge       int    &#96;json:&quot;age&quot;&#96;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tBio       string &#96;json:&quot;bio&quot;&#96;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>the JSON marshal result will be</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &quot;name&quot;:&quot;DL&quot;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &quot;gender&quot;:&quot;male&quot;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &quot;age&quot;:1024,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &quot;bio&quot;:&quot;let&#39;s dance!&quot;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>there’re <strong>23</strong> bytes for brace, comma and colon. While, MSGP uses a Type System to reduce these extra overhead, for example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">fixmap stores a map whose length is upto 15 elements</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">+--------+~~~~~~~~~~~~~~~~~+</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">|1000XXXX|   N*2 objects   |</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">+--------+~~~~~~~~~~~~~~~~~+</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">where</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">* XXXX is a 4-bit unsigned integer which represents N</span></pre></td></tr></table></figure>\n<p>What’s more, there’s a compression algorithm of MSGP, which means less bytes will be used. For example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">false:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">+--------+</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">|  0xc2  |</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">+--------+</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">true:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">+--------+</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">|  0xc3  |</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">+--------+</span></pre></td></tr></table></figure>\n\n<h2 id=\"Why-Faster\"><a href=\"#Why-Faster\" class=\"headerlink\" title=\"Why Faster\"></a>Why Faster</h2><p>We usually use cJSON library to marshal/unmarshal JSON. cJSON uses <strong>linked list</strong> to store a <strong>tree</strong>. We need to scan each char to locate it’s node one by one. With useing MSGP, we do not need to match char cause there’s a <strong>type</strong> and <strong>length</strong> of each kind of MSGP data type.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>“MessagePack is an efficient binary serialization format. It lets you exchange data among multiple languages like JSON. But it’s faster and smaller. Small integers are encoded into a single byte, and typical short strings require only one extra byte in addition to the strings themselves.”</p>\n<p><img src=\"/images/msgp-speed.png\" alt=\"Speed Test\"></p>\n<p>For more detail specification, you can view <a href=\"https://gist.github.com/frsyuki/543255\" target=\"_blank\" rel=\"noopener\">MSGP update proposal V5</a>.</p>\n<h2 id=\"Why-Smaller\"><a href=\"#Why-Smaller\" class=\"headerlink\" title=\"Why Smaller\"></a>Why Smaller</h2><p>cause JSON is a <strong>text based protocal</strong>, it’s easy to read by human while extra format characters are necessary. There’s a example.</p>\n<p>If we define a struct <strong>User</strong> in golang,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">type User struct &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tName      string &#96;json:&quot;name&quot;&#96;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tGender    string &#96;json:&quot;gender&quot;&#96;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tAge       int    &#96;json:&quot;age&quot;&#96;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tBio       string &#96;json:&quot;bio&quot;&#96;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>the JSON marshal result will be</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &quot;name&quot;:&quot;DL&quot;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &quot;gender&quot;:&quot;male&quot;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &quot;age&quot;:1024,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &quot;bio&quot;:&quot;let&#39;s dance!&quot;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>there’re <strong>23</strong> bytes for brace, comma and colon. While, MSGP uses a Type System to reduce these extra overhead, for example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">fixmap stores a map whose length is upto 15 elements</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">+--------+~~~~~~~~~~~~~~~~~+</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">|1000XXXX|   N*2 objects   |</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">+--------+~~~~~~~~~~~~~~~~~+</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">where</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">* XXXX is a 4-bit unsigned integer which represents N</span></pre></td></tr></table></figure>\n<p>What’s more, there’s a compression algorithm of MSGP, which means less bytes will be used. For example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">false:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">+--------+</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">|  0xc2  |</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">+--------+</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">true:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">+--------+</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">|  0xc3  |</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">+--------+</span></pre></td></tr></table></figure>\n\n<h2 id=\"Why-Faster\"><a href=\"#Why-Faster\" class=\"headerlink\" title=\"Why Faster\"></a>Why Faster</h2><p>We usually use cJSON library to marshal/unmarshal JSON. cJSON uses <strong>linked list</strong> to store a <strong>tree</strong>. We need to scan each char to locate it’s node one by one. With useing MSGP, we do not need to match char cause there’s a <strong>type</strong> and <strong>length</strong> of each kind of MSGP data type.</p>\n"},{"title":"POSIX","date":"2020-01-09T04:17:07.000Z","_content":"","source":"_posts/linux/POSIX.md","raw":"---\ntitle: POSIX\ndate: 2020-01-09 12:17:07\ntags:\n---\n","slug":"linux/POSIX","published":1,"updated":"2020-01-09T04:17:07.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxcq000elkyx83lc6s1n","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"LeetCode: Valid Number","date":"2020-03-12T05:48:17.000Z","_content":"\n```golang\nfunc isNumber(s string) bool {\n    pattern := `^\\s*[+-]?((\\d+(\\.\\d*)?)|(\\.\\d+))(e[+-]?\\d+)?\\s*$`\n    match, _ := regexp.MatchString(pattern, s)\n    return \tmatch\n}\n```\n","source":"_posts/leetcode/LeetCode-Valid-Number.md","raw":"---\ntitle: 'LeetCode: Valid Number'\ndate: 2020-03-12 13:48:17\ntags:\n---\n\n```golang\nfunc isNumber(s string) bool {\n    pattern := `^\\s*[+-]?((\\d+(\\.\\d*)?)|(\\.\\d+))(e[+-]?\\d+)?\\s*$`\n    match, _ := regexp.MatchString(pattern, s)\n    return \tmatch\n}\n```\n","slug":"leetcode/LeetCode-Valid-Number","published":1,"updated":"2020-03-12T06:04:24.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxcr000glkyx72wv65wx","content":"<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">isNumber</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"title\">bool</span></span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    pattern := <span class=\"string\">`^\\s*[+-]?((\\d+(\\.\\d*)?)|(\\.\\d+))(e[+-]?\\d+)?\\s*$`</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    match, _ := regexp.MatchString(pattern, s)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> \tmatch</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">isNumber</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"title\">bool</span></span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    pattern := <span class=\"string\">`^\\s*[+-]?((\\d+(\\.\\d*)?)|(\\.\\d+))(e[+-]?\\d+)?\\s*$`</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    match, _ := regexp.MatchString(pattern, s)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> \tmatch</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n"},{"title":"Rate Limit & Circuit Breaker","date":"2019-12-15T07:38:07.000Z","_content":"","source":"_posts/golang/rate-limit-circuit-breaker.md","raw":"---\ntitle: Rate Limit & Circuit Breaker\ncategories: golang\ndate: 2019-12-15 15:38:07\n---\n","slug":"golang/rate-limit-circuit-breaker","published":1,"updated":"2019-12-26T09:15:49.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxcs000hlkyxh70u7xzb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"See you, 2019","date":"2019-12-31T10:37:25.000Z","_content":"\n很早之前听过一个寓言，讲的是一个流浪汉经常在一个富人家附近乞讨，这个富人每次会给这个流量汉100美元，这个流浪汉每次都会很感激这个富人，然后很快的就把钱花光了。当流浪汉逐渐习惯了这一切，突然有一天富人路过，然后直接无视了流浪汉，流浪汉就上前抱怨：“我一直在这里等你，为什么不给我100美元”，富人说：“我已经给了你1000美元了，这足够你开始新的生活了，可你缺都挥霍掉了。” 不太记得这寓言本身想表达的含义了，知道一天听到华为一个高龄员工被辞退的新闻，脑子里就突然蹦出了这个故事。嘲讽的，这一切刚好和这个故事吻合。那个高龄的员工就是那个“流浪汉”，公司就是那个“富人”，工作了十几年勤勤恳恳，就是那“1000美元”。\n\n就是这个故事，让2019年对我来说，完全是人生的一个转折，也是一次很大的冒险。既然目标已经明确了，等2020年结束的时候，再来补充这个帖子吧（未完待续……）\n","source":"_posts/odd/See-you-2019.md","raw":"---\ntitle: 'See you, 2019'\ncategories: odd\ndate: 2019-12-31 18:37:25\n---\n\n很早之前听过一个寓言，讲的是一个流浪汉经常在一个富人家附近乞讨，这个富人每次会给这个流量汉100美元，这个流浪汉每次都会很感激这个富人，然后很快的就把钱花光了。当流浪汉逐渐习惯了这一切，突然有一天富人路过，然后直接无视了流浪汉，流浪汉就上前抱怨：“我一直在这里等你，为什么不给我100美元”，富人说：“我已经给了你1000美元了，这足够你开始新的生活了，可你缺都挥霍掉了。” 不太记得这寓言本身想表达的含义了，知道一天听到华为一个高龄员工被辞退的新闻，脑子里就突然蹦出了这个故事。嘲讽的，这一切刚好和这个故事吻合。那个高龄的员工就是那个“流浪汉”，公司就是那个“富人”，工作了十几年勤勤恳恳，就是那“1000美元”。\n\n就是这个故事，让2019年对我来说，完全是人生的一个转折，也是一次很大的冒险。既然目标已经明确了，等2020年结束的时候，再来补充这个帖子吧（未完待续……）\n","slug":"odd/See-you-2019","published":1,"updated":"2019-12-31T10:48:32.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxcv000klkyxcfbiaetj","content":"<p>很早之前听过一个寓言，讲的是一个流浪汉经常在一个富人家附近乞讨，这个富人每次会给这个流量汉100美元，这个流浪汉每次都会很感激这个富人，然后很快的就把钱花光了。当流浪汉逐渐习惯了这一切，突然有一天富人路过，然后直接无视了流浪汉，流浪汉就上前抱怨：“我一直在这里等你，为什么不给我100美元”，富人说：“我已经给了你1000美元了，这足够你开始新的生活了，可你缺都挥霍掉了。” 不太记得这寓言本身想表达的含义了，知道一天听到华为一个高龄员工被辞退的新闻，脑子里就突然蹦出了这个故事。嘲讽的，这一切刚好和这个故事吻合。那个高龄的员工就是那个“流浪汉”，公司就是那个“富人”，工作了十几年勤勤恳恳，就是那“1000美元”。</p>\n<p>就是这个故事，让2019年对我来说，完全是人生的一个转折，也是一次很大的冒险。既然目标已经明确了，等2020年结束的时候，再来补充这个帖子吧（未完待续……）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>很早之前听过一个寓言，讲的是一个流浪汉经常在一个富人家附近乞讨，这个富人每次会给这个流量汉100美元，这个流浪汉每次都会很感激这个富人，然后很快的就把钱花光了。当流浪汉逐渐习惯了这一切，突然有一天富人路过，然后直接无视了流浪汉，流浪汉就上前抱怨：“我一直在这里等你，为什么不给我100美元”，富人说：“我已经给了你1000美元了，这足够你开始新的生活了，可你缺都挥霍掉了。” 不太记得这寓言本身想表达的含义了，知道一天听到华为一个高龄员工被辞退的新闻，脑子里就突然蹦出了这个故事。嘲讽的，这一切刚好和这个故事吻合。那个高龄的员工就是那个“流浪汉”，公司就是那个“富人”，工作了十几年勤勤恳恳，就是那“1000美元”。</p>\n<p>就是这个故事，让2019年对我来说，完全是人生的一个转折，也是一次很大的冒险。既然目标已经明确了，等2020年结束的时候，再来补充这个帖子吧（未完待续……）</p>\n"},{"title":"Rocket MQ","date":"2019-12-30T02:47:01.000Z","_content":"","source":"_posts/mq/Rocket-MQ.md","raw":"---\ntitle: Rocket MQ\ncategories: mq\ndate: 2019-12-30 10:47:01\n---\n","slug":"mq/Rocket-MQ","published":1,"updated":"2019-12-30T03:00:37.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxcw000llkyxdjjweozm","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"One Piece","date":"2019-12-15T02:57:22.000Z","_content":"","source":"_posts/odd/one-piece.md","raw":"---\ntitle: One Piece\ndate: 2019-12-15 10:57:22\ntags:\n---\n","slug":"odd/one-piece","published":1,"updated":"2019-12-15T03:06:45.164Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxcx000olkyx56co8kah","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Iptables","date":"2019-12-15T03:58:17.000Z","_content":"","source":"_posts/operation/iptables.md","raw":"---\ntitle: Iptables\ncategories: operation\ndate: 2019-12-15 11:58:17\n---\n","slug":"operation/iptables","published":1,"updated":"2019-12-30T03:00:33.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxcy000qlkyx49robbyg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"GFS","date":"2020-01-09T06:51:43.000Z","_content":"","source":"_posts/paper/GFS.md","raw":"---\ntitle: GFS\ndate: 2020-01-09 14:51:43\ntags:\n---\n","slug":"paper/GFS","published":1,"updated":"2020-01-09T06:51:43.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxd2000tlkyx7r2va0fr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"http/2","date":"2019-12-17T13:08:28.000Z","_content":"","source":"_posts/protocal/http-2.md","raw":"---\ntitle: http/2\ncategories: protocal\ndate: 2019-12-17 21:08:28\n---\n","slug":"protocal/http-2","published":1,"updated":"2019-12-17T13:09:58.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxd3000ulkyxcw52eg47","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"OAuth2.0","date":"2019-11-28T08:11:17.000Z","_content":"","source":"_posts/sso/oauth2.md","raw":"---\ntitle: OAuth2.0\ncategories: sso\ndate: 2019-11-28 16:11:17\n---\n","slug":"sso/oauth2","published":1,"updated":"2019-12-12T05:42:29.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxd5000xlkyx6gaedzqx","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"nginx","date":"2020-01-05T11:33:32.000Z","_content":"","source":"_posts/operation/nginx.md","raw":"---\ntitle: nginx\ndate: 2020-01-05 19:33:32\ntags:\n---\n","slug":"operation/nginx","published":1,"updated":"2020-01-05T11:33:32.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxd7000ylkyxhex07uqu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"HBase","date":"2020-01-09T02:52:55.000Z","_content":"","source":"_posts/storage/HBase.md","raw":"---\ntitle: HBase\ndate: 2020-01-09 10:52:55\ntags:\n---\n","slug":"storage/HBase","published":1,"updated":"2020-01-09T02:52:55.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxd80011lkyx5iqmcbtr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"HDFS","date":"2020-01-09T02:53:08.000Z","_content":"","source":"_posts/storage/HDFS.md","raw":"---\ntitle: HDFS\ndate: 2020-01-09 10:53:08\ntags:\n---\n","slug":"storage/HDFS","published":1,"updated":"2020-01-09T02:53:08.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxd90012lkyxa5za1vu1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hive","date":"2020-01-09T02:53:11.000Z","_content":"","source":"_posts/storage/Hive.md","raw":"---\ntitle: Hive\ndate: 2020-01-09 10:53:11\ntags:\n---\n","slug":"storage/Hive","published":1,"updated":"2020-01-09T02:53:11.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxdb0014lkyxhdqn4xqg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hadoop","date":"2020-01-09T02:53:02.000Z","_content":"","source":"_posts/storage/Hadoop.md","raw":"---\ntitle: Hadoop\ndate: 2020-01-09 10:53:02\ntags:\n---\n","slug":"storage/Hadoop","published":1,"updated":"2020-01-09T02:53:02.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxdc0016lkyx0h0f3290","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"RocksDB","date":"2020-01-02T05:31:17.000Z","_content":"","source":"_posts/storage/RocksDB.md","raw":"---\ntitle: RocksDB\ndate: 2020-01-02 13:31:17\ntags:\n---\n","slug":"storage/RocksDB","published":1,"updated":"2020-01-02T05:31:17.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxde0017lkyxd22mgru2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"TiDB","date":"2020-01-02T05:27:27.000Z","_content":"","source":"_posts/storage/TiDB.md","raw":"---\ntitle: TiDB\ndate: 2020-01-02 13:27:27\ncategories: db\n---\n","slug":"storage/TiDB","published":1,"updated":"2020-01-02T13:47:25.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxdg001alkyx0ntvap4o","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Redis","date":"2020-01-03T05:50:27.000Z","_content":"","source":"_posts/storage/Redis.md","raw":"---\ntitle: Redis\ndate: 2020-01-03 13:50:27\ntags:\n---\n","slug":"storage/Redis","published":1,"updated":"2020-01-03T05:50:27.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxdi001blkyxh5r51m08","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"LevelDB","date":"2020-01-03T05:30:49.000Z","_content":"","source":"_posts/storage/LevelDB.md","raw":"---\ntitle: LevelDB\ndate: 2020-01-03 13:30:49\ntags:\n---\n","slug":"storage/LevelDB","published":1,"updated":"2020-01-03T05:30:49.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxdj001elkyx8x06ghrf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"InfluxDB","date":"2020-01-03T06:25:31.000Z","_content":"","source":"_posts/storage/InfluxDB.md","raw":"---\ntitle: InfluxDB\ndate: 2020-01-03 14:25:31\ntags:\n---\n","slug":"storage/InfluxDB","published":1,"updated":"2020-01-03T06:25:31.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxdk001flkyxheoj6g16","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Why Do Cats Act So Weird","date":"2019-12-26T09:22:51.000Z","_content":"They’re cute, they’re lovable, and judging by the 26 billions views of over 2 million YouTube videos of them pouncing, bouncing, climbing, cramming, stalking, clawing, chattering and purring, one thing is certain: cats are very entertaining. \n\nThese somewhat strange feline behaviors, both amusing and baffling, leave many of us asking, “Why do cats do that?” \n\nThroughout time, cats were simultaneously solitary predators of smaller animals and prey for larger carnivores. As both predator and prey, survival of their species depended on crucial instinctual behaviors which we still observe in wild and domestic cats today. While the feline actions of your house cat Grizmo might seem perplexing, in the wild, these same behaviors, naturally bred into cats for millions of years, would make Grizmo a super cat. \n\nEnabled by their unique muscular structure and keen balancing abilities, cats climbed to high vantage points to survey their territory and spot prey in the wild. Grizmo doesn’t need these particular skills to find and hunt down dinner in her food bowl today, but instinctually, viewing the living room from the top of the bookcase is exactly what she has evolved to do. \n\nAs wild predators, cats are opportunistic and hunt whenever prey is available. Since most cat prey are small, cats in the wild needed to eat many times each day, and use a stalk, pounce, kill, eat strategy to stay fed. This is why Grizmo prefers to chase and pounce on little toys and eat small meals over the course of the day and night. \n\nAlso, small prey tend to hide in tiny spaces in their natural environments, so one explanation for Grizmo’s propensity to reach into containers and openings is that she is compelled by the same curiosity that helped ensure the continuation of her species for millions of years before. \n\nIn the wild, cats needed sharp claws for climbing, hunting, and self-defense. Sharpening their claws on nearby surfaces kept them conditioned and ready, helped stretch their back and leg muscles, and relieve some stress, too. So it’s not that Grizmo hates your couch, chair, ottoman, pillows, curtains, and everything else you put in her environment. She’s ripping these things to shreds and keeping her claws in tip-top shape because this is exactly what her ancestors did in order to survive. \n\nAs animals that were preyed upon, cats evolved to not get caught, and in the wild, the cats that were the best at avoiding predators thrived. So at your house today, Grizmo is an expert at squeezing into small spaces and seeking out and hiding in unconventional spots. It also explains why she prefers a clean and odor-free litter box. That’s less likely to give away her location to any predators that my be sniffing around nearby.\n\nConsidering everything we do know about cats, it seems that one of their most predominate behaviors is still one of the most mysterious. Cats may purr for any number of reasons, such as happiness, stress and hunger. But curiously, the frequency of their purrs, between 25 and 150 hertz, is within a range that can promote tissue regeneration. So while her purring makes Grizmo an excellent nap companion, it is also possible that her purr is healing her muscles and bones, and maybe even yours, too. \n\nThey developed through time as both solitary predators that hunted and killed to eat, and stealthy prey that hid and escaped to survive. So cats today retain many of the smae instincts that allowed them to thrive in the wild for millions of years. This explains some of their seemingly strange behaviors. To them, our homes are their jungles. But if this is the case, in our own cat’s eyes, who are we? Big, dumb, hairless cats competing with them for resources? Terribly stupid predators they’re able to outsmart every day? Or maybe they think we’re the prey.\n","source":"_posts/ted/why-do-cats-act-so-weird.md","raw":"---\ntitle: Why Do Cats Act So Weird\ncategories: ted\ndate: 2019-12-26 17:22:51\n---\nThey’re cute, they’re lovable, and judging by the 26 billions views of over 2 million YouTube videos of them pouncing, bouncing, climbing, cramming, stalking, clawing, chattering and purring, one thing is certain: cats are very entertaining. \n\nThese somewhat strange feline behaviors, both amusing and baffling, leave many of us asking, “Why do cats do that?” \n\nThroughout time, cats were simultaneously solitary predators of smaller animals and prey for larger carnivores. As both predator and prey, survival of their species depended on crucial instinctual behaviors which we still observe in wild and domestic cats today. While the feline actions of your house cat Grizmo might seem perplexing, in the wild, these same behaviors, naturally bred into cats for millions of years, would make Grizmo a super cat. \n\nEnabled by their unique muscular structure and keen balancing abilities, cats climbed to high vantage points to survey their territory and spot prey in the wild. Grizmo doesn’t need these particular skills to find and hunt down dinner in her food bowl today, but instinctually, viewing the living room from the top of the bookcase is exactly what she has evolved to do. \n\nAs wild predators, cats are opportunistic and hunt whenever prey is available. Since most cat prey are small, cats in the wild needed to eat many times each day, and use a stalk, pounce, kill, eat strategy to stay fed. This is why Grizmo prefers to chase and pounce on little toys and eat small meals over the course of the day and night. \n\nAlso, small prey tend to hide in tiny spaces in their natural environments, so one explanation for Grizmo’s propensity to reach into containers and openings is that she is compelled by the same curiosity that helped ensure the continuation of her species for millions of years before. \n\nIn the wild, cats needed sharp claws for climbing, hunting, and self-defense. Sharpening their claws on nearby surfaces kept them conditioned and ready, helped stretch their back and leg muscles, and relieve some stress, too. So it’s not that Grizmo hates your couch, chair, ottoman, pillows, curtains, and everything else you put in her environment. She’s ripping these things to shreds and keeping her claws in tip-top shape because this is exactly what her ancestors did in order to survive. \n\nAs animals that were preyed upon, cats evolved to not get caught, and in the wild, the cats that were the best at avoiding predators thrived. So at your house today, Grizmo is an expert at squeezing into small spaces and seeking out and hiding in unconventional spots. It also explains why she prefers a clean and odor-free litter box. That’s less likely to give away her location to any predators that my be sniffing around nearby.\n\nConsidering everything we do know about cats, it seems that one of their most predominate behaviors is still one of the most mysterious. Cats may purr for any number of reasons, such as happiness, stress and hunger. But curiously, the frequency of their purrs, between 25 and 150 hertz, is within a range that can promote tissue regeneration. So while her purring makes Grizmo an excellent nap companion, it is also possible that her purr is healing her muscles and bones, and maybe even yours, too. \n\nThey developed through time as both solitary predators that hunted and killed to eat, and stealthy prey that hid and escaped to survive. So cats today retain many of the smae instincts that allowed them to thrive in the wild for millions of years. This explains some of their seemingly strange behaviors. To them, our homes are their jungles. But if this is the case, in our own cat’s eyes, who are we? Big, dumb, hairless cats competing with them for resources? Terribly stupid predators they’re able to outsmart every day? Or maybe they think we’re the prey.\n","slug":"ted/why-do-cats-act-so-weird","published":1,"updated":"2019-12-26T09:24:45.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxdl001hlkyxacuh1kk3","content":"<p>They’re cute, they’re lovable, and judging by the 26 billions views of over 2 million YouTube videos of them pouncing, bouncing, climbing, cramming, stalking, clawing, chattering and purring, one thing is certain: cats are very entertaining. </p>\n<p>These somewhat strange feline behaviors, both amusing and baffling, leave many of us asking, “Why do cats do that?” </p>\n<p>Throughout time, cats were simultaneously solitary predators of smaller animals and prey for larger carnivores. As both predator and prey, survival of their species depended on crucial instinctual behaviors which we still observe in wild and domestic cats today. While the feline actions of your house cat Grizmo might seem perplexing, in the wild, these same behaviors, naturally bred into cats for millions of years, would make Grizmo a super cat. </p>\n<p>Enabled by their unique muscular structure and keen balancing abilities, cats climbed to high vantage points to survey their territory and spot prey in the wild. Grizmo doesn’t need these particular skills to find and hunt down dinner in her food bowl today, but instinctually, viewing the living room from the top of the bookcase is exactly what she has evolved to do. </p>\n<p>As wild predators, cats are opportunistic and hunt whenever prey is available. Since most cat prey are small, cats in the wild needed to eat many times each day, and use a stalk, pounce, kill, eat strategy to stay fed. This is why Grizmo prefers to chase and pounce on little toys and eat small meals over the course of the day and night. </p>\n<p>Also, small prey tend to hide in tiny spaces in their natural environments, so one explanation for Grizmo’s propensity to reach into containers and openings is that she is compelled by the same curiosity that helped ensure the continuation of her species for millions of years before. </p>\n<p>In the wild, cats needed sharp claws for climbing, hunting, and self-defense. Sharpening their claws on nearby surfaces kept them conditioned and ready, helped stretch their back and leg muscles, and relieve some stress, too. So it’s not that Grizmo hates your couch, chair, ottoman, pillows, curtains, and everything else you put in her environment. She’s ripping these things to shreds and keeping her claws in tip-top shape because this is exactly what her ancestors did in order to survive. </p>\n<p>As animals that were preyed upon, cats evolved to not get caught, and in the wild, the cats that were the best at avoiding predators thrived. So at your house today, Grizmo is an expert at squeezing into small spaces and seeking out and hiding in unconventional spots. It also explains why she prefers a clean and odor-free litter box. That’s less likely to give away her location to any predators that my be sniffing around nearby.</p>\n<p>Considering everything we do know about cats, it seems that one of their most predominate behaviors is still one of the most mysterious. Cats may purr for any number of reasons, such as happiness, stress and hunger. But curiously, the frequency of their purrs, between 25 and 150 hertz, is within a range that can promote tissue regeneration. So while her purring makes Grizmo an excellent nap companion, it is also possible that her purr is healing her muscles and bones, and maybe even yours, too. </p>\n<p>They developed through time as both solitary predators that hunted and killed to eat, and stealthy prey that hid and escaped to survive. So cats today retain many of the smae instincts that allowed them to thrive in the wild for millions of years. This explains some of their seemingly strange behaviors. To them, our homes are their jungles. But if this is the case, in our own cat’s eyes, who are we? Big, dumb, hairless cats competing with them for resources? Terribly stupid predators they’re able to outsmart every day? Or maybe they think we’re the prey.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>They’re cute, they’re lovable, and judging by the 26 billions views of over 2 million YouTube videos of them pouncing, bouncing, climbing, cramming, stalking, clawing, chattering and purring, one thing is certain: cats are very entertaining. </p>\n<p>These somewhat strange feline behaviors, both amusing and baffling, leave many of us asking, “Why do cats do that?” </p>\n<p>Throughout time, cats were simultaneously solitary predators of smaller animals and prey for larger carnivores. As both predator and prey, survival of their species depended on crucial instinctual behaviors which we still observe in wild and domestic cats today. While the feline actions of your house cat Grizmo might seem perplexing, in the wild, these same behaviors, naturally bred into cats for millions of years, would make Grizmo a super cat. </p>\n<p>Enabled by their unique muscular structure and keen balancing abilities, cats climbed to high vantage points to survey their territory and spot prey in the wild. Grizmo doesn’t need these particular skills to find and hunt down dinner in her food bowl today, but instinctually, viewing the living room from the top of the bookcase is exactly what she has evolved to do. </p>\n<p>As wild predators, cats are opportunistic and hunt whenever prey is available. Since most cat prey are small, cats in the wild needed to eat many times each day, and use a stalk, pounce, kill, eat strategy to stay fed. This is why Grizmo prefers to chase and pounce on little toys and eat small meals over the course of the day and night. </p>\n<p>Also, small prey tend to hide in tiny spaces in their natural environments, so one explanation for Grizmo’s propensity to reach into containers and openings is that she is compelled by the same curiosity that helped ensure the continuation of her species for millions of years before. </p>\n<p>In the wild, cats needed sharp claws for climbing, hunting, and self-defense. Sharpening their claws on nearby surfaces kept them conditioned and ready, helped stretch their back and leg muscles, and relieve some stress, too. So it’s not that Grizmo hates your couch, chair, ottoman, pillows, curtains, and everything else you put in her environment. She’s ripping these things to shreds and keeping her claws in tip-top shape because this is exactly what her ancestors did in order to survive. </p>\n<p>As animals that were preyed upon, cats evolved to not get caught, and in the wild, the cats that were the best at avoiding predators thrived. So at your house today, Grizmo is an expert at squeezing into small spaces and seeking out and hiding in unconventional spots. It also explains why she prefers a clean and odor-free litter box. That’s less likely to give away her location to any predators that my be sniffing around nearby.</p>\n<p>Considering everything we do know about cats, it seems that one of their most predominate behaviors is still one of the most mysterious. Cats may purr for any number of reasons, such as happiness, stress and hunger. But curiously, the frequency of their purrs, between 25 and 150 hertz, is within a range that can promote tissue regeneration. So while her purring makes Grizmo an excellent nap companion, it is also possible that her purr is healing her muscles and bones, and maybe even yours, too. </p>\n<p>They developed through time as both solitary predators that hunted and killed to eat, and stealthy prey that hid and escaped to survive. So cats today retain many of the smae instincts that allowed them to thrive in the wild for millions of years. This explains some of their seemingly strange behaviors. To them, our homes are their jungles. But if this is the case, in our own cat’s eyes, who are we? Big, dumb, hairless cats competing with them for resources? Terribly stupid predators they’re able to outsmart every day? Or maybe they think we’re the prey.</p>\n"},{"title":"mysql","date":"2020-01-09T03:05:39.000Z","_content":"","source":"_posts/storage/mysql.md","raw":"---\ntitle: mysql\ndate: 2020-01-09 11:05:39\ntags:\n---\n","slug":"storage/mysql","published":1,"updated":"2020-01-09T03:05:39.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxdm001ilkyxdqygfgq4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"All it takes is 10 minutes mindful minutes","date":"2020-02-19T05:44:27.000Z","_content":"We live in an incredibly busy world. The pace of life is often frantic, our minds are always busy, and we're always doing something. So with that in mind, I'd like you jst to take a moment to think, when did you last take any time to do nothing? Just 10 minutes, undisturbed? And when I say nothing, I do mean nothing. So that's no emailing, texting, no Internet, no TV, no chatting, no eating, no reading. Not even sitting there reminiscing about the past or planning for the future. Simply doing nothing. I see a lot of very blank faces. I think it is probably you have to go a long way back. And this is an extraordinary thing, right? We're talking about our mind. \n\nThe mind, our most valuable and precious resource, thrgouh which we experience every single moment of our life. The mind taht we rely upon to be happy, content, emotionally stable as individuals, and at the same time, to be kind and thoughtful and considerate in our relationships with others. This is the same mind that we depend upon to be focused, creative, spontaneous and to perform at our very best in everything that we do. And yet, we don't take any time out to look after it. In fact, we spend more time looking after our cars, our clothes and our hair than we, okay, maybe not our hair, but you see where I'm going.\n \nThe result, of course, is that we get stressed. You know, the mind whizzes away like a washing machine, going round and round, lots of diffcult, confusing emotions, and we don't really know how to deal with that. And the sad fact is that we are so distracted that we're no longer present in the world in which we live. We miss out on teh things that are most important to us, and the crazy thing is that everybody just assumes, that's the way life is, so we've jst kindof got to get on with it. That's really not how it has to be.\n\nSo I was about 11 when I went along to my first meditation class. And trust me, it had all the stereotypes that you can imagine, the sitting cross-legged on the floor, the incense, the herbal tea, the vegetarians, the whole deal, but my mom was going and I was intrigued, so I went along with her. I'd also seen a few kung fu movies, and secretly I kind of though I might be able to leanr how to fly, but I was very young at the time. Now as I was there, I guess, like a lot of people, I assumed that it was just an aspirin for the mind. You get stressed, you do some meditation. I hadn't really thought that it could be sort of preventative in nature, until I was about 20, when a number of things happend in my life, in quite quick succession, really serious things which just flipped my life upside down, and all of a sudden I was inundated with thoughts, inundated with diffcult emotions that I didn't know how to cope with. Every time I sort of pushed one down, another one would pop back up again. It was a really very stressful time. I guess we all deal with stress in different ways. Some people will bury themselves in work, grateful for the distraction. Others will turn to their friends, their family, looking for support. Some people hit hte bottle, start taking medication. My own way of dealing with it was to become a monk. So I quit my degree, I headed off to the Himalayas, I became a monk, and I started studying meditation. People often ask me what I learned from that time. Well, obviously it changed things. Let's face it, becoming a celibate monk is going to change a number of things. But it was more than that. It taught me, it gave me a greater appreciation, an understanding for the present moment. By that I mean not being lost in thought, not being distracted, not being overwhelmed by diffcult emotions, but instead learning how to be in the here and now, how to be mindful, how to be present. \n\nI think the present moment is so underrated. It sounds so ordinary, and yet we spend so little time in the present moment that it's anything but ordinary. There was a research paper that came out of Harvard, just recently, that said on average, our minds are lost in thought almost 47 percent of the time. At the same time, this sort of constant mind-wandering is also a direct cause of unhappiness. Now we're not here for that long anyway, but tot spend almost half of our life lost in thought and potentially quite unhappy, I don't know, it just kind of seems tragic, actually, especially when there's something we can do about it, when there's a positive, practical, achievable, scientifically proven technique which allows our mind to be more healthy, to be more mindful and less distracted. And the beauty of it is that even though it need only take about 10 minutes a day it impactes our entire life. But we need to know how to do it. We need an exercise. We need a framework to learn how to be more mindful. That's essentially what meditation is.\n\nIt's familiarizing ourselves with the present moment. But we also need to know how to approach it in the right way to get the best from it. And that's what these are for, in case you've been wondering, because most people assume the meditation is all about stopping thoughts, getting rid of emotions, somehow controlling the mind, but actually it's quite different from that. It's more about stepping back, sort of seeing the thought clearly, witnessing it comming and going, emotions coming and going without judgment, but with a relaxed, focused mind. So for example, right now, if I focus too much on the balls, then there's no way I can relax and talk to you at the same time. Equally, if I relax too much taling to you, there's no way I can focus on the balls. I'm going to drop them. Now in life, and in meditation, there'll be times when the focus becomes a little bit too intense, and life starts to feel a bit like this. It's a very uncomfortable way to live life, when you get this tight and stressed. At other times, we might take our foot off the gas a little bit too much, and things just become a sort of little bit like this. Of course in meditation we're going to end up falling asleep. So we're looking for a balance, a focused relaxation where we can allow thoughts to come and go without all the usual involvement.\n\nNow, what usually happens when we're learning to be mindful is taht we get distracted by a thought. Let's say this is an anxious thought. So everything's going fine, and we see the anxious thought. \"Oh, I didn't realize I was worried about that.\" You go back to it, repeat it. \"Oh, I am worried. I am really worried. Wow, there's so much anxiety.\" And before we know it, right, we're anxious about feeling anxious. You know, this is crazy. We do this all the time, even on an everyday level. If you think about the last time hyou had a wobbly tooth. You know it's wobbly, and you know that it hurts. But what do you do every 20, 30 seconds? It does hurt. And we reinforce the storyline, right? And we just keep telling ourselves, and we do it all the time. And it's only in learning to watch the mind in this way that we can start to let go of those storylines and patterns of mind. But when you sit down and you watch the mind in this way, you might see many differernt patterns. You might find a mind that's really restless and the whole time. Don't be surprised if you feel a bit agitated in your body when you sit down to do nothing and your mind feels like that. You might find a mind that's very dull, and boring, and it's just, almost mechanical, it just seems it's as if you're gettingup, going to work, eat, sleep, get up, work. Or it might jsut be that one little nagging thought that just goes round and round your mind. Well, whatever it its, meditation offers the opportunity, the potential to step back and to get a different perspective to see that things aren't always as they appear.\n\nYou know, we can't change every little thing that happens to us in life, but we can change the way that we experience it. That's the potential of meditation, of mindfulness. You don't have to burn any incense, and you definitely don't have to sit on the floor. All you need to do is to take 10 minutes out a day to step back, to familiarize yourself with the present moment so that you get to experience a greater sense of focus, calm and clarity in your life. Thank you very much.\n","source":"_posts/ted/All-it-takes-is-10-minutes-mindful-minutes.md","raw":"---\ntitle: All it takes is 10 minutes mindful minutes\ncategories: ted\ndate: 2020-02-19 13:44:27\n---\nWe live in an incredibly busy world. The pace of life is often frantic, our minds are always busy, and we're always doing something. So with that in mind, I'd like you jst to take a moment to think, when did you last take any time to do nothing? Just 10 minutes, undisturbed? And when I say nothing, I do mean nothing. So that's no emailing, texting, no Internet, no TV, no chatting, no eating, no reading. Not even sitting there reminiscing about the past or planning for the future. Simply doing nothing. I see a lot of very blank faces. I think it is probably you have to go a long way back. And this is an extraordinary thing, right? We're talking about our mind. \n\nThe mind, our most valuable and precious resource, thrgouh which we experience every single moment of our life. The mind taht we rely upon to be happy, content, emotionally stable as individuals, and at the same time, to be kind and thoughtful and considerate in our relationships with others. This is the same mind that we depend upon to be focused, creative, spontaneous and to perform at our very best in everything that we do. And yet, we don't take any time out to look after it. In fact, we spend more time looking after our cars, our clothes and our hair than we, okay, maybe not our hair, but you see where I'm going.\n \nThe result, of course, is that we get stressed. You know, the mind whizzes away like a washing machine, going round and round, lots of diffcult, confusing emotions, and we don't really know how to deal with that. And the sad fact is that we are so distracted that we're no longer present in the world in which we live. We miss out on teh things that are most important to us, and the crazy thing is that everybody just assumes, that's the way life is, so we've jst kindof got to get on with it. That's really not how it has to be.\n\nSo I was about 11 when I went along to my first meditation class. And trust me, it had all the stereotypes that you can imagine, the sitting cross-legged on the floor, the incense, the herbal tea, the vegetarians, the whole deal, but my mom was going and I was intrigued, so I went along with her. I'd also seen a few kung fu movies, and secretly I kind of though I might be able to leanr how to fly, but I was very young at the time. Now as I was there, I guess, like a lot of people, I assumed that it was just an aspirin for the mind. You get stressed, you do some meditation. I hadn't really thought that it could be sort of preventative in nature, until I was about 20, when a number of things happend in my life, in quite quick succession, really serious things which just flipped my life upside down, and all of a sudden I was inundated with thoughts, inundated with diffcult emotions that I didn't know how to cope with. Every time I sort of pushed one down, another one would pop back up again. It was a really very stressful time. I guess we all deal with stress in different ways. Some people will bury themselves in work, grateful for the distraction. Others will turn to their friends, their family, looking for support. Some people hit hte bottle, start taking medication. My own way of dealing with it was to become a monk. So I quit my degree, I headed off to the Himalayas, I became a monk, and I started studying meditation. People often ask me what I learned from that time. Well, obviously it changed things. Let's face it, becoming a celibate monk is going to change a number of things. But it was more than that. It taught me, it gave me a greater appreciation, an understanding for the present moment. By that I mean not being lost in thought, not being distracted, not being overwhelmed by diffcult emotions, but instead learning how to be in the here and now, how to be mindful, how to be present. \n\nI think the present moment is so underrated. It sounds so ordinary, and yet we spend so little time in the present moment that it's anything but ordinary. There was a research paper that came out of Harvard, just recently, that said on average, our minds are lost in thought almost 47 percent of the time. At the same time, this sort of constant mind-wandering is also a direct cause of unhappiness. Now we're not here for that long anyway, but tot spend almost half of our life lost in thought and potentially quite unhappy, I don't know, it just kind of seems tragic, actually, especially when there's something we can do about it, when there's a positive, practical, achievable, scientifically proven technique which allows our mind to be more healthy, to be more mindful and less distracted. And the beauty of it is that even though it need only take about 10 minutes a day it impactes our entire life. But we need to know how to do it. We need an exercise. We need a framework to learn how to be more mindful. That's essentially what meditation is.\n\nIt's familiarizing ourselves with the present moment. But we also need to know how to approach it in the right way to get the best from it. And that's what these are for, in case you've been wondering, because most people assume the meditation is all about stopping thoughts, getting rid of emotions, somehow controlling the mind, but actually it's quite different from that. It's more about stepping back, sort of seeing the thought clearly, witnessing it comming and going, emotions coming and going without judgment, but with a relaxed, focused mind. So for example, right now, if I focus too much on the balls, then there's no way I can relax and talk to you at the same time. Equally, if I relax too much taling to you, there's no way I can focus on the balls. I'm going to drop them. Now in life, and in meditation, there'll be times when the focus becomes a little bit too intense, and life starts to feel a bit like this. It's a very uncomfortable way to live life, when you get this tight and stressed. At other times, we might take our foot off the gas a little bit too much, and things just become a sort of little bit like this. Of course in meditation we're going to end up falling asleep. So we're looking for a balance, a focused relaxation where we can allow thoughts to come and go without all the usual involvement.\n\nNow, what usually happens when we're learning to be mindful is taht we get distracted by a thought. Let's say this is an anxious thought. So everything's going fine, and we see the anxious thought. \"Oh, I didn't realize I was worried about that.\" You go back to it, repeat it. \"Oh, I am worried. I am really worried. Wow, there's so much anxiety.\" And before we know it, right, we're anxious about feeling anxious. You know, this is crazy. We do this all the time, even on an everyday level. If you think about the last time hyou had a wobbly tooth. You know it's wobbly, and you know that it hurts. But what do you do every 20, 30 seconds? It does hurt. And we reinforce the storyline, right? And we just keep telling ourselves, and we do it all the time. And it's only in learning to watch the mind in this way that we can start to let go of those storylines and patterns of mind. But when you sit down and you watch the mind in this way, you might see many differernt patterns. You might find a mind that's really restless and the whole time. Don't be surprised if you feel a bit agitated in your body when you sit down to do nothing and your mind feels like that. You might find a mind that's very dull, and boring, and it's just, almost mechanical, it just seems it's as if you're gettingup, going to work, eat, sleep, get up, work. Or it might jsut be that one little nagging thought that just goes round and round your mind. Well, whatever it its, meditation offers the opportunity, the potential to step back and to get a different perspective to see that things aren't always as they appear.\n\nYou know, we can't change every little thing that happens to us in life, but we can change the way that we experience it. That's the potential of meditation, of mindfulness. You don't have to burn any incense, and you definitely don't have to sit on the floor. All you need to do is to take 10 minutes out a day to step back, to familiarize yourself with the present moment so that you get to experience a greater sense of focus, calm and clarity in your life. Thank you very much.\n","slug":"ted/All-it-takes-is-10-minutes-mindful-minutes","published":1,"updated":"2020-02-20T05:58:24.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxdt001mlkyxhnle8jvt","content":"<p>We live in an incredibly busy world. The pace of life is often frantic, our minds are always busy, and we’re always doing something. So with that in mind, I’d like you jst to take a moment to think, when did you last take any time to do nothing? Just 10 minutes, undisturbed? And when I say nothing, I do mean nothing. So that’s no emailing, texting, no Internet, no TV, no chatting, no eating, no reading. Not even sitting there reminiscing about the past or planning for the future. Simply doing nothing. I see a lot of very blank faces. I think it is probably you have to go a long way back. And this is an extraordinary thing, right? We’re talking about our mind. </p>\n<p>The mind, our most valuable and precious resource, thrgouh which we experience every single moment of our life. The mind taht we rely upon to be happy, content, emotionally stable as individuals, and at the same time, to be kind and thoughtful and considerate in our relationships with others. This is the same mind that we depend upon to be focused, creative, spontaneous and to perform at our very best in everything that we do. And yet, we don’t take any time out to look after it. In fact, we spend more time looking after our cars, our clothes and our hair than we, okay, maybe not our hair, but you see where I’m going.</p>\n<p>The result, of course, is that we get stressed. You know, the mind whizzes away like a washing machine, going round and round, lots of diffcult, confusing emotions, and we don’t really know how to deal with that. And the sad fact is that we are so distracted that we’re no longer present in the world in which we live. We miss out on teh things that are most important to us, and the crazy thing is that everybody just assumes, that’s the way life is, so we’ve jst kindof got to get on with it. That’s really not how it has to be.</p>\n<p>So I was about 11 when I went along to my first meditation class. And trust me, it had all the stereotypes that you can imagine, the sitting cross-legged on the floor, the incense, the herbal tea, the vegetarians, the whole deal, but my mom was going and I was intrigued, so I went along with her. I’d also seen a few kung fu movies, and secretly I kind of though I might be able to leanr how to fly, but I was very young at the time. Now as I was there, I guess, like a lot of people, I assumed that it was just an aspirin for the mind. You get stressed, you do some meditation. I hadn’t really thought that it could be sort of preventative in nature, until I was about 20, when a number of things happend in my life, in quite quick succession, really serious things which just flipped my life upside down, and all of a sudden I was inundated with thoughts, inundated with diffcult emotions that I didn’t know how to cope with. Every time I sort of pushed one down, another one would pop back up again. It was a really very stressful time. I guess we all deal with stress in different ways. Some people will bury themselves in work, grateful for the distraction. Others will turn to their friends, their family, looking for support. Some people hit hte bottle, start taking medication. My own way of dealing with it was to become a monk. So I quit my degree, I headed off to the Himalayas, I became a monk, and I started studying meditation. People often ask me what I learned from that time. Well, obviously it changed things. Let’s face it, becoming a celibate monk is going to change a number of things. But it was more than that. It taught me, it gave me a greater appreciation, an understanding for the present moment. By that I mean not being lost in thought, not being distracted, not being overwhelmed by diffcult emotions, but instead learning how to be in the here and now, how to be mindful, how to be present. </p>\n<p>I think the present moment is so underrated. It sounds so ordinary, and yet we spend so little time in the present moment that it’s anything but ordinary. There was a research paper that came out of Harvard, just recently, that said on average, our minds are lost in thought almost 47 percent of the time. At the same time, this sort of constant mind-wandering is also a direct cause of unhappiness. Now we’re not here for that long anyway, but tot spend almost half of our life lost in thought and potentially quite unhappy, I don’t know, it just kind of seems tragic, actually, especially when there’s something we can do about it, when there’s a positive, practical, achievable, scientifically proven technique which allows our mind to be more healthy, to be more mindful and less distracted. And the beauty of it is that even though it need only take about 10 minutes a day it impactes our entire life. But we need to know how to do it. We need an exercise. We need a framework to learn how to be more mindful. That’s essentially what meditation is.</p>\n<p>It’s familiarizing ourselves with the present moment. But we also need to know how to approach it in the right way to get the best from it. And that’s what these are for, in case you’ve been wondering, because most people assume the meditation is all about stopping thoughts, getting rid of emotions, somehow controlling the mind, but actually it’s quite different from that. It’s more about stepping back, sort of seeing the thought clearly, witnessing it comming and going, emotions coming and going without judgment, but with a relaxed, focused mind. So for example, right now, if I focus too much on the balls, then there’s no way I can relax and talk to you at the same time. Equally, if I relax too much taling to you, there’s no way I can focus on the balls. I’m going to drop them. Now in life, and in meditation, there’ll be times when the focus becomes a little bit too intense, and life starts to feel a bit like this. It’s a very uncomfortable way to live life, when you get this tight and stressed. At other times, we might take our foot off the gas a little bit too much, and things just become a sort of little bit like this. Of course in meditation we’re going to end up falling asleep. So we’re looking for a balance, a focused relaxation where we can allow thoughts to come and go without all the usual involvement.</p>\n<p>Now, what usually happens when we’re learning to be mindful is taht we get distracted by a thought. Let’s say this is an anxious thought. So everything’s going fine, and we see the anxious thought. “Oh, I didn’t realize I was worried about that.” You go back to it, repeat it. “Oh, I am worried. I am really worried. Wow, there’s so much anxiety.” And before we know it, right, we’re anxious about feeling anxious. You know, this is crazy. We do this all the time, even on an everyday level. If you think about the last time hyou had a wobbly tooth. You know it’s wobbly, and you know that it hurts. But what do you do every 20, 30 seconds? It does hurt. And we reinforce the storyline, right? And we just keep telling ourselves, and we do it all the time. And it’s only in learning to watch the mind in this way that we can start to let go of those storylines and patterns of mind. But when you sit down and you watch the mind in this way, you might see many differernt patterns. You might find a mind that’s really restless and the whole time. Don’t be surprised if you feel a bit agitated in your body when you sit down to do nothing and your mind feels like that. You might find a mind that’s very dull, and boring, and it’s just, almost mechanical, it just seems it’s as if you’re gettingup, going to work, eat, sleep, get up, work. Or it might jsut be that one little nagging thought that just goes round and round your mind. Well, whatever it its, meditation offers the opportunity, the potential to step back and to get a different perspective to see that things aren’t always as they appear.</p>\n<p>You know, we can’t change every little thing that happens to us in life, but we can change the way that we experience it. That’s the potential of meditation, of mindfulness. You don’t have to burn any incense, and you definitely don’t have to sit on the floor. All you need to do is to take 10 minutes out a day to step back, to familiarize yourself with the present moment so that you get to experience a greater sense of focus, calm and clarity in your life. Thank you very much.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>We live in an incredibly busy world. The pace of life is often frantic, our minds are always busy, and we’re always doing something. So with that in mind, I’d like you jst to take a moment to think, when did you last take any time to do nothing? Just 10 minutes, undisturbed? And when I say nothing, I do mean nothing. So that’s no emailing, texting, no Internet, no TV, no chatting, no eating, no reading. Not even sitting there reminiscing about the past or planning for the future. Simply doing nothing. I see a lot of very blank faces. I think it is probably you have to go a long way back. And this is an extraordinary thing, right? We’re talking about our mind. </p>\n<p>The mind, our most valuable and precious resource, thrgouh which we experience every single moment of our life. The mind taht we rely upon to be happy, content, emotionally stable as individuals, and at the same time, to be kind and thoughtful and considerate in our relationships with others. This is the same mind that we depend upon to be focused, creative, spontaneous and to perform at our very best in everything that we do. And yet, we don’t take any time out to look after it. In fact, we spend more time looking after our cars, our clothes and our hair than we, okay, maybe not our hair, but you see where I’m going.</p>\n<p>The result, of course, is that we get stressed. You know, the mind whizzes away like a washing machine, going round and round, lots of diffcult, confusing emotions, and we don’t really know how to deal with that. And the sad fact is that we are so distracted that we’re no longer present in the world in which we live. We miss out on teh things that are most important to us, and the crazy thing is that everybody just assumes, that’s the way life is, so we’ve jst kindof got to get on with it. That’s really not how it has to be.</p>\n<p>So I was about 11 when I went along to my first meditation class. And trust me, it had all the stereotypes that you can imagine, the sitting cross-legged on the floor, the incense, the herbal tea, the vegetarians, the whole deal, but my mom was going and I was intrigued, so I went along with her. I’d also seen a few kung fu movies, and secretly I kind of though I might be able to leanr how to fly, but I was very young at the time. Now as I was there, I guess, like a lot of people, I assumed that it was just an aspirin for the mind. You get stressed, you do some meditation. I hadn’t really thought that it could be sort of preventative in nature, until I was about 20, when a number of things happend in my life, in quite quick succession, really serious things which just flipped my life upside down, and all of a sudden I was inundated with thoughts, inundated with diffcult emotions that I didn’t know how to cope with. Every time I sort of pushed one down, another one would pop back up again. It was a really very stressful time. I guess we all deal with stress in different ways. Some people will bury themselves in work, grateful for the distraction. Others will turn to their friends, their family, looking for support. Some people hit hte bottle, start taking medication. My own way of dealing with it was to become a monk. So I quit my degree, I headed off to the Himalayas, I became a monk, and I started studying meditation. People often ask me what I learned from that time. Well, obviously it changed things. Let’s face it, becoming a celibate monk is going to change a number of things. But it was more than that. It taught me, it gave me a greater appreciation, an understanding for the present moment. By that I mean not being lost in thought, not being distracted, not being overwhelmed by diffcult emotions, but instead learning how to be in the here and now, how to be mindful, how to be present. </p>\n<p>I think the present moment is so underrated. It sounds so ordinary, and yet we spend so little time in the present moment that it’s anything but ordinary. There was a research paper that came out of Harvard, just recently, that said on average, our minds are lost in thought almost 47 percent of the time. At the same time, this sort of constant mind-wandering is also a direct cause of unhappiness. Now we’re not here for that long anyway, but tot spend almost half of our life lost in thought and potentially quite unhappy, I don’t know, it just kind of seems tragic, actually, especially when there’s something we can do about it, when there’s a positive, practical, achievable, scientifically proven technique which allows our mind to be more healthy, to be more mindful and less distracted. And the beauty of it is that even though it need only take about 10 minutes a day it impactes our entire life. But we need to know how to do it. We need an exercise. We need a framework to learn how to be more mindful. That’s essentially what meditation is.</p>\n<p>It’s familiarizing ourselves with the present moment. But we also need to know how to approach it in the right way to get the best from it. And that’s what these are for, in case you’ve been wondering, because most people assume the meditation is all about stopping thoughts, getting rid of emotions, somehow controlling the mind, but actually it’s quite different from that. It’s more about stepping back, sort of seeing the thought clearly, witnessing it comming and going, emotions coming and going without judgment, but with a relaxed, focused mind. So for example, right now, if I focus too much on the balls, then there’s no way I can relax and talk to you at the same time. Equally, if I relax too much taling to you, there’s no way I can focus on the balls. I’m going to drop them. Now in life, and in meditation, there’ll be times when the focus becomes a little bit too intense, and life starts to feel a bit like this. It’s a very uncomfortable way to live life, when you get this tight and stressed. At other times, we might take our foot off the gas a little bit too much, and things just become a sort of little bit like this. Of course in meditation we’re going to end up falling asleep. So we’re looking for a balance, a focused relaxation where we can allow thoughts to come and go without all the usual involvement.</p>\n<p>Now, what usually happens when we’re learning to be mindful is taht we get distracted by a thought. Let’s say this is an anxious thought. So everything’s going fine, and we see the anxious thought. “Oh, I didn’t realize I was worried about that.” You go back to it, repeat it. “Oh, I am worried. I am really worried. Wow, there’s so much anxiety.” And before we know it, right, we’re anxious about feeling anxious. You know, this is crazy. We do this all the time, even on an everyday level. If you think about the last time hyou had a wobbly tooth. You know it’s wobbly, and you know that it hurts. But what do you do every 20, 30 seconds? It does hurt. And we reinforce the storyline, right? And we just keep telling ourselves, and we do it all the time. And it’s only in learning to watch the mind in this way that we can start to let go of those storylines and patterns of mind. But when you sit down and you watch the mind in this way, you might see many differernt patterns. You might find a mind that’s really restless and the whole time. Don’t be surprised if you feel a bit agitated in your body when you sit down to do nothing and your mind feels like that. You might find a mind that’s very dull, and boring, and it’s just, almost mechanical, it just seems it’s as if you’re gettingup, going to work, eat, sleep, get up, work. Or it might jsut be that one little nagging thought that just goes round and round your mind. Well, whatever it its, meditation offers the opportunity, the potential to step back and to get a different perspective to see that things aren’t always as they appear.</p>\n<p>You know, we can’t change every little thing that happens to us in life, but we can change the way that we experience it. That’s the potential of meditation, of mindfulness. You don’t have to burn any incense, and you definitely don’t have to sit on the floor. All you need to do is to take 10 minutes out a day to step back, to familiarize yourself with the present moment so that you get to experience a greater sense of focus, calm and clarity in your life. Thank you very much.</p>\n"},{"title":"Are You A Giver Or A Taker?","date":"2019-12-27T03:27:42.000Z","_content":"\n[origin address](https://www.ted.com/talks/adam_grant_are_you_a_giver_or_a_taker/up-next)\n\nI want you to look arount the room for a minute and try to find the most paranoid person here. And then i want you to point at that person for me. OK, don't actually do it. But, as an organizational psychologist, I spend a lot of time in workplaces, and I find paranoia everywhere.\n\nParanoia is caused by people that I call \"takers.\" Takers are self-serving in their interactions. It's all about what can you do for me. The opposite is a giver. It's somebody who approaches most interactions by asking, \"What can I do for you?\" I wanted to give you a chance to think about your own style. We all have moments of giving and taking. Your style is how you treat most of the people most of the time, your default. So I have a short test you can take to figure out if you're more of a giver or a taker, and you can take it right now. (Moments later) This is the only thing i will say today that has no data behind it, but I am convinced the longer it takes for you to laugh at this cartoon, the more worried we should be that you're a taker. Of course, not all takers are narcissists. Some are just givers who got burned one too many times. Then there's another kind of taker that we won't be addressing today, and that's called a psychopath. I was curious, though, about how common these extremes are, and so I surveyed over 30,000 people across industries around the world's cultures. And I found that most people are right in the middle between giving and taking. They choose this third style called \"matching.\" If you're a matcher, you try to keep an even balance of give and take: quid pro quo. I'll do something for you if you do something for me. And that seems like a safe way to live your life. But is it the most effective and productive way to live your life? The answer to that question is a very definitive: maybe. I studied dozens of organizations, thousands of people. I had engineers measuring their productivity. I looked at medical students' grades, even salespeople's revenue. And, unexpectedly, the worst performers in each of these jobs were the givers. The engineers who got the least work done were the ones who did more favors than they got back. They were so busy doing other people's jobs, they literally ran out of time and energy to get their own work completed. In medical school, the lowest grades belong to the students who agree most strongly with statements like, \"I love helping others,\" which suggestes the doctor you ought to trust is the one who came to med school with no desire to help anybody. And then in sales, too, the lowest revenue accrued in the most generous salspeople. I actually reached out to one of those salespeople who had a very high giver score. And I asked him, \"Why do you suck at your job\"... I don't ask that way. \"What's the cost of generosity in sales?\" And he said, \"Well, I just care so deeply about my customers that I would never sell them one of our crappy products.\" So just out of curiosity, how many of you self-identify more as givers than takers or matchers? Raise your hands. OK, it would have been more before we talked about these data. But actually, it turns out there's a twist here, because givers are oftern sacrificing themselves, but they make their organizations better. We have a huge body of evidence, many, many studies looking at the frequency of giving behavior that exists in a team or an organization and the more oftern people are helping and sharing their knowledge and providing mentoring, the better organiztions do on every metric we can measure: higher profits, customers satisfaction, employee retention, even lower operating expenses. So givers spend a lot of time trying to help other people and improve the team, and them, unfortunately, they suffer along the way. \n\nI want to talk about what it takes to build cultures where givers actually get to succeed. So I wondered, then, if givers are the worst performers, who are the best performers? Let me start with the good news: it's not the takers. Takers tend to rise quickly but also fall quickly in most jobs. And they fall at the hands of matchers. If you're a matcher, you believe in \"An eye for an eye\" -- a just world. And so when you meet a taker, you feel like it's your mission in life to just punish the hell out of that person. And that way justice gets served. Well, most people are matchers. And that means if you're a taker, it tends to catch up with you eventually; what goes around will come around. And so the logical conclusion is: it must be the matchers who are the best performers. But they're not. In every job, in every organization I've ever studied, the best results belong to the givers again.\n\nTake a look at some data I gathered from hundreds of salespeople, tracking their revenue. What you can see is that the givers go to both extremes. They make up the majority of people who bring in the lowest revenue, but also the highest revenue. The same patterns were true for engineers' productivity and medical students' grades. Givers are overrepresented at the bottom and at the top of every success metric that I can track. Which raises the question: How do we create a world where more of these givers get to excel? I want to talk about how to do that, not just in businesses, but also in nonprofits, schools, even governments. Are you ready? I was going to do it anyway, but I appreciate the enthusiasm. \n\nThe first thing that's really critical is to recognize that givers are your most valuable people, but if they're not careful, they burn out. So you have to protect the givers in your midst. And I learned a great lesson about this from Fortune's best networker. It's the guy, not the cat. His name is Adam Rifkin. He's a very successful serial entrepreneur who spends a huge amount of his time helping other people. And his secret weapon is the five-minute favor. Adam said, \"You don't have to be Mother Teresa or Gandhi to be a giver. You just have to find small ways to add large value to other people's lives.\" That could be as simple as making an introduction between two people who could benefit from knowing each other. It could be sharing your knowlege or giving a little bit of feedback. Or it might be even something as basic as saying, \"You know, I'm going to try and figuer out if I can recognize somebody whose work has gone unnoticed.\" And those five-minute favors are really critical to helping givers set boundaries and protect themselves. The second thing that matters if you want to build a culture where givers succeed, is you actually need a culture where help-seeking is the norm; where people ask a lot. This may hit a little too close to home for some of you. What you see with successful givers is they recognize that it's OK to be a receiver, too. If you run an organization, we can actually make this easier. We can make it easier for people to ask for help. A couple colleagues and I studied hospitals. We found that on certain floors, nurses did a lot of help-seeking, and on other floors, they did very little of it. The factor that stood out on the floors where help-seeking was common, where it was the norm, was there was just one nurse whose sole job it was to help other nurses on the unit. When that role was avaiable, nurses said, \"It's not embarrassing, it's not vulnerable to ask for help, it's actually encouraged.\" Help-seeking isn't important just for protecting the success and the well-being of givers. It's also critical to getting more people to act like givers, because the data say that somewhere between 75 and 90 percent of all giving in organizations starts with a request. But a lot of people don't ask. They don't want to look imcompetent, they don't know where to turn, they don't want to burden others. Yes if nobody ever asks for help, you have a lot of frustrated givers in your organization who would love to step up and contirbute, if they only knew who could benefit and how.\n\nBut I think the most important thing, if you want to build a culture of successful givers, is to be thoughtful about who you let onto your team. I figured, you want to culture of productive generosity,  you should hire a bunch of givers. But I was surprised to discover, actually, that that was not right, that the negative impact of a taker on a culture is usually double to triple the positive impact of a giver. Think about it this way: one bad apple can spoil a barrel, but one good egg just does not make a dozen. I don't know what that means. But I hope you do. No, let even one taker into a team, and you will see that the givers will stop helping. They'll say, \"I'm surrounded by a bunch of snakers and sharks. Why should I contribute?\" Whereas if you let one giver into a team, you don't get an explosion of generosity. More often, people are like, \"Great! That person can do all our work.\" So, effective hiring and screening and team building is not about bringing in the givers; it's about weeding out the takers. If you can do that well, you'll be left with givers and matchers. The givers will be generous because they don't have to worry about the consequences. And the beauty of the matchers is that they follow the norm.\n\nSo how do you catch a taker before it's too late? We're actually bad at figuring out who's taker, especially on first impressions. There's a personality trait that throws us off. It's called aggreableness, one the major dimensions of personality across cultures. Agreeable people are warm and friendly, they're nice, they're polite. You find a lot of them in Canada, where ther was actually a national contest to come up with a new Canadian slogan and fill in the blank, \"As Canadian as...\" I though the winning entry was going to be, \"As Canadian as maple syrup,\" or, \"... ice hockey.\" But no, Canadians voted for their new national slogan to be, I kid you not, \"As Canadian as possible under the circumstances.\" Now for those of you who are highly agreeable, or maybe slightly Canadian, you get this right away. How could I ever say I'm any one thing when I'm constantly adapting to try to please other people? Disagreeable people do less of it. They're more critical, skeptical, challenging, and far more likely than their peers to go to law school. That's not a joke, that's actually an empirical fact. So I always assumed that agreeable people were givers and disagreeable people were takers. But then I gathered the data, and I was stunned to find no correlation between those traits, because it turns out that agreeableness-disagreeableness is your outer veneer: How pleasant is it to interact with you? Whereas giving and taking are more of your inner motives: What are your values? What are your intentions toward others? If you really want to judge people accurately, you have to get to teh moment every consultant in the room is waiting for, and draw a two-by-two.\n\nThe agreeable givers are easy to spot: they say yes to everything. The disagreeable takers are also recognized quickly, although you might call them by a slightly different name. We forget about the other two combinations. There are disagreeable givers in our organizations. There are people who are gruff and tough on the surface but underneath have others' best interests at heart. Or as an engineer put it, \"Oh, disagreeable givers like somebody with a bad user interface but a great operating system.\" If that helps you. Disagreeable givers are the most undervalued poeple in our organizations, because they're the ones who give the critical feedback that no one wants to hear but everyone needs to hear. We need to do a much better job valuing these people as opposed to writing them off early, and saying, \"Eh, kind of prickly, must be s selfish taker.\" The other combination we forget about is the deadly one the agreeable taker, also known as the faker. This is the person who's nice to your face, and then will stab you right in the back. And my favorite way to catch these people in the interview process is to ask the question, \"Can you give me the names of four people whose careers you have fundamentally improved?\" The takers will give you four names, and they will all be more influential than them, because takers are great at kissing up and then kicking down. Givers are more likely to name people who are below them in a hierarchy, who don't have as much power, who can do them no good. And let's face it, you all know you can learn a lot about character by watching how someone treats their restaurant server or their Uber driver.\n\nSo if we do all this well, if we can weed takers out of organizations, if we can make it safe to ask for help, if we can protect givers from burnout and make it OK for them to be ambitious in pursuing their own goals as well as trying to help other people, we can actually change the way that people define success. Instead of saying it's all about winning a competition, people will realize success is realy more about contribution. I believe that the most meaningful way to succeed is to help other people succeed. And if we can spread that belief, we can actually turn paranoia upside down. There's a name for that. It's called \"pronoia.\" Pronoia is the delusional belief that other people are plotting your well-being. That they're going around behind your back and saing exceptionally glowing things about you. The great thing about a culture of givers is that's not a delusion it's reality.\n\nI want to live in a world where givers succeed, and I hope you will help me create that world. Thank you.\n\n","source":"_posts/ted/are-you-a-giver-or-a-taker.md","raw":"---\ntitle: Are You A Giver Or A Taker?\ncategories: ted\ndate: 2019-12-27 11:27:42\n---\n\n[origin address](https://www.ted.com/talks/adam_grant_are_you_a_giver_or_a_taker/up-next)\n\nI want you to look arount the room for a minute and try to find the most paranoid person here. And then i want you to point at that person for me. OK, don't actually do it. But, as an organizational psychologist, I spend a lot of time in workplaces, and I find paranoia everywhere.\n\nParanoia is caused by people that I call \"takers.\" Takers are self-serving in their interactions. It's all about what can you do for me. The opposite is a giver. It's somebody who approaches most interactions by asking, \"What can I do for you?\" I wanted to give you a chance to think about your own style. We all have moments of giving and taking. Your style is how you treat most of the people most of the time, your default. So I have a short test you can take to figure out if you're more of a giver or a taker, and you can take it right now. (Moments later) This is the only thing i will say today that has no data behind it, but I am convinced the longer it takes for you to laugh at this cartoon, the more worried we should be that you're a taker. Of course, not all takers are narcissists. Some are just givers who got burned one too many times. Then there's another kind of taker that we won't be addressing today, and that's called a psychopath. I was curious, though, about how common these extremes are, and so I surveyed over 30,000 people across industries around the world's cultures. And I found that most people are right in the middle between giving and taking. They choose this third style called \"matching.\" If you're a matcher, you try to keep an even balance of give and take: quid pro quo. I'll do something for you if you do something for me. And that seems like a safe way to live your life. But is it the most effective and productive way to live your life? The answer to that question is a very definitive: maybe. I studied dozens of organizations, thousands of people. I had engineers measuring their productivity. I looked at medical students' grades, even salespeople's revenue. And, unexpectedly, the worst performers in each of these jobs were the givers. The engineers who got the least work done were the ones who did more favors than they got back. They were so busy doing other people's jobs, they literally ran out of time and energy to get their own work completed. In medical school, the lowest grades belong to the students who agree most strongly with statements like, \"I love helping others,\" which suggestes the doctor you ought to trust is the one who came to med school with no desire to help anybody. And then in sales, too, the lowest revenue accrued in the most generous salspeople. I actually reached out to one of those salespeople who had a very high giver score. And I asked him, \"Why do you suck at your job\"... I don't ask that way. \"What's the cost of generosity in sales?\" And he said, \"Well, I just care so deeply about my customers that I would never sell them one of our crappy products.\" So just out of curiosity, how many of you self-identify more as givers than takers or matchers? Raise your hands. OK, it would have been more before we talked about these data. But actually, it turns out there's a twist here, because givers are oftern sacrificing themselves, but they make their organizations better. We have a huge body of evidence, many, many studies looking at the frequency of giving behavior that exists in a team or an organization and the more oftern people are helping and sharing their knowledge and providing mentoring, the better organiztions do on every metric we can measure: higher profits, customers satisfaction, employee retention, even lower operating expenses. So givers spend a lot of time trying to help other people and improve the team, and them, unfortunately, they suffer along the way. \n\nI want to talk about what it takes to build cultures where givers actually get to succeed. So I wondered, then, if givers are the worst performers, who are the best performers? Let me start with the good news: it's not the takers. Takers tend to rise quickly but also fall quickly in most jobs. And they fall at the hands of matchers. If you're a matcher, you believe in \"An eye for an eye\" -- a just world. And so when you meet a taker, you feel like it's your mission in life to just punish the hell out of that person. And that way justice gets served. Well, most people are matchers. And that means if you're a taker, it tends to catch up with you eventually; what goes around will come around. And so the logical conclusion is: it must be the matchers who are the best performers. But they're not. In every job, in every organization I've ever studied, the best results belong to the givers again.\n\nTake a look at some data I gathered from hundreds of salespeople, tracking their revenue. What you can see is that the givers go to both extremes. They make up the majority of people who bring in the lowest revenue, but also the highest revenue. The same patterns were true for engineers' productivity and medical students' grades. Givers are overrepresented at the bottom and at the top of every success metric that I can track. Which raises the question: How do we create a world where more of these givers get to excel? I want to talk about how to do that, not just in businesses, but also in nonprofits, schools, even governments. Are you ready? I was going to do it anyway, but I appreciate the enthusiasm. \n\nThe first thing that's really critical is to recognize that givers are your most valuable people, but if they're not careful, they burn out. So you have to protect the givers in your midst. And I learned a great lesson about this from Fortune's best networker. It's the guy, not the cat. His name is Adam Rifkin. He's a very successful serial entrepreneur who spends a huge amount of his time helping other people. And his secret weapon is the five-minute favor. Adam said, \"You don't have to be Mother Teresa or Gandhi to be a giver. You just have to find small ways to add large value to other people's lives.\" That could be as simple as making an introduction between two people who could benefit from knowing each other. It could be sharing your knowlege or giving a little bit of feedback. Or it might be even something as basic as saying, \"You know, I'm going to try and figuer out if I can recognize somebody whose work has gone unnoticed.\" And those five-minute favors are really critical to helping givers set boundaries and protect themselves. The second thing that matters if you want to build a culture where givers succeed, is you actually need a culture where help-seeking is the norm; where people ask a lot. This may hit a little too close to home for some of you. What you see with successful givers is they recognize that it's OK to be a receiver, too. If you run an organization, we can actually make this easier. We can make it easier for people to ask for help. A couple colleagues and I studied hospitals. We found that on certain floors, nurses did a lot of help-seeking, and on other floors, they did very little of it. The factor that stood out on the floors where help-seeking was common, where it was the norm, was there was just one nurse whose sole job it was to help other nurses on the unit. When that role was avaiable, nurses said, \"It's not embarrassing, it's not vulnerable to ask for help, it's actually encouraged.\" Help-seeking isn't important just for protecting the success and the well-being of givers. It's also critical to getting more people to act like givers, because the data say that somewhere between 75 and 90 percent of all giving in organizations starts with a request. But a lot of people don't ask. They don't want to look imcompetent, they don't know where to turn, they don't want to burden others. Yes if nobody ever asks for help, you have a lot of frustrated givers in your organization who would love to step up and contirbute, if they only knew who could benefit and how.\n\nBut I think the most important thing, if you want to build a culture of successful givers, is to be thoughtful about who you let onto your team. I figured, you want to culture of productive generosity,  you should hire a bunch of givers. But I was surprised to discover, actually, that that was not right, that the negative impact of a taker on a culture is usually double to triple the positive impact of a giver. Think about it this way: one bad apple can spoil a barrel, but one good egg just does not make a dozen. I don't know what that means. But I hope you do. No, let even one taker into a team, and you will see that the givers will stop helping. They'll say, \"I'm surrounded by a bunch of snakers and sharks. Why should I contribute?\" Whereas if you let one giver into a team, you don't get an explosion of generosity. More often, people are like, \"Great! That person can do all our work.\" So, effective hiring and screening and team building is not about bringing in the givers; it's about weeding out the takers. If you can do that well, you'll be left with givers and matchers. The givers will be generous because they don't have to worry about the consequences. And the beauty of the matchers is that they follow the norm.\n\nSo how do you catch a taker before it's too late? We're actually bad at figuring out who's taker, especially on first impressions. There's a personality trait that throws us off. It's called aggreableness, one the major dimensions of personality across cultures. Agreeable people are warm and friendly, they're nice, they're polite. You find a lot of them in Canada, where ther was actually a national contest to come up with a new Canadian slogan and fill in the blank, \"As Canadian as...\" I though the winning entry was going to be, \"As Canadian as maple syrup,\" or, \"... ice hockey.\" But no, Canadians voted for their new national slogan to be, I kid you not, \"As Canadian as possible under the circumstances.\" Now for those of you who are highly agreeable, or maybe slightly Canadian, you get this right away. How could I ever say I'm any one thing when I'm constantly adapting to try to please other people? Disagreeable people do less of it. They're more critical, skeptical, challenging, and far more likely than their peers to go to law school. That's not a joke, that's actually an empirical fact. So I always assumed that agreeable people were givers and disagreeable people were takers. But then I gathered the data, and I was stunned to find no correlation between those traits, because it turns out that agreeableness-disagreeableness is your outer veneer: How pleasant is it to interact with you? Whereas giving and taking are more of your inner motives: What are your values? What are your intentions toward others? If you really want to judge people accurately, you have to get to teh moment every consultant in the room is waiting for, and draw a two-by-two.\n\nThe agreeable givers are easy to spot: they say yes to everything. The disagreeable takers are also recognized quickly, although you might call them by a slightly different name. We forget about the other two combinations. There are disagreeable givers in our organizations. There are people who are gruff and tough on the surface but underneath have others' best interests at heart. Or as an engineer put it, \"Oh, disagreeable givers like somebody with a bad user interface but a great operating system.\" If that helps you. Disagreeable givers are the most undervalued poeple in our organizations, because they're the ones who give the critical feedback that no one wants to hear but everyone needs to hear. We need to do a much better job valuing these people as opposed to writing them off early, and saying, \"Eh, kind of prickly, must be s selfish taker.\" The other combination we forget about is the deadly one the agreeable taker, also known as the faker. This is the person who's nice to your face, and then will stab you right in the back. And my favorite way to catch these people in the interview process is to ask the question, \"Can you give me the names of four people whose careers you have fundamentally improved?\" The takers will give you four names, and they will all be more influential than them, because takers are great at kissing up and then kicking down. Givers are more likely to name people who are below them in a hierarchy, who don't have as much power, who can do them no good. And let's face it, you all know you can learn a lot about character by watching how someone treats their restaurant server or their Uber driver.\n\nSo if we do all this well, if we can weed takers out of organizations, if we can make it safe to ask for help, if we can protect givers from burnout and make it OK for them to be ambitious in pursuing their own goals as well as trying to help other people, we can actually change the way that people define success. Instead of saying it's all about winning a competition, people will realize success is realy more about contribution. I believe that the most meaningful way to succeed is to help other people succeed. And if we can spread that belief, we can actually turn paranoia upside down. There's a name for that. It's called \"pronoia.\" Pronoia is the delusional belief that other people are plotting your well-being. That they're going around behind your back and saing exceptionally glowing things about you. The great thing about a culture of givers is that's not a delusion it's reality.\n\nI want to live in a world where givers succeed, and I hope you will help me create that world. Thank you.\n\n","slug":"ted/are-you-a-giver-or-a-taker","published":1,"updated":"2019-12-31T10:32:14.012Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxdu001nlkyxh20pgtx2","content":"<p><a href=\"https://www.ted.com/talks/adam_grant_are_you_a_giver_or_a_taker/up-next\" target=\"_blank\" rel=\"noopener\">origin address</a></p>\n<p>I want you to look arount the room for a minute and try to find the most paranoid person here. And then i want you to point at that person for me. OK, don’t actually do it. But, as an organizational psychologist, I spend a lot of time in workplaces, and I find paranoia everywhere.</p>\n<p>Paranoia is caused by people that I call “takers.” Takers are self-serving in their interactions. It’s all about what can you do for me. The opposite is a giver. It’s somebody who approaches most interactions by asking, “What can I do for you?” I wanted to give you a chance to think about your own style. We all have moments of giving and taking. Your style is how you treat most of the people most of the time, your default. So I have a short test you can take to figure out if you’re more of a giver or a taker, and you can take it right now. (Moments later) This is the only thing i will say today that has no data behind it, but I am convinced the longer it takes for you to laugh at this cartoon, the more worried we should be that you’re a taker. Of course, not all takers are narcissists. Some are just givers who got burned one too many times. Then there’s another kind of taker that we won’t be addressing today, and that’s called a psychopath. I was curious, though, about how common these extremes are, and so I surveyed over 30,000 people across industries around the world’s cultures. And I found that most people are right in the middle between giving and taking. They choose this third style called “matching.” If you’re a matcher, you try to keep an even balance of give and take: quid pro quo. I’ll do something for you if you do something for me. And that seems like a safe way to live your life. But is it the most effective and productive way to live your life? The answer to that question is a very definitive: maybe. I studied dozens of organizations, thousands of people. I had engineers measuring their productivity. I looked at medical students’ grades, even salespeople’s revenue. And, unexpectedly, the worst performers in each of these jobs were the givers. The engineers who got the least work done were the ones who did more favors than they got back. They were so busy doing other people’s jobs, they literally ran out of time and energy to get their own work completed. In medical school, the lowest grades belong to the students who agree most strongly with statements like, “I love helping others,” which suggestes the doctor you ought to trust is the one who came to med school with no desire to help anybody. And then in sales, too, the lowest revenue accrued in the most generous salspeople. I actually reached out to one of those salespeople who had a very high giver score. And I asked him, “Why do you suck at your job”… I don’t ask that way. “What’s the cost of generosity in sales?” And he said, “Well, I just care so deeply about my customers that I would never sell them one of our crappy products.” So just out of curiosity, how many of you self-identify more as givers than takers or matchers? Raise your hands. OK, it would have been more before we talked about these data. But actually, it turns out there’s a twist here, because givers are oftern sacrificing themselves, but they make their organizations better. We have a huge body of evidence, many, many studies looking at the frequency of giving behavior that exists in a team or an organization and the more oftern people are helping and sharing their knowledge and providing mentoring, the better organiztions do on every metric we can measure: higher profits, customers satisfaction, employee retention, even lower operating expenses. So givers spend a lot of time trying to help other people and improve the team, and them, unfortunately, they suffer along the way. </p>\n<p>I want to talk about what it takes to build cultures where givers actually get to succeed. So I wondered, then, if givers are the worst performers, who are the best performers? Let me start with the good news: it’s not the takers. Takers tend to rise quickly but also fall quickly in most jobs. And they fall at the hands of matchers. If you’re a matcher, you believe in “An eye for an eye” – a just world. And so when you meet a taker, you feel like it’s your mission in life to just punish the hell out of that person. And that way justice gets served. Well, most people are matchers. And that means if you’re a taker, it tends to catch up with you eventually; what goes around will come around. And so the logical conclusion is: it must be the matchers who are the best performers. But they’re not. In every job, in every organization I’ve ever studied, the best results belong to the givers again.</p>\n<p>Take a look at some data I gathered from hundreds of salespeople, tracking their revenue. What you can see is that the givers go to both extremes. They make up the majority of people who bring in the lowest revenue, but also the highest revenue. The same patterns were true for engineers’ productivity and medical students’ grades. Givers are overrepresented at the bottom and at the top of every success metric that I can track. Which raises the question: How do we create a world where more of these givers get to excel? I want to talk about how to do that, not just in businesses, but also in nonprofits, schools, even governments. Are you ready? I was going to do it anyway, but I appreciate the enthusiasm. </p>\n<p>The first thing that’s really critical is to recognize that givers are your most valuable people, but if they’re not careful, they burn out. So you have to protect the givers in your midst. And I learned a great lesson about this from Fortune’s best networker. It’s the guy, not the cat. His name is Adam Rifkin. He’s a very successful serial entrepreneur who spends a huge amount of his time helping other people. And his secret weapon is the five-minute favor. Adam said, “You don’t have to be Mother Teresa or Gandhi to be a giver. You just have to find small ways to add large value to other people’s lives.” That could be as simple as making an introduction between two people who could benefit from knowing each other. It could be sharing your knowlege or giving a little bit of feedback. Or it might be even something as basic as saying, “You know, I’m going to try and figuer out if I can recognize somebody whose work has gone unnoticed.” And those five-minute favors are really critical to helping givers set boundaries and protect themselves. The second thing that matters if you want to build a culture where givers succeed, is you actually need a culture where help-seeking is the norm; where people ask a lot. This may hit a little too close to home for some of you. What you see with successful givers is they recognize that it’s OK to be a receiver, too. If you run an organization, we can actually make this easier. We can make it easier for people to ask for help. A couple colleagues and I studied hospitals. We found that on certain floors, nurses did a lot of help-seeking, and on other floors, they did very little of it. The factor that stood out on the floors where help-seeking was common, where it was the norm, was there was just one nurse whose sole job it was to help other nurses on the unit. When that role was avaiable, nurses said, “It’s not embarrassing, it’s not vulnerable to ask for help, it’s actually encouraged.” Help-seeking isn’t important just for protecting the success and the well-being of givers. It’s also critical to getting more people to act like givers, because the data say that somewhere between 75 and 90 percent of all giving in organizations starts with a request. But a lot of people don’t ask. They don’t want to look imcompetent, they don’t know where to turn, they don’t want to burden others. Yes if nobody ever asks for help, you have a lot of frustrated givers in your organization who would love to step up and contirbute, if they only knew who could benefit and how.</p>\n<p>But I think the most important thing, if you want to build a culture of successful givers, is to be thoughtful about who you let onto your team. I figured, you want to culture of productive generosity,  you should hire a bunch of givers. But I was surprised to discover, actually, that that was not right, that the negative impact of a taker on a culture is usually double to triple the positive impact of a giver. Think about it this way: one bad apple can spoil a barrel, but one good egg just does not make a dozen. I don’t know what that means. But I hope you do. No, let even one taker into a team, and you will see that the givers will stop helping. They’ll say, “I’m surrounded by a bunch of snakers and sharks. Why should I contribute?” Whereas if you let one giver into a team, you don’t get an explosion of generosity. More often, people are like, “Great! That person can do all our work.” So, effective hiring and screening and team building is not about bringing in the givers; it’s about weeding out the takers. If you can do that well, you’ll be left with givers and matchers. The givers will be generous because they don’t have to worry about the consequences. And the beauty of the matchers is that they follow the norm.</p>\n<p>So how do you catch a taker before it’s too late? We’re actually bad at figuring out who’s taker, especially on first impressions. There’s a personality trait that throws us off. It’s called aggreableness, one the major dimensions of personality across cultures. Agreeable people are warm and friendly, they’re nice, they’re polite. You find a lot of them in Canada, where ther was actually a national contest to come up with a new Canadian slogan and fill in the blank, “As Canadian as…” I though the winning entry was going to be, “As Canadian as maple syrup,” or, “… ice hockey.” But no, Canadians voted for their new national slogan to be, I kid you not, “As Canadian as possible under the circumstances.” Now for those of you who are highly agreeable, or maybe slightly Canadian, you get this right away. How could I ever say I’m any one thing when I’m constantly adapting to try to please other people? Disagreeable people do less of it. They’re more critical, skeptical, challenging, and far more likely than their peers to go to law school. That’s not a joke, that’s actually an empirical fact. So I always assumed that agreeable people were givers and disagreeable people were takers. But then I gathered the data, and I was stunned to find no correlation between those traits, because it turns out that agreeableness-disagreeableness is your outer veneer: How pleasant is it to interact with you? Whereas giving and taking are more of your inner motives: What are your values? What are your intentions toward others? If you really want to judge people accurately, you have to get to teh moment every consultant in the room is waiting for, and draw a two-by-two.</p>\n<p>The agreeable givers are easy to spot: they say yes to everything. The disagreeable takers are also recognized quickly, although you might call them by a slightly different name. We forget about the other two combinations. There are disagreeable givers in our organizations. There are people who are gruff and tough on the surface but underneath have others’ best interests at heart. Or as an engineer put it, “Oh, disagreeable givers like somebody with a bad user interface but a great operating system.” If that helps you. Disagreeable givers are the most undervalued poeple in our organizations, because they’re the ones who give the critical feedback that no one wants to hear but everyone needs to hear. We need to do a much better job valuing these people as opposed to writing them off early, and saying, “Eh, kind of prickly, must be s selfish taker.” The other combination we forget about is the deadly one the agreeable taker, also known as the faker. This is the person who’s nice to your face, and then will stab you right in the back. And my favorite way to catch these people in the interview process is to ask the question, “Can you give me the names of four people whose careers you have fundamentally improved?” The takers will give you four names, and they will all be more influential than them, because takers are great at kissing up and then kicking down. Givers are more likely to name people who are below them in a hierarchy, who don’t have as much power, who can do them no good. And let’s face it, you all know you can learn a lot about character by watching how someone treats their restaurant server or their Uber driver.</p>\n<p>So if we do all this well, if we can weed takers out of organizations, if we can make it safe to ask for help, if we can protect givers from burnout and make it OK for them to be ambitious in pursuing their own goals as well as trying to help other people, we can actually change the way that people define success. Instead of saying it’s all about winning a competition, people will realize success is realy more about contribution. I believe that the most meaningful way to succeed is to help other people succeed. And if we can spread that belief, we can actually turn paranoia upside down. There’s a name for that. It’s called “pronoia.” Pronoia is the delusional belief that other people are plotting your well-being. That they’re going around behind your back and saing exceptionally glowing things about you. The great thing about a culture of givers is that’s not a delusion it’s reality.</p>\n<p>I want to live in a world where givers succeed, and I hope you will help me create that world. Thank you.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.ted.com/talks/adam_grant_are_you_a_giver_or_a_taker/up-next\" target=\"_blank\" rel=\"noopener\">origin address</a></p>\n<p>I want you to look arount the room for a minute and try to find the most paranoid person here. And then i want you to point at that person for me. OK, don’t actually do it. But, as an organizational psychologist, I spend a lot of time in workplaces, and I find paranoia everywhere.</p>\n<p>Paranoia is caused by people that I call “takers.” Takers are self-serving in their interactions. It’s all about what can you do for me. The opposite is a giver. It’s somebody who approaches most interactions by asking, “What can I do for you?” I wanted to give you a chance to think about your own style. We all have moments of giving and taking. Your style is how you treat most of the people most of the time, your default. So I have a short test you can take to figure out if you’re more of a giver or a taker, and you can take it right now. (Moments later) This is the only thing i will say today that has no data behind it, but I am convinced the longer it takes for you to laugh at this cartoon, the more worried we should be that you’re a taker. Of course, not all takers are narcissists. Some are just givers who got burned one too many times. Then there’s another kind of taker that we won’t be addressing today, and that’s called a psychopath. I was curious, though, about how common these extremes are, and so I surveyed over 30,000 people across industries around the world’s cultures. And I found that most people are right in the middle between giving and taking. They choose this third style called “matching.” If you’re a matcher, you try to keep an even balance of give and take: quid pro quo. I’ll do something for you if you do something for me. And that seems like a safe way to live your life. But is it the most effective and productive way to live your life? The answer to that question is a very definitive: maybe. I studied dozens of organizations, thousands of people. I had engineers measuring their productivity. I looked at medical students’ grades, even salespeople’s revenue. And, unexpectedly, the worst performers in each of these jobs were the givers. The engineers who got the least work done were the ones who did more favors than they got back. They were so busy doing other people’s jobs, they literally ran out of time and energy to get their own work completed. In medical school, the lowest grades belong to the students who agree most strongly with statements like, “I love helping others,” which suggestes the doctor you ought to trust is the one who came to med school with no desire to help anybody. And then in sales, too, the lowest revenue accrued in the most generous salspeople. I actually reached out to one of those salespeople who had a very high giver score. And I asked him, “Why do you suck at your job”… I don’t ask that way. “What’s the cost of generosity in sales?” And he said, “Well, I just care so deeply about my customers that I would never sell them one of our crappy products.” So just out of curiosity, how many of you self-identify more as givers than takers or matchers? Raise your hands. OK, it would have been more before we talked about these data. But actually, it turns out there’s a twist here, because givers are oftern sacrificing themselves, but they make their organizations better. We have a huge body of evidence, many, many studies looking at the frequency of giving behavior that exists in a team or an organization and the more oftern people are helping and sharing their knowledge and providing mentoring, the better organiztions do on every metric we can measure: higher profits, customers satisfaction, employee retention, even lower operating expenses. So givers spend a lot of time trying to help other people and improve the team, and them, unfortunately, they suffer along the way. </p>\n<p>I want to talk about what it takes to build cultures where givers actually get to succeed. So I wondered, then, if givers are the worst performers, who are the best performers? Let me start with the good news: it’s not the takers. Takers tend to rise quickly but also fall quickly in most jobs. And they fall at the hands of matchers. If you’re a matcher, you believe in “An eye for an eye” – a just world. And so when you meet a taker, you feel like it’s your mission in life to just punish the hell out of that person. And that way justice gets served. Well, most people are matchers. And that means if you’re a taker, it tends to catch up with you eventually; what goes around will come around. And so the logical conclusion is: it must be the matchers who are the best performers. But they’re not. In every job, in every organization I’ve ever studied, the best results belong to the givers again.</p>\n<p>Take a look at some data I gathered from hundreds of salespeople, tracking their revenue. What you can see is that the givers go to both extremes. They make up the majority of people who bring in the lowest revenue, but also the highest revenue. The same patterns were true for engineers’ productivity and medical students’ grades. Givers are overrepresented at the bottom and at the top of every success metric that I can track. Which raises the question: How do we create a world where more of these givers get to excel? I want to talk about how to do that, not just in businesses, but also in nonprofits, schools, even governments. Are you ready? I was going to do it anyway, but I appreciate the enthusiasm. </p>\n<p>The first thing that’s really critical is to recognize that givers are your most valuable people, but if they’re not careful, they burn out. So you have to protect the givers in your midst. And I learned a great lesson about this from Fortune’s best networker. It’s the guy, not the cat. His name is Adam Rifkin. He’s a very successful serial entrepreneur who spends a huge amount of his time helping other people. And his secret weapon is the five-minute favor. Adam said, “You don’t have to be Mother Teresa or Gandhi to be a giver. You just have to find small ways to add large value to other people’s lives.” That could be as simple as making an introduction between two people who could benefit from knowing each other. It could be sharing your knowlege or giving a little bit of feedback. Or it might be even something as basic as saying, “You know, I’m going to try and figuer out if I can recognize somebody whose work has gone unnoticed.” And those five-minute favors are really critical to helping givers set boundaries and protect themselves. The second thing that matters if you want to build a culture where givers succeed, is you actually need a culture where help-seeking is the norm; where people ask a lot. This may hit a little too close to home for some of you. What you see with successful givers is they recognize that it’s OK to be a receiver, too. If you run an organization, we can actually make this easier. We can make it easier for people to ask for help. A couple colleagues and I studied hospitals. We found that on certain floors, nurses did a lot of help-seeking, and on other floors, they did very little of it. The factor that stood out on the floors where help-seeking was common, where it was the norm, was there was just one nurse whose sole job it was to help other nurses on the unit. When that role was avaiable, nurses said, “It’s not embarrassing, it’s not vulnerable to ask for help, it’s actually encouraged.” Help-seeking isn’t important just for protecting the success and the well-being of givers. It’s also critical to getting more people to act like givers, because the data say that somewhere between 75 and 90 percent of all giving in organizations starts with a request. But a lot of people don’t ask. They don’t want to look imcompetent, they don’t know where to turn, they don’t want to burden others. Yes if nobody ever asks for help, you have a lot of frustrated givers in your organization who would love to step up and contirbute, if they only knew who could benefit and how.</p>\n<p>But I think the most important thing, if you want to build a culture of successful givers, is to be thoughtful about who you let onto your team. I figured, you want to culture of productive generosity,  you should hire a bunch of givers. But I was surprised to discover, actually, that that was not right, that the negative impact of a taker on a culture is usually double to triple the positive impact of a giver. Think about it this way: one bad apple can spoil a barrel, but one good egg just does not make a dozen. I don’t know what that means. But I hope you do. No, let even one taker into a team, and you will see that the givers will stop helping. They’ll say, “I’m surrounded by a bunch of snakers and sharks. Why should I contribute?” Whereas if you let one giver into a team, you don’t get an explosion of generosity. More often, people are like, “Great! That person can do all our work.” So, effective hiring and screening and team building is not about bringing in the givers; it’s about weeding out the takers. If you can do that well, you’ll be left with givers and matchers. The givers will be generous because they don’t have to worry about the consequences. And the beauty of the matchers is that they follow the norm.</p>\n<p>So how do you catch a taker before it’s too late? We’re actually bad at figuring out who’s taker, especially on first impressions. There’s a personality trait that throws us off. It’s called aggreableness, one the major dimensions of personality across cultures. Agreeable people are warm and friendly, they’re nice, they’re polite. You find a lot of them in Canada, where ther was actually a national contest to come up with a new Canadian slogan and fill in the blank, “As Canadian as…” I though the winning entry was going to be, “As Canadian as maple syrup,” or, “… ice hockey.” But no, Canadians voted for their new national slogan to be, I kid you not, “As Canadian as possible under the circumstances.” Now for those of you who are highly agreeable, or maybe slightly Canadian, you get this right away. How could I ever say I’m any one thing when I’m constantly adapting to try to please other people? Disagreeable people do less of it. They’re more critical, skeptical, challenging, and far more likely than their peers to go to law school. That’s not a joke, that’s actually an empirical fact. So I always assumed that agreeable people were givers and disagreeable people were takers. But then I gathered the data, and I was stunned to find no correlation between those traits, because it turns out that agreeableness-disagreeableness is your outer veneer: How pleasant is it to interact with you? Whereas giving and taking are more of your inner motives: What are your values? What are your intentions toward others? If you really want to judge people accurately, you have to get to teh moment every consultant in the room is waiting for, and draw a two-by-two.</p>\n<p>The agreeable givers are easy to spot: they say yes to everything. The disagreeable takers are also recognized quickly, although you might call them by a slightly different name. We forget about the other two combinations. There are disagreeable givers in our organizations. There are people who are gruff and tough on the surface but underneath have others’ best interests at heart. Or as an engineer put it, “Oh, disagreeable givers like somebody with a bad user interface but a great operating system.” If that helps you. Disagreeable givers are the most undervalued poeple in our organizations, because they’re the ones who give the critical feedback that no one wants to hear but everyone needs to hear. We need to do a much better job valuing these people as opposed to writing them off early, and saying, “Eh, kind of prickly, must be s selfish taker.” The other combination we forget about is the deadly one the agreeable taker, also known as the faker. This is the person who’s nice to your face, and then will stab you right in the back. And my favorite way to catch these people in the interview process is to ask the question, “Can you give me the names of four people whose careers you have fundamentally improved?” The takers will give you four names, and they will all be more influential than them, because takers are great at kissing up and then kicking down. Givers are more likely to name people who are below them in a hierarchy, who don’t have as much power, who can do them no good. And let’s face it, you all know you can learn a lot about character by watching how someone treats their restaurant server or their Uber driver.</p>\n<p>So if we do all this well, if we can weed takers out of organizations, if we can make it safe to ask for help, if we can protect givers from burnout and make it OK for them to be ambitious in pursuing their own goals as well as trying to help other people, we can actually change the way that people define success. Instead of saying it’s all about winning a competition, people will realize success is realy more about contribution. I believe that the most meaningful way to succeed is to help other people succeed. And if we can spread that belief, we can actually turn paranoia upside down. There’s a name for that. It’s called “pronoia.” Pronoia is the delusional belief that other people are plotting your well-being. That they’re going around behind your back and saing exceptionally glowing things about you. The great thing about a culture of givers is that’s not a delusion it’s reality.</p>\n<p>I want to live in a world where givers succeed, and I hope you will help me create that world. Thank you.</p>\n"},{"title":"Why Good Leaders Make You Feel Safe","date":"2019-12-26T03:31:15.000Z","_content":"\n[original address]( https://www.ted.com/talks/simon_sinek_why_good_leaders_make_you_feel_safe?referrer=playlist-how_to_be_a_good_mentor)\n\nThere’s a man by the name of Captain William Swenson, who recently was awarded the congressional Medal of Honor for his actions on September 8, 2009. On that day, a column of American and Afghan troops were making their way through a part of Afghanistan to help protect a group of government officials who would be meeting with come local village elders. The column came under ambush, and was surrounded on three sides, and amongst many other things, Captain Swenson was recognized for running into live fire to rescue the wounded and pull out the dead. One of the people he rescued was a sergeant, and he and a comrade were making their way to a medevac helicopter. And what was remarkable about this day is, by sheer coincidence, one of the medevac medics happened to have a GoPro camera on his helmet and captured the whole scene on camera. It shows Captain Swenson and his comrade bringing this wounded soldier who had received a gunshot to the neck. They put him in the helicopter, and then you see Captain Swenson bend over and give him a kiss before he turns around to rescue more. \n\nI saw this, and I thought to myself, where do people like that come from? What is that? That is some deep, deep, emotion, when you would want to do that. There’s a love there, and I want to know why is that I don’t have people that I work with like that? You know, in the military, they give medals to people who are willing to sacrifice themselves so that others may gain. In business, we give bonuses to people who are willing to sacrifice others so that we may gain. We have it backwards. Right? So I asked myself, where do people like this come from? And my initial conclusion was that they’re just better people. That’s why they’re attracted to the military. These better people are attracted to this concept of service. But that’s completely wrong. \n\nWhat I learned was that it’s the environment, and if you get the environment right, every single one of us has the capacity to do these remarkable things, and more importantly, others have that capacity too. I’ve had the great honor of getting to meet some of these, who we would call heroes, who have put themselves and put their lives at risk to save others, and I asked them, “Why would you do it? Why did you do it?” And they all say the same thing: “Because they would have done it for me.” It’s this deep sense of trust and cooperation. So trust and cooperation are really important here. The problem with concepts of trust and cooperation is that they are feelings, they are not instructions. I can’t simple say to you, “Trust me,” and you will. I can’t simple instruct two people to cooperate, and they will. It’s not how it works. It’s a feeling. So where does that feeling come from? \n\nIf you go back 50,000 years to the Paleolithic era, to the early days of Homo sapiens, what we find is that the world was filled with danger, all of there forces working very, very hard to kill us. Nothing personal. Whether it was the weather, lack of resources, maybe a saber-toothed tiger, all of these thing working to reduce our lifespan. And so we evolved into social animals, where we lived together and worked together in what I call a circle of safety, inside the tribe, where we felt like we belonged. And when we felt safe amongst our own, the natural reaction was trust and cooperation. There are inherent benefits to this. It means I can fall asleep at night and trust that someone from within my tribe will watch for danger. If we don’t trust each other, if I don’t trust you, that means you won’t watch for danger. Bad system of survival. The modern day is exactly the same thing. The world is filled with danger, things that are trying to frustrate our lives or reduce our success, reduce our opportunity for success. It could be the ups and downs in the economy, the uncertainty of the stock market. It could be a new technology that renders your business model obsolete overnight. Or it could be your competition that is sometimes trying to kill you. It’s sometimes trying to put you out of business, but at the very minimum is working hard to frustrate your growth and steal your business from you. We have no control over these forces. There are a constant, and they’re not going away. The only variable are the conditions inside the organization, and that’s where leadership matters, because it’s the leader that sets the tone. When a leader makes the choice to put the safety and lives of the people inside the organization first, to sacrifice their comforts and sacrifice the tangible results, so that the people remain and feel safe and feel like they belong, remarkable things happen. \n\nI was flying on a trip, and I was witness to an incident where a passenger attempted to board before their number was called, and I watched the gate agent, treat this man like he had broken the law, like a criminal. He was yelled at for attempting to board one group too soon. So I said something. I said, “Why do you have treat us like cattle? Why can’t you treat us like human beings?” And this is exactly what she said to me. She said, “Sir, if I don’t follow the rules, I could get in trouble or lose my job.” All she was telling me is that she doesn’t feel safe. All she was telling me is that she doesn’t trust her leaders. The reason we like flying Southwest Airlines is not because they necessarily hire better people. It’s they don’t fear their leaders. You see, if the conditions are wrong, we are forced to expand our own time and energy to protect ourselves from each other, and that inherently weakens the organization. When we feel safe inside the organization, we will naturally combine our talents and our strengths and work tirelessly to face the dangers outside and seize the opportunities. \n\nThe closest analogy I can give to what a great leader is, is like being a parent. If you think about what being a great parent is, what do you want? What makes a great parent? We want to give our child opportunities, education, discipline them when necessary, all so that they can grow up and achieve more than we could for ourselves. Great leaders want exactly the same thing. They want to provide provide people opportunity, education, discipline when necessary, build their self-confidence, give them the opportunity to try and fail, all so that they could achieve more than we could ever imagine for ourselves.\n\nCharlie Kim, who’s the CEO of a company called Next Jump in New York City, a tech company, he makes the point that if you had hard times in your family, would you ever consider laying off one of your children? We would never do it. Then why do we consider laying off people inside our organization? Charlie implemented a policy of lifetime employment. If you get a job at Next Jump, you cannot get fired for performance issues. In fact, if you have issues, they will coach you and they will give you support, just like we would with one of our children who happens to come home with a C fro school. It’s the complete opposite. This is the reason so many people have such a visceral hatred, anger, at some of these banking CEOs with their disproportionate salaries and bonus structures. It’s not the numbers. It’s that they have violated the very definition of leadership. They have violated this deep-seated social contract. We know that they allowed their people to be sacrificed so they could protect their own interests, or worse, they sacrificed their people to protect their own interests. This is what so offends us, not the numbers. Would anybody be offended if we gave a $150 million bonus to Gandhi? How about a $250 million bonus to Mother Teresa? Do we have an issue with that? None at all. Great leaders would never sacrifice the people to save the numbers. They would sooner sacrifice the numbers to save the people.\n\nBob Chapman, who runs a large manufacturing company in the Midwest called Barry-Wehmiller, in 2008 was hit very hard by the recession, and they lost 30 percent of their orders overnight. Now in a large manufacturing company, this is a big deal, and they could no longer afford their labor pool. They needed to save 10 million dollars, so like so many companies today, the board got together and discussed layoff. And Bob refused. You see, Bob doesn’t believe in head counts. Bob believes in heart counts, and it’s much more difficult to simply reduce the heart count. And so they came up with a furlough program. Every employee, from secretary to CEO, was required to take four weeks of unpaid vacation. They could take it any time they wanted, and they did not have to take it consecutively. But is was how Bob announced the program that mattered so much. He said, it’s better that we should all suffer a little than any of us should have to suffer a lot, and morale went up. They saved 20 million dollars, and most importantly, as would be expected, when the people feel safe and protected by the leadership in the organization, the natural reaction is to trust and cooperate. And quite spontaneously, nobody expected, people started trading with each other. Those who could afford it more would trade with those who could afford it less. People would take five weeks so that somebody else only had to take three. Leadership is a choice. It is not a rank. I know many people at the seniormost levels of organizations who are absolutely not leaders. They are authorities, and we do what they say because they have authority over us, but we would not follow them. And I know many people who are at the bottoms of organizations who have no authority and they are absolutely leaders, and this is because they have chosen to look after the person to left of them, and they have chosen to look after the person to the right of them. This is what a leader is.\n\nI heard a story of some Marines, who were out in theater, and as is the Marine custom, the officer ate last, and he let his men eat first, and when they were done, there was no food left for him. And when they went back out in the field, his men brought him some of their food so that he may eat, because that’s what happens. We call them leaders because they go first. We call them leaders because they take the risk before anybody else does. We call them leaders because they will choose to sacrifice so that their people may be safe and protected and so their people may gain, and when we do, the natural response is that our people will sacrifice for us. They will give us their blood and sweat and tears to see that their leaders’ vision comes to life, and when we ask them, “Why would you do that? Why would you give your blood and sweat and tears for that person?” They all say the same thing: “Because they would have done it for me.” And isn’t that the organization we would all like to work in? Thank you very much.\n","source":"_posts/ted/why-good-leaders-make-you-feel-safe.md","raw":"---\ntitle: Why Good Leaders Make You Feel Safe\ncategories: ted\ndate: 2019-12-26 11:31:15\n---\n\n[original address]( https://www.ted.com/talks/simon_sinek_why_good_leaders_make_you_feel_safe?referrer=playlist-how_to_be_a_good_mentor)\n\nThere’s a man by the name of Captain William Swenson, who recently was awarded the congressional Medal of Honor for his actions on September 8, 2009. On that day, a column of American and Afghan troops were making their way through a part of Afghanistan to help protect a group of government officials who would be meeting with come local village elders. The column came under ambush, and was surrounded on three sides, and amongst many other things, Captain Swenson was recognized for running into live fire to rescue the wounded and pull out the dead. One of the people he rescued was a sergeant, and he and a comrade were making their way to a medevac helicopter. And what was remarkable about this day is, by sheer coincidence, one of the medevac medics happened to have a GoPro camera on his helmet and captured the whole scene on camera. It shows Captain Swenson and his comrade bringing this wounded soldier who had received a gunshot to the neck. They put him in the helicopter, and then you see Captain Swenson bend over and give him a kiss before he turns around to rescue more. \n\nI saw this, and I thought to myself, where do people like that come from? What is that? That is some deep, deep, emotion, when you would want to do that. There’s a love there, and I want to know why is that I don’t have people that I work with like that? You know, in the military, they give medals to people who are willing to sacrifice themselves so that others may gain. In business, we give bonuses to people who are willing to sacrifice others so that we may gain. We have it backwards. Right? So I asked myself, where do people like this come from? And my initial conclusion was that they’re just better people. That’s why they’re attracted to the military. These better people are attracted to this concept of service. But that’s completely wrong. \n\nWhat I learned was that it’s the environment, and if you get the environment right, every single one of us has the capacity to do these remarkable things, and more importantly, others have that capacity too. I’ve had the great honor of getting to meet some of these, who we would call heroes, who have put themselves and put their lives at risk to save others, and I asked them, “Why would you do it? Why did you do it?” And they all say the same thing: “Because they would have done it for me.” It’s this deep sense of trust and cooperation. So trust and cooperation are really important here. The problem with concepts of trust and cooperation is that they are feelings, they are not instructions. I can’t simple say to you, “Trust me,” and you will. I can’t simple instruct two people to cooperate, and they will. It’s not how it works. It’s a feeling. So where does that feeling come from? \n\nIf you go back 50,000 years to the Paleolithic era, to the early days of Homo sapiens, what we find is that the world was filled with danger, all of there forces working very, very hard to kill us. Nothing personal. Whether it was the weather, lack of resources, maybe a saber-toothed tiger, all of these thing working to reduce our lifespan. And so we evolved into social animals, where we lived together and worked together in what I call a circle of safety, inside the tribe, where we felt like we belonged. And when we felt safe amongst our own, the natural reaction was trust and cooperation. There are inherent benefits to this. It means I can fall asleep at night and trust that someone from within my tribe will watch for danger. If we don’t trust each other, if I don’t trust you, that means you won’t watch for danger. Bad system of survival. The modern day is exactly the same thing. The world is filled with danger, things that are trying to frustrate our lives or reduce our success, reduce our opportunity for success. It could be the ups and downs in the economy, the uncertainty of the stock market. It could be a new technology that renders your business model obsolete overnight. Or it could be your competition that is sometimes trying to kill you. It’s sometimes trying to put you out of business, but at the very minimum is working hard to frustrate your growth and steal your business from you. We have no control over these forces. There are a constant, and they’re not going away. The only variable are the conditions inside the organization, and that’s where leadership matters, because it’s the leader that sets the tone. When a leader makes the choice to put the safety and lives of the people inside the organization first, to sacrifice their comforts and sacrifice the tangible results, so that the people remain and feel safe and feel like they belong, remarkable things happen. \n\nI was flying on a trip, and I was witness to an incident where a passenger attempted to board before their number was called, and I watched the gate agent, treat this man like he had broken the law, like a criminal. He was yelled at for attempting to board one group too soon. So I said something. I said, “Why do you have treat us like cattle? Why can’t you treat us like human beings?” And this is exactly what she said to me. She said, “Sir, if I don’t follow the rules, I could get in trouble or lose my job.” All she was telling me is that she doesn’t feel safe. All she was telling me is that she doesn’t trust her leaders. The reason we like flying Southwest Airlines is not because they necessarily hire better people. It’s they don’t fear their leaders. You see, if the conditions are wrong, we are forced to expand our own time and energy to protect ourselves from each other, and that inherently weakens the organization. When we feel safe inside the organization, we will naturally combine our talents and our strengths and work tirelessly to face the dangers outside and seize the opportunities. \n\nThe closest analogy I can give to what a great leader is, is like being a parent. If you think about what being a great parent is, what do you want? What makes a great parent? We want to give our child opportunities, education, discipline them when necessary, all so that they can grow up and achieve more than we could for ourselves. Great leaders want exactly the same thing. They want to provide provide people opportunity, education, discipline when necessary, build their self-confidence, give them the opportunity to try and fail, all so that they could achieve more than we could ever imagine for ourselves.\n\nCharlie Kim, who’s the CEO of a company called Next Jump in New York City, a tech company, he makes the point that if you had hard times in your family, would you ever consider laying off one of your children? We would never do it. Then why do we consider laying off people inside our organization? Charlie implemented a policy of lifetime employment. If you get a job at Next Jump, you cannot get fired for performance issues. In fact, if you have issues, they will coach you and they will give you support, just like we would with one of our children who happens to come home with a C fro school. It’s the complete opposite. This is the reason so many people have such a visceral hatred, anger, at some of these banking CEOs with their disproportionate salaries and bonus structures. It’s not the numbers. It’s that they have violated the very definition of leadership. They have violated this deep-seated social contract. We know that they allowed their people to be sacrificed so they could protect their own interests, or worse, they sacrificed their people to protect their own interests. This is what so offends us, not the numbers. Would anybody be offended if we gave a $150 million bonus to Gandhi? How about a $250 million bonus to Mother Teresa? Do we have an issue with that? None at all. Great leaders would never sacrifice the people to save the numbers. They would sooner sacrifice the numbers to save the people.\n\nBob Chapman, who runs a large manufacturing company in the Midwest called Barry-Wehmiller, in 2008 was hit very hard by the recession, and they lost 30 percent of their orders overnight. Now in a large manufacturing company, this is a big deal, and they could no longer afford their labor pool. They needed to save 10 million dollars, so like so many companies today, the board got together and discussed layoff. And Bob refused. You see, Bob doesn’t believe in head counts. Bob believes in heart counts, and it’s much more difficult to simply reduce the heart count. And so they came up with a furlough program. Every employee, from secretary to CEO, was required to take four weeks of unpaid vacation. They could take it any time they wanted, and they did not have to take it consecutively. But is was how Bob announced the program that mattered so much. He said, it’s better that we should all suffer a little than any of us should have to suffer a lot, and morale went up. They saved 20 million dollars, and most importantly, as would be expected, when the people feel safe and protected by the leadership in the organization, the natural reaction is to trust and cooperate. And quite spontaneously, nobody expected, people started trading with each other. Those who could afford it more would trade with those who could afford it less. People would take five weeks so that somebody else only had to take three. Leadership is a choice. It is not a rank. I know many people at the seniormost levels of organizations who are absolutely not leaders. They are authorities, and we do what they say because they have authority over us, but we would not follow them. And I know many people who are at the bottoms of organizations who have no authority and they are absolutely leaders, and this is because they have chosen to look after the person to left of them, and they have chosen to look after the person to the right of them. This is what a leader is.\n\nI heard a story of some Marines, who were out in theater, and as is the Marine custom, the officer ate last, and he let his men eat first, and when they were done, there was no food left for him. And when they went back out in the field, his men brought him some of their food so that he may eat, because that’s what happens. We call them leaders because they go first. We call them leaders because they take the risk before anybody else does. We call them leaders because they will choose to sacrifice so that their people may be safe and protected and so their people may gain, and when we do, the natural response is that our people will sacrifice for us. They will give us their blood and sweat and tears to see that their leaders’ vision comes to life, and when we ask them, “Why would you do that? Why would you give your blood and sweat and tears for that person?” They all say the same thing: “Because they would have done it for me.” And isn’t that the organization we would all like to work in? Thank you very much.\n","slug":"ted/why-good-leaders-make-you-feel-safe","published":1,"updated":"2019-12-26T09:17:17.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxdv001olkyx9677av3i","content":"<p><a href=\"https://www.ted.com/talks/simon_sinek_why_good_leaders_make_you_feel_safe?referrer=playlist-how_to_be_a_good_mentor\" target=\"_blank\" rel=\"noopener\">original address</a></p>\n<p>There’s a man by the name of Captain William Swenson, who recently was awarded the congressional Medal of Honor for his actions on September 8, 2009. On that day, a column of American and Afghan troops were making their way through a part of Afghanistan to help protect a group of government officials who would be meeting with come local village elders. The column came under ambush, and was surrounded on three sides, and amongst many other things, Captain Swenson was recognized for running into live fire to rescue the wounded and pull out the dead. One of the people he rescued was a sergeant, and he and a comrade were making their way to a medevac helicopter. And what was remarkable about this day is, by sheer coincidence, one of the medevac medics happened to have a GoPro camera on his helmet and captured the whole scene on camera. It shows Captain Swenson and his comrade bringing this wounded soldier who had received a gunshot to the neck. They put him in the helicopter, and then you see Captain Swenson bend over and give him a kiss before he turns around to rescue more. </p>\n<p>I saw this, and I thought to myself, where do people like that come from? What is that? That is some deep, deep, emotion, when you would want to do that. There’s a love there, and I want to know why is that I don’t have people that I work with like that? You know, in the military, they give medals to people who are willing to sacrifice themselves so that others may gain. In business, we give bonuses to people who are willing to sacrifice others so that we may gain. We have it backwards. Right? So I asked myself, where do people like this come from? And my initial conclusion was that they’re just better people. That’s why they’re attracted to the military. These better people are attracted to this concept of service. But that’s completely wrong. </p>\n<p>What I learned was that it’s the environment, and if you get the environment right, every single one of us has the capacity to do these remarkable things, and more importantly, others have that capacity too. I’ve had the great honor of getting to meet some of these, who we would call heroes, who have put themselves and put their lives at risk to save others, and I asked them, “Why would you do it? Why did you do it?” And they all say the same thing: “Because they would have done it for me.” It’s this deep sense of trust and cooperation. So trust and cooperation are really important here. The problem with concepts of trust and cooperation is that they are feelings, they are not instructions. I can’t simple say to you, “Trust me,” and you will. I can’t simple instruct two people to cooperate, and they will. It’s not how it works. It’s a feeling. So where does that feeling come from? </p>\n<p>If you go back 50,000 years to the Paleolithic era, to the early days of Homo sapiens, what we find is that the world was filled with danger, all of there forces working very, very hard to kill us. Nothing personal. Whether it was the weather, lack of resources, maybe a saber-toothed tiger, all of these thing working to reduce our lifespan. And so we evolved into social animals, where we lived together and worked together in what I call a circle of safety, inside the tribe, where we felt like we belonged. And when we felt safe amongst our own, the natural reaction was trust and cooperation. There are inherent benefits to this. It means I can fall asleep at night and trust that someone from within my tribe will watch for danger. If we don’t trust each other, if I don’t trust you, that means you won’t watch for danger. Bad system of survival. The modern day is exactly the same thing. The world is filled with danger, things that are trying to frustrate our lives or reduce our success, reduce our opportunity for success. It could be the ups and downs in the economy, the uncertainty of the stock market. It could be a new technology that renders your business model obsolete overnight. Or it could be your competition that is sometimes trying to kill you. It’s sometimes trying to put you out of business, but at the very minimum is working hard to frustrate your growth and steal your business from you. We have no control over these forces. There are a constant, and they’re not going away. The only variable are the conditions inside the organization, and that’s where leadership matters, because it’s the leader that sets the tone. When a leader makes the choice to put the safety and lives of the people inside the organization first, to sacrifice their comforts and sacrifice the tangible results, so that the people remain and feel safe and feel like they belong, remarkable things happen. </p>\n<p>I was flying on a trip, and I was witness to an incident where a passenger attempted to board before their number was called, and I watched the gate agent, treat this man like he had broken the law, like a criminal. He was yelled at for attempting to board one group too soon. So I said something. I said, “Why do you have treat us like cattle? Why can’t you treat us like human beings?” And this is exactly what she said to me. She said, “Sir, if I don’t follow the rules, I could get in trouble or lose my job.” All she was telling me is that she doesn’t feel safe. All she was telling me is that she doesn’t trust her leaders. The reason we like flying Southwest Airlines is not because they necessarily hire better people. It’s they don’t fear their leaders. You see, if the conditions are wrong, we are forced to expand our own time and energy to protect ourselves from each other, and that inherently weakens the organization. When we feel safe inside the organization, we will naturally combine our talents and our strengths and work tirelessly to face the dangers outside and seize the opportunities. </p>\n<p>The closest analogy I can give to what a great leader is, is like being a parent. If you think about what being a great parent is, what do you want? What makes a great parent? We want to give our child opportunities, education, discipline them when necessary, all so that they can grow up and achieve more than we could for ourselves. Great leaders want exactly the same thing. They want to provide provide people opportunity, education, discipline when necessary, build their self-confidence, give them the opportunity to try and fail, all so that they could achieve more than we could ever imagine for ourselves.</p>\n<p>Charlie Kim, who’s the CEO of a company called Next Jump in New York City, a tech company, he makes the point that if you had hard times in your family, would you ever consider laying off one of your children? We would never do it. Then why do we consider laying off people inside our organization? Charlie implemented a policy of lifetime employment. If you get a job at Next Jump, you cannot get fired for performance issues. In fact, if you have issues, they will coach you and they will give you support, just like we would with one of our children who happens to come home with a C fro school. It’s the complete opposite. This is the reason so many people have such a visceral hatred, anger, at some of these banking CEOs with their disproportionate salaries and bonus structures. It’s not the numbers. It’s that they have violated the very definition of leadership. They have violated this deep-seated social contract. We know that they allowed their people to be sacrificed so they could protect their own interests, or worse, they sacrificed their people to protect their own interests. This is what so offends us, not the numbers. Would anybody be offended if we gave a $150 million bonus to Gandhi? How about a $250 million bonus to Mother Teresa? Do we have an issue with that? None at all. Great leaders would never sacrifice the people to save the numbers. They would sooner sacrifice the numbers to save the people.</p>\n<p>Bob Chapman, who runs a large manufacturing company in the Midwest called Barry-Wehmiller, in 2008 was hit very hard by the recession, and they lost 30 percent of their orders overnight. Now in a large manufacturing company, this is a big deal, and they could no longer afford their labor pool. They needed to save 10 million dollars, so like so many companies today, the board got together and discussed layoff. And Bob refused. You see, Bob doesn’t believe in head counts. Bob believes in heart counts, and it’s much more difficult to simply reduce the heart count. And so they came up with a furlough program. Every employee, from secretary to CEO, was required to take four weeks of unpaid vacation. They could take it any time they wanted, and they did not have to take it consecutively. But is was how Bob announced the program that mattered so much. He said, it’s better that we should all suffer a little than any of us should have to suffer a lot, and morale went up. They saved 20 million dollars, and most importantly, as would be expected, when the people feel safe and protected by the leadership in the organization, the natural reaction is to trust and cooperate. And quite spontaneously, nobody expected, people started trading with each other. Those who could afford it more would trade with those who could afford it less. People would take five weeks so that somebody else only had to take three. Leadership is a choice. It is not a rank. I know many people at the seniormost levels of organizations who are absolutely not leaders. They are authorities, and we do what they say because they have authority over us, but we would not follow them. And I know many people who are at the bottoms of organizations who have no authority and they are absolutely leaders, and this is because they have chosen to look after the person to left of them, and they have chosen to look after the person to the right of them. This is what a leader is.</p>\n<p>I heard a story of some Marines, who were out in theater, and as is the Marine custom, the officer ate last, and he let his men eat first, and when they were done, there was no food left for him. And when they went back out in the field, his men brought him some of their food so that he may eat, because that’s what happens. We call them leaders because they go first. We call them leaders because they take the risk before anybody else does. We call them leaders because they will choose to sacrifice so that their people may be safe and protected and so their people may gain, and when we do, the natural response is that our people will sacrifice for us. They will give us their blood and sweat and tears to see that their leaders’ vision comes to life, and when we ask them, “Why would you do that? Why would you give your blood and sweat and tears for that person?” They all say the same thing: “Because they would have done it for me.” And isn’t that the organization we would all like to work in? Thank you very much.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.ted.com/talks/simon_sinek_why_good_leaders_make_you_feel_safe?referrer=playlist-how_to_be_a_good_mentor\" target=\"_blank\" rel=\"noopener\">original address</a></p>\n<p>There’s a man by the name of Captain William Swenson, who recently was awarded the congressional Medal of Honor for his actions on September 8, 2009. On that day, a column of American and Afghan troops were making their way through a part of Afghanistan to help protect a group of government officials who would be meeting with come local village elders. The column came under ambush, and was surrounded on three sides, and amongst many other things, Captain Swenson was recognized for running into live fire to rescue the wounded and pull out the dead. One of the people he rescued was a sergeant, and he and a comrade were making their way to a medevac helicopter. And what was remarkable about this day is, by sheer coincidence, one of the medevac medics happened to have a GoPro camera on his helmet and captured the whole scene on camera. It shows Captain Swenson and his comrade bringing this wounded soldier who had received a gunshot to the neck. They put him in the helicopter, and then you see Captain Swenson bend over and give him a kiss before he turns around to rescue more. </p>\n<p>I saw this, and I thought to myself, where do people like that come from? What is that? That is some deep, deep, emotion, when you would want to do that. There’s a love there, and I want to know why is that I don’t have people that I work with like that? You know, in the military, they give medals to people who are willing to sacrifice themselves so that others may gain. In business, we give bonuses to people who are willing to sacrifice others so that we may gain. We have it backwards. Right? So I asked myself, where do people like this come from? And my initial conclusion was that they’re just better people. That’s why they’re attracted to the military. These better people are attracted to this concept of service. But that’s completely wrong. </p>\n<p>What I learned was that it’s the environment, and if you get the environment right, every single one of us has the capacity to do these remarkable things, and more importantly, others have that capacity too. I’ve had the great honor of getting to meet some of these, who we would call heroes, who have put themselves and put their lives at risk to save others, and I asked them, “Why would you do it? Why did you do it?” And they all say the same thing: “Because they would have done it for me.” It’s this deep sense of trust and cooperation. So trust and cooperation are really important here. The problem with concepts of trust and cooperation is that they are feelings, they are not instructions. I can’t simple say to you, “Trust me,” and you will. I can’t simple instruct two people to cooperate, and they will. It’s not how it works. It’s a feeling. So where does that feeling come from? </p>\n<p>If you go back 50,000 years to the Paleolithic era, to the early days of Homo sapiens, what we find is that the world was filled with danger, all of there forces working very, very hard to kill us. Nothing personal. Whether it was the weather, lack of resources, maybe a saber-toothed tiger, all of these thing working to reduce our lifespan. And so we evolved into social animals, where we lived together and worked together in what I call a circle of safety, inside the tribe, where we felt like we belonged. And when we felt safe amongst our own, the natural reaction was trust and cooperation. There are inherent benefits to this. It means I can fall asleep at night and trust that someone from within my tribe will watch for danger. If we don’t trust each other, if I don’t trust you, that means you won’t watch for danger. Bad system of survival. The modern day is exactly the same thing. The world is filled with danger, things that are trying to frustrate our lives or reduce our success, reduce our opportunity for success. It could be the ups and downs in the economy, the uncertainty of the stock market. It could be a new technology that renders your business model obsolete overnight. Or it could be your competition that is sometimes trying to kill you. It’s sometimes trying to put you out of business, but at the very minimum is working hard to frustrate your growth and steal your business from you. We have no control over these forces. There are a constant, and they’re not going away. The only variable are the conditions inside the organization, and that’s where leadership matters, because it’s the leader that sets the tone. When a leader makes the choice to put the safety and lives of the people inside the organization first, to sacrifice their comforts and sacrifice the tangible results, so that the people remain and feel safe and feel like they belong, remarkable things happen. </p>\n<p>I was flying on a trip, and I was witness to an incident where a passenger attempted to board before their number was called, and I watched the gate agent, treat this man like he had broken the law, like a criminal. He was yelled at for attempting to board one group too soon. So I said something. I said, “Why do you have treat us like cattle? Why can’t you treat us like human beings?” And this is exactly what she said to me. She said, “Sir, if I don’t follow the rules, I could get in trouble or lose my job.” All she was telling me is that she doesn’t feel safe. All she was telling me is that she doesn’t trust her leaders. The reason we like flying Southwest Airlines is not because they necessarily hire better people. It’s they don’t fear their leaders. You see, if the conditions are wrong, we are forced to expand our own time and energy to protect ourselves from each other, and that inherently weakens the organization. When we feel safe inside the organization, we will naturally combine our talents and our strengths and work tirelessly to face the dangers outside and seize the opportunities. </p>\n<p>The closest analogy I can give to what a great leader is, is like being a parent. If you think about what being a great parent is, what do you want? What makes a great parent? We want to give our child opportunities, education, discipline them when necessary, all so that they can grow up and achieve more than we could for ourselves. Great leaders want exactly the same thing. They want to provide provide people opportunity, education, discipline when necessary, build their self-confidence, give them the opportunity to try and fail, all so that they could achieve more than we could ever imagine for ourselves.</p>\n<p>Charlie Kim, who’s the CEO of a company called Next Jump in New York City, a tech company, he makes the point that if you had hard times in your family, would you ever consider laying off one of your children? We would never do it. Then why do we consider laying off people inside our organization? Charlie implemented a policy of lifetime employment. If you get a job at Next Jump, you cannot get fired for performance issues. In fact, if you have issues, they will coach you and they will give you support, just like we would with one of our children who happens to come home with a C fro school. It’s the complete opposite. This is the reason so many people have such a visceral hatred, anger, at some of these banking CEOs with their disproportionate salaries and bonus structures. It’s not the numbers. It’s that they have violated the very definition of leadership. They have violated this deep-seated social contract. We know that they allowed their people to be sacrificed so they could protect their own interests, or worse, they sacrificed their people to protect their own interests. This is what so offends us, not the numbers. Would anybody be offended if we gave a $150 million bonus to Gandhi? How about a $250 million bonus to Mother Teresa? Do we have an issue with that? None at all. Great leaders would never sacrifice the people to save the numbers. They would sooner sacrifice the numbers to save the people.</p>\n<p>Bob Chapman, who runs a large manufacturing company in the Midwest called Barry-Wehmiller, in 2008 was hit very hard by the recession, and they lost 30 percent of their orders overnight. Now in a large manufacturing company, this is a big deal, and they could no longer afford their labor pool. They needed to save 10 million dollars, so like so many companies today, the board got together and discussed layoff. And Bob refused. You see, Bob doesn’t believe in head counts. Bob believes in heart counts, and it’s much more difficult to simply reduce the heart count. And so they came up with a furlough program. Every employee, from secretary to CEO, was required to take four weeks of unpaid vacation. They could take it any time they wanted, and they did not have to take it consecutively. But is was how Bob announced the program that mattered so much. He said, it’s better that we should all suffer a little than any of us should have to suffer a lot, and morale went up. They saved 20 million dollars, and most importantly, as would be expected, when the people feel safe and protected by the leadership in the organization, the natural reaction is to trust and cooperate. And quite spontaneously, nobody expected, people started trading with each other. Those who could afford it more would trade with those who could afford it less. People would take five weeks so that somebody else only had to take three. Leadership is a choice. It is not a rank. I know many people at the seniormost levels of organizations who are absolutely not leaders. They are authorities, and we do what they say because they have authority over us, but we would not follow them. And I know many people who are at the bottoms of organizations who have no authority and they are absolutely leaders, and this is because they have chosen to look after the person to left of them, and they have chosen to look after the person to the right of them. This is what a leader is.</p>\n<p>I heard a story of some Marines, who were out in theater, and as is the Marine custom, the officer ate last, and he let his men eat first, and when they were done, there was no food left for him. And when they went back out in the field, his men brought him some of their food so that he may eat, because that’s what happens. We call them leaders because they go first. We call them leaders because they take the risk before anybody else does. We call them leaders because they will choose to sacrifice so that their people may be safe and protected and so their people may gain, and when we do, the natural response is that our people will sacrifice for us. They will give us their blood and sweat and tears to see that their leaders’ vision comes to life, and when we ask them, “Why would you do that? Why would you give your blood and sweat and tears for that person?” They all say the same thing: “Because they would have done it for me.” And isn’t that the organization we would all like to work in? Thank you very much.</p>\n"},{"title":"Kerberos","date":"2019-12-09T10:45:50.000Z","_content":"This is the classic dialogue to explain the principle of Kerberos.\n\n## Dramatis Personae\n__Athena__:     an up and coming system developer.\n__Euripides__:  a seasoned developer and resident crank.\n\n## Scene I\nA cubicle area. __Athena__ and __Euripides__ are working at neighboring terminals.\n\n__Athena__:\tHey Rip, this timesharing system is a drag. I can't get any work done because everyone else is logged in.\n__Euripides__:\tDon't complain to me. I only work here.\n__Athena__:\tYou know what we need? We need to give everyone their own workstation so they don't have to worry about sharing computer cycles. And we'll use a network to connect all the workstations so folks can communicate with one another.\n__Euripides__:\tFine. So what do we need, about a thousand workstations?\n__Athena__:\tMore or less.\n__Euripides__:\tHave you seen the size of a typical workstation's disk drive? There isn't enough room for all the software that you have on a timesharing machine.\n__Athena__:\tI figured that out already. We can keep copies of the system software on various server machines. When you login to a workstation, the workstation accesses the system software by making a network connection with one of the servers. This setup lets a whole bunch of workstations use the same copy of the system software, and it makes software updates convenient. You don't have to trundle around to each workstation. Just modify the system software servers.\n__Euripides__:\tAll right. What are you going to do about personal files? With a timesharing system I can login and get to my files from any terminal that is connected to the system. Will I be able to walk up to any workstation and automatically get to my files? Or do I have to make like a PC user and keep my files on diskette? I hope not.\n__Athena__:\tI think we can use other machines to provide personal file storage. You can login to any workstation and get to your files.\n__Euripides__:\tWhat about printing? Does every workstation have its own printer? Whose money are you spending anyway? And what about electronic mail? How are you going to distribute mail to all these workstations?\n__Athena__:\tAh . . . Well obviously we don't have the cash to give everyone a printer, but we could have machines dedicated to print service. You send a job to a print server, and it prints it for you. You could do sort of the same thing with mail. Have a machine dedicated to mail service. You want your mail, you contact the mail server and pick up your mail.\n__Euripides__:\tYour workstation system sounds really good Tina. When I get mine, you know what I'm going to do? I'm going to find out your username, and get my workstation to think that I am you. Then I'm going to contact the mail server and pick up your mail. I'm going to contact your file server and remove your files, and--\n__Athena__:\tCan you do that?\n__Euripides__:\tSure! How are these network servers going to know that I'm not you?\n__Athena__:\tGee, I don't know. I guess I need to do some thinking.\n__Euripides__:\tSounds like it. Let me know when you figure it out.\n\n## Scene II\n__Euripides__,' office, the next morning. Euripides sits at his desk, reading his mail. __Athena__, knocks on the door.\n__Athena__,:\tWell I've figured out how to secure an open network environment so that unscrupulous folks like you cannot use network services in other people's names.\n__Euripides__,:\tIs that so? Have a seat.\nShe does.\n__Athena__,:\tBefore I describe it, can I lay down one ground rule about this discussion?\n__Euripides__,:\tWhat's your rule?\n__Athena__,:\t\nWell suppose I say something like the following: \"I want my electronic mail, so I contact the mail server and ask it to send the mail to my workstation.\" In reality I'm not the entity that contacts the mail server. I'm using a program to contact the mail server and retrieve my mail, a program that is a CLIENT of the mail service program.\n\nBut I don't want to say \"the client does such-and-such\" every time I refer to a transaction between the user and a network server. I'd just as soon say \"I do such-and-such,\" keeping in mind of course that a client program is doing things on my behalf. Is that okay with you?\n\n__Euripides__,:\tSure. No problem.\n__Athena__,:\tGood. All right, I'll begin by stating the problem I have solved. In an open network environment, machines that provide services must be able to confirm the identities of people who request service. If I contact the mail server and ask for my mail, the service program must be able to verify that I am who I claim to be, right?\n__Euripides__,:\tRight.\n__Athena__,:\tYou could solve the problem clumsily by requiring the mail server to ask for a password before I could use it. I prove who I am to the server by giving it my password.\n__Euripides__,:\tThat's clumsy all right. In a system like that, every server has to know your password. If the network has one thousand users, each server has to know one thousand passwords. If you want to change your password, you have to contact all servers and notify them of the change. I take it your system isn't this stupid.\n__Athena__,:\tMy system isn't stupid. It works like this: Not only do people have passwords, services have passwords too. Each user knows her or his password, each service program knows its password, and there's an AUTHENTICATION SERVICE that knows ALL passwords--each user's password, and each service's password. The authentication service stores the passwords in a single, centralized database.\n__Euripides__,:\tDo you have a name for this authentication service?\n__Athena__,:\tI haven't thought of one yet. Do you have any ideas?\n__Euripides__,:\tWhat's the name of that fellow who ferries the dead across the River Styx?\n__Athena__,:\tCharon?\n__Euripides__,:\tYeah, that's him. He won't take you across the river unless you can prove your identity.\n__Athena__,:\tThere you go Rip, trying to rewrite Greek mythology again. Charon doesn't care about your identity. He just wants to make sure that you're dead.\n__Euripides__,:\tHave you got a better name?\nPause.\n__Athena__,:\tNo, not really.\n__Euripides__,:\tThen let's call the authentication service \"Charon.\"\n__Athena__,:\t\nOkay. I guess I should describe the system, huh?\n\nLet's say you want to use a service, the mail service. In my system you cannot use a service unless, ah, Charon tells the service that you are who you claim to be. And you can't get the okay to use a service unless you have authenticated yourself to Charon. When you request authentication from Charon, you have to tell Charon the service for which you want the okay. If you want to use the mail server, you've got to tell Charon.\n\nCharon asks you to prove your identity. You do so by providing your secret password. Charon takes your password and compares it to the one that is registered for you in the Charon database. If the two passwords match, Charon considers your identity proven.\n\nCharon now has to convince the mail server that you are who you say you are. Since Charon knows all service passwords, it knows the mail service's password. It's conceivable that Charon could give you the password, which you could forward to the mail service as proof that you have authenticated yourself to Charon.\n\nThe problem is, Charon cannot give you the password directly, because then you would know it. The next time you wanted mail, you could circumvent Charon and use the mail server without correctly identifying yourself. You could even pretend to be someone else, and use the mail server in that other person's name.\n\nSo instead of giving you the mail server's password, Charon gives you a mail service TICKET. This ticket contains a version of your username that has been ENCRYPTED USING the MAIL SERVER'S PASSWORD.\n\nTicket in hand, you can now ask the mail service for your mail. You make your request by telling the mail server who you are, and furnishing the ticket that proves you are who you say you are.\n\nThe server uses its password to decrypt the ticket, and if the ticket decrypts properly, the server ends up with the username that Charon placed in the ticket.\n\nThe service compares this name with the name you sent along with the ticket. If the names match, the mail server considers your identity proven and proceeds to give you your mail.\n\nWhat do you think of those apples?\n\n__Euripides__,:\tI've got some questions.\n__Athena__,:\tI figured. Well go ahead.\n__Euripides__,:\tWhen a service program decrypts a ticket, how does it know that it has decrypted the ticket properly?\n__Athena__,:\tI don't know.\n__Euripides__,:\tMaybe you should include the service's name in the ticket. That way when a service decrypts a ticket, it can gauge its success on whether or not it can find its name in the decrypted ticket.\n__Athena__,:\t\nThat sounds good to me. So the ticket looks something like this:\n\n(She scrawls the following on a pad of paper:)\n   TICKET -  {username:servicename}\n__Euripides__,:\tSo the service ticket contains just your username and the servicename?\n__Athena__,:\tEncrypted with the service's password.\n__Euripides__,:\tI don't think that's enough information to make the ticket secure.\n__Athena__,:\tWhat do you mean?\n__Euripides__,:\tLet's suppose you ask Charon for a mail server ticket. Charon prepares that ticket so that it has your username \"tina\" in it. Suppose I copy that ticket as it wizzes by on its way across the network from Charon to you. Suppose I convince my insecure workstation that my username is \"tina.\" The mail client program on my workstation thinks I am you. In your name, the program forwards the stolen ticket to the mail server. The server decrypts the ticket and sees that it is valid. The username in the ticket matches the name of the user who sent the ticket. The mail server gives me your mail . . .\n__Athena__,:\tOh! Well that's not so good.\n__Euripides__,:\t\nBut I think I know a way to fix this problem. Or to at least provide a partial fix to it. I think Charon should include more information in the service tickets it produces. In addition to the username, the ticket should also include the NETWORK ADDRESS from which the user asked Charon for the ticket. That gives you an additional level of security.\n\nI'll illustrate. Suppose I steal your mail ticket now. The ticket has your workstation's network address in it, and this address does not match my workstation's address. In your name I forward the purloined ticket to the mail server. The server program extracts the username and network address from the ticket and attempts to match that information against the username and network address of the entity that sent the ticket. The username matches, but the network address does not. The server rejects the ticket because obviously it was stolen.\n\n__Athena__,:\tBravo, bravo! I wish I had thought of that.\n__Euripides__,:\tWell that's what I'm around for.\n__Athena__,:\t\nSo the revised ticket design looks like this:\n\nShe scrawls the following on a chalkboard:\n\n  TICKET -   {username:ws_address:servicename}\n__Athena__,:\tNow I'm really excited. Let's build a Charon system and see if it works!\n__Euripides__,:\tNot so fast. I have some other questions about your system.\n__Athena__,:\tAll right. (Athena leans forward in her chair) Shoot.\n__Euripides__,:\tSounds like I've got to get a new ticket every time I want to use a service. If I'm putting in a full day's work, I'll probably want to get my mail more than once. Do I have to get a new ticket every time I want to get my mail? If that's true, I don't like your system.\n__Athena__,:\tAh . . . Well I don't see why tickets can't be reusable. If you get a ticket for the mail server, you ought to be able to use it again and again. For instance, when the mail client program makes a request for service in your name, it forwards a COPY of the ticket to the mail server.\n__Euripides__,:\tThat's better. But I still have problems. You seem to imply that I have to give Charon my password every time I want to use a service for which I don't have a ticket. I login and want to access my files. I fire off a request to Charon for the proper ticket and this means that I've had to use my password. Then I want to read my mail. Another request to Charon, I have to enter my password again. Now suppose I want to send one of my mail messages to the print server. Another Charon request and, well you get the picture.\n__Athena__,:\tUh, yeah, I do.\n__Euripides__,:\tAnd if that weren't bad enough, consider this: it sounds like when you authenticate yourself to Charon, you send your secret password over the network in cleartext. Clever people like yours truly can monitor the network and steal copies of people's passwords. If I've got your password, I can use any service in your name. __Athena__, sighs.\n__Athena__,:\tThese are serious problems. Guess I need to go back to the drawing board.\n\n## Scene III\nThe next morning, __Athena__, catches __Euripides__, at the coffee area. She taps him on the shoulder as he fills his cup.\nThe two head for the coffee machine.\n\n__Athena__,:\tI've got a new version of Charon that solves our problems.\n__Euripides__,:\tReally? That was quick.\n__Athena__,:\tWell, you know, problems of this nature keep me up all night.\n__Euripides__,:\tMust be your guilty conscience. Shall we repair to yon small conference room?\n__Athena__,:\tWhy not?\nThe two move to the small conference room.\n__Athena__,:\tI'll begin by stating the problems again, but I'll invert them so that they become requirements of the system.\n__Athena__, clears her throat.\n__Athena__,:\tThe first requirement: Users only have to enter their passwords once, at the beginning of their workstation sessions. This requirement implies that you shouldn't have to enter your password every time you need a new service ticket. The second requirement: passwords should not be sent over the network in clear text.\n__Euripides__,:\tOkay.\n__Athena__,:\t\nI'll start with the first requirement: you should only have to use your password once. I've met this requirement by inventing a new network service. It's called the \"ticket-granting\" service, a service that issues Charon tickets to users who have already proven their identity to Charon. You can use this ticket-granting service if you have a ticket for it, a ticket-granting ticket.\n\nThe ticket-granting service is really just a version of Charon in as much as it has access to the Charon database. It's a part of Charon that lets you authenticate yourself with a ticket instead of a password.\n\nAnyhow, the authentication system now works as follows: you login to a workstation and use a program called kinit to contact the Charon server. You prove your identity to Charon, and the kinit program gets you a ticket-granting ticket.\n\nNow say you want to get your mail from the mail server. You don't have a mail server ticket yet, so you use the \"ticket-granting\" ticket to get the mail server ticket for you. You don't have to use your password to get the new ticket.\n\n__Euripides__,:\tDo I have to get a new \"ticket-granting\" ticket every time I need to get to another network service?.\n__Athena__,:\tNo. Remember, we agreed last time that tickets can be reused. Once you have acquired a ticket-granting ticket, you don't need to get another. You use the ticket-granting ticket to get the other tickets you need.\n__Euripides__,:\tOkay, that makes sense. And since you can reuse tickets, once the ticket-granting service has given you a ticket for a particular service, you don't need to get that particular ticket again.\n__Athena__,:\tYeah, isn't that elegant?\n__Euripides__,:\tOkay, I buy it so far . . . As long as you didn't have to send your password in cleartext over the network when you got the ticket-granting ticket.\n__Athena__,:\t\nLike I said, I've solved that problem as well. The thing is, when I say you have to contact Charon to get the ticket-granting ticket, I make it sound as though you have to send your password in cleartext over the network to the Charon Server. But it doesn't have to be that way.\n\nHere's really what happens. When you use the kinit program to get the ticket-granting ticket, kinit doesn't send your password to the Charon server, kinit sends only your username.\n\n__Euripides__,:\tFine.\n__Athena__,:\t\nCharon uses the username to look up your password. Next Charon builds a packet of data that contains the ticket-granting ticket. Before it sends you the packet, Charon uses your password to encrypt the packet's contents.\n\nYour workstation receives the ticket packet. You enter your password. Kinit attempts to decrypt the ticket with the password you entered. If kinit succeeds, you have successfully authenticated yourself to Charon. You now possess a ticket-granting ticket, and that ticket can get you the other tickets you require.\n\nHow's that for some fancy thinking?\n\n__Euripides__,:\tI don't know . . . I'm trying to think myself. You know, I think the parts of the system that you just described work pretty well. Your system requires me to authenticate myself only once. Thereafter Charon can issue me service tickets without my being aware of it. Seamless, seamless in that regard. But there's something about the design of the service ticket that troubles me somehow. It has to do with the fact that tickets are reusable. Now I agree that they have to be reusable, but reusable tickets are, by their nature, very dangerous.\n__Athena__,:\tWhat do you mean?\n__Euripides__,:\t\nLook at it this way. Suppose you are using an insecure workstation. In the course of your login session you acquire a mail service ticket, a printing service ticket, and a file service ticket. Suppose you inadvertantly leave these tickets on the workstation when you logout.\n\nNow suppose I login to the workstation and find those tickets. I'm feeling like causing trouble, so I make the workstation think that I am you. Since the tickets are made out in your name, I can use the mail client program to access your mail, I can use the file service client to access and remove your files, and I can use the printing command to run up huge bills on your account. All because these tickets have been accidentally left lying around.\n\nAnd nothing can keep me from copying these tickets to a place of my own. I can continue to use them for all eternity.\n\n__Athena__,:\t\nBut that's an easy fix. We just write a program that destroys a user's tickets after each login session. You can't use tickets that have been destroyed.\n\n__Euripides__,:\t\nWell obviously your system must have a ticket-destroying program, but it's foolish to make users rely on such a thing. You can't count on users to remember to destroy their tickets every time they finish a workstation session. And even if you rely upon your users to destroy their tickets, consider the following scenario.\n\nI've got a program that watches the network and copies service tickets as they zip accross the network. Suppose I feel like victimizing you. I wait for you to begin a workstation session, I turn on my program and copy a bunch of your tickets.\n\nI wait for you to finish your session, and eventually you logout and leave. I fiddle with my workstation's network software and change its address so that it matches the address of the workstation you were using when you acquired the tickets I copied. I make my workstation believe that I am you. I have your tickets, your username, and the correct network address. I can REPLAY these tickets and use services in your name.\n\nIt doesn't matter that you destroyed your tickets before you ended your workstation session. The tickets I have stolen are valid for as long as I care to use them, because your current ticket design does not place a limit on the number of times you can reuse a ticket, or on how long a ticket remains valid.\n\n__Athena__,:\tOh I see what you're saying! Tickets can't be valid forever because they would then constitute a huge security risk. We have to restrict the length of time for which a ticket can be used, perhaps give each ticket some kind of expiration date.\n__Euripides__,:\tExactly. I think each ticket needs to have two additional pieces of information: a lifespan that indicates the length of time for which the ticket is valid, and a timestamp that indicates the date and time at which Charon issued the ticket. So a ticket would look something like this:\n__Euripides__, goes to the chalkboard and scrawls the following:\n\n   TICKET   {username:address:servicename:lifespan:timestamp}\n__Euripides__,:\tNow when a service decrypts tickets, it checks the ticket's username and address against the name and address of the person sending the ticket, and it uses the timestamp and lifespan information to see if the ticket has expired.\n__Athena__,:\tAll right. What kind of lifetime should the typical service ticket have?\n__Euripides__,:\tI don't know. Probably the length of a typical workstation session. Say eight hours.\n__Athena__,:\tSo if I sit at my workstation for more than eight hours, all my tickets expire. That includes my ticket-granting ticket. So I have to reauthenticate myself to Charon after eight hours.\n__Euripides__,:\tThat's not unreasonable is it?\n__Athena__,:\tI guess not. So we're settled -- tickets expire after eight hours. Now I've got a question for you. Suppose I have copied YOUR tickets from the network--\n__Euripides__,:\t(Eyes twinkling) Aw, Tina! You wouldn't really do that would you?\n__Athena__,:\t\nThis is just for the sake of argument. I've copied your tickets. Now I wait for you to logout. Suppose you have a doctor's appointment or a class to attend, so you end your workstation session after a couple of hours. You are a smart boots and have destroyed your copies of the tickets before logging out.\n\nBut I've stolen your tickets, and they are good for about six hours. That gives me ample time to pillage your files and print one thousand copies of whatever in your name.\n\nSee, the lifetime-timestamp business works fine in the event that a ticket thief chooses to replay the ticket after the ticket has expired. If the thief can replay the ticket before that . . .\n\n__Euripides__,:\tUh, well . . . Of course you are right.\n__Athena__,:\tI think we have run into a major problem. (She sighs.)\nPause.\n__Euripides__,:\tI guess that means you'll be busy tonight. Want more coffee?\n__Athena__,:\tWhy not.\n\n## Scene IV\nThe next morning in __Euripides__,' office. __Athena__, knocks on the door.\n\n__Euripides__,:\tYou've got rings under your eyes this morning.\n__Athena__,:\tWell, you know. Another one of those long nights.\n__Euripides__,:\tHave you solved the replay problem?\n__Athena__,:\tI think so.\n__Euripides__,:\tHave a seat.\nShe does.\n__Athena__,:\tAs usual, I feel compelled to restate the problem. Tickets are reusable within a limited timespan, say eight hours. If someone steals your tickets and chooses to replay them before they expire, we can't do anything to stop them.\n__Euripides__,:\tThat's the problem.\n__Athena__,:\tWe could beat the problem if we designed the tickets so they couldn't be reusable.\n__Euripides__,:\tBut then you would have to get a new ticket every time you wanted to use a network service.\n__Athena__,:\t\nRight. That is a clumsy solution at best. (Pause.) Ah, how do I proceed with my argument? (She ponders for a moment.)\n\nAll right, I'm going to restate the problem again, this time in the form of a requirement. A network service must be able to prove that the person using a ticket is the same person to whom that ticket was issued.\n\nLet me trace the authentication process again and see if I can tease out an appropriate way to illustrate my solution to this problem.\n\nI want to use a certain network service. I access that service by starting a client program on my workstation. The client sends three things to the service machine-- my name, my workstation's network address, and the appropriate service ticket.\n\nThe ticket contains the name of the person it was issued to and the address of the workstation that person was using when he or she acquired the ticket. It also contains an expiration date in the form of a lifespan and a timestamp. All this information has been encrypted in the service's Charon password.\n\nOur current authentication scheme relies on the following tests:\n\nCan the service decrypt the ticket?\nHas the ticket expired?\nDo the name and workstation address specified in the ticket match the name and address of the person who sent the ticket?\nWhat do these tests prove? The first test proves that the ticket either did or did not come from Charon. If the ticket cannot be decrypted, it did not come from the real Charon. The real Charon would have encrypted the ticket with the service's password. Charon and the service are the only two entities that know the service's password. If the ticket decrypts successfully, the service knows that it came from the real Charon. This test prevents folks from building fake Charon tickets.\n\nThe second test checks the ticket's lifespan and timestamp. If it has expired, the service rejects the ticket. This test stops people from using old tickets, tickets that perhaps were stolen.\n\nThe third test checks the ticket-user's name and address against the name and address of the person specified in the ticket. If the test fails, the ticket-user has obtained (perhaps surreptitiously) another person's ticket. The ticket is of course rejected.\n\nIf the names and addresses do match, what has the test proved? Nothing. Scallywags can steal tickets from the network, change their workstation addresses and usernames appropriately, and rifle other folks resources. As I pointed out yesterday, tickets can be replayed as long as they haven't expired. They can be replayed because a service cannot determine that the person sending the ticket is actually the ticket's legitimate owner.\n\nThe service cannot make this determination because it does not share a secret with the user. Look at it this way. If I'm on watch at Elsinore, you know, the castle in Hamlet, and you are supposed to relieve me, I'm not supposed to let you take my place unless you can provide the correct password. That's the case where the two of us share a secret. And it's probably a secret that someone else made up for everyone who stands on watch.\n\nSo I was thinking last night, why not have Charon make up a password for the legitimate ticket-owner to share with the service? Charon gives a copy of this session key to the service, and a copy to the user. When the service receives a ticket from a user, it can use the session key to test the user's identity.\n\n__Euripides__,:\tWait a second. How is Charon going to give both parties the session key?\n__Athena__,:\tThe ticket-owner gets the session key as part of the reply from Charon. Like this:\nShe scrawls the following on a chalkboard:\n\n CHARON REPLY  -  [sessionkey|ticket]\nThe service's copy of the session key comes inside the ticket, and the service gets the key when it decrypts the ticket. So the ticket looks like this:\n\n TICKET -  {sessionkey:username:address:servicename:lifespan:timestamp}\nWhen you want to get to a service, the client program you start builds what I call an AUTHENTICATOR. The authenticator contains your name and your workstation's address. The client encrypts this information with the session key, the copy of the session key you received when you requested the ticket.\n\n  AUTHENTICATOR - {username:address} encrypted with session key\nAfter building the authenticator, the client sends it and the ticket to the service. The service cannot decrypt the authenticator yet because it doesn't have the session key. That key is in the ticket, so the service first decrypts the ticket.\n\nAfter decrypting the ticket, the service ends up with the the following information:\n\nThe ticket's lifespan and timestamp;\nThe ticket-owner's name;\nThe ticket-owner's network address;\nThe session key.\nThe service checks to see if the ticket has expired. If all is well in that regard, the service next uses the session key to decrypt the authenticator. If the decryption proceeds without a hitch, the service ends up with a username and a network address. The service tests this information against the name and address found in the ticket, AND the name and address of the person who sent the ticket and authenticator. If everything matches, the service has determined that the ticket-sender is indeed the ticket's real owner.\n\n__Athena__, pauses, clears her throat, drinks some coffee.\n\nI think the session key-authenticator business takes care of the replay problem.\n\n__Euripides__,:\tMaybe. But I wonder . . . To break this version of the system, I must have the proper authenticator for the service.\n__Athena__,:\tNo. You must have the authenticator AND the ticket for the service. The authenticator is worthless without the ticket because the service cannot decrypt the authenticator without first having the appropriate session key, and the service cannnot get the appropriate session key without first decrypting the ticket.\n__Euripides__,:\tOkay, I understand that, but didn't you say that when a client program contacts the server, it sends the ticket and matching authenticator together?\n__Athena__,:\tYes, I guess I said that.\n__Euripides__,:\tIf that's what actually happens, what prevents me from stealing the ticket and authenticator at the same time? I'm sure I could write a program to do the job. If I've got the ticket and its authenticator, I believe I can use the two as long as the ticket has not expired. I just have to change my workstation address and username appropriately. True?\n__Athena__,:\t(Biting her lip) True. How dispiriting.\n__Euripides__,:\tWait, wait, wait! This isn't such a big deal. Tickets are reusable as long as they haven't expired, but that doesn't mean that authenticators have to be reusable. Suppose we design the system so that authenticators can only be used once. Does that buy us anything?\n__Athena__,:\t\nWell, it might. Let's see, the client program builds the authenticator, then sends it with the ticket to the service. You copy both ticket and authenticator as they move from my workstation to the server. But the ticket and authenticator arrive at the server before you can send your copies. If the authenticator can only be used once, your copy of it is no good, and you lose when you attempt to replay your ticket and authenticator.\n\nWell, that's a relief. So all we have to do is invent a way to make the authenticator a one-time usable thing.\n\n__Euripides__,:\t\nNo problem. Let's just put a lifespan and timestamp on them. Suppose each authenticator has a lifespan of a couple of minutes. When you want to use a service, your client program builds the authenticator, stamps it with the current time, then sends it and the ticket to the server.\n\nThe server receives the ticket and authenticator and goes about its business. When the server decrypts the authenticator, it checks the authenticator's lifespan and timestamp. If the authenticator hasn't expired, and everything else checks properly, the server considers you authenticated.\n\nSuppose I copied the athenticator and ticket as they crossed the network. I have to change my workstation's network address and my username, and I have to do this all in a couple of minutes. That's a pretty tall order. In fact I don't think it's possible. Unless . . .\n\nWell, here's a potential problem. Suppose that instead of copying the ticket and authenticator as they travel from your workstation to the server, I copy original ticket packet that comes from Charon, the packet you receive when you ask Charon to give you a ticket.\n\nThis packet, as I recall, has two copies of the session key in it: one for you and one for the service. The one for the service is hidden in the ticket and I can't get to it, but what about the other one, the one you use to build authenticators?\n\nIf I can get that copy of the session key, I can build my own authenticators, and if I can build my own authenticators, I can break the system.\n\n__Athena__,:\t\nThat's something I thought about last night, but then I traced the process of acquiring tickets and found that it wasn't possible to steal authenticators that way.\n\nYou sit down at a workstation and use the kinit program to get your ticket-granting ticket. Kinit asks for your username, and after you enter it, kinit forwards the name to Charon.\n\nCharon uses your name to look up your password, then proceeds to build a ticket-granting ticket for you. As part of this process, Charon creates a session key that you will share with the ticket-granting service. Charon puts a copy of the session key in the ticket-granting ticket, and puts your copy in the the ticket packet that you are about to receive. But before it sends you this packet, Charon encrypts the whole thing with your password.\n\nCharon sends the packet across the network. Someone can copy the packet as it goes by, but they can't do anything with it because it has been encrypted with your password. Specifically, no one can steal the ticket-granting session key.\n\nKinit receives the ticket packet and prompts you for a password, which you enter. If you enter the correct password, kinit can decrypt the packet and give you your copy of the session key.\n\nNow that you've taken care of the kinit business, you want to get your mail. You start the mail client program. This program looks for a mail service ticket and doesn't find one (after all, you haven't tried to get your mail yet). The client must use the ticket-granting ticket to ask the ticket-granting service for a mail service ticket.\n\nThe client builds an authenticator for the ticket-granting transaction and encrypts the authenticator with your copy of the ticket-granting session key. The client then sends Charon the authenticator, the ticket-granting ticket, your name, your workstation's address, and the name of the mail service.\n\nThe ticket-granting service receives this stuff and runs through the authentication checks. If everything checks properly, the ticket-granting service ends up with a copy of the session key that it shares with you. Now the ticket-granting service builds you a mail service ticket, and during this process, creates a new session key for you to share with the mail service.\n\nThe ticket-granting service now prepares a ticket packet to send back to your workstation. The packet contains the ticket and your copy of the mail service session key. But before it sends the packet, the ticket-granting service encrypts the packet with its copy of the TICKET-GRANTING session key. That done, the packet is sent on its way.\n\nSo here comes the mail service ticket packet, loping across the network. Suppose some network ogre copies it as it goes by. The ogre is out of luck because the packet is encrypted with the ticket-granting session key; you and the ticket-granting service are the only entities that know this key. Since the ogre cannot decrypt the mail ticket packet, the ogre cannot discover the MAIL SESSION KEY. Without this session key, the ogre cannot use any of the mail service tickets you might subsequently send across the network.\n\nSo I think we're safe. What do you think?\n\n__Euripides__,:\tPerhaps.\n__Athena__,:\tPerhaps! Is that all you can say!\n__Euripides__,:\t(laughing) Don't get upset. You should know my ways by now. I guess it is mean of me, and you up half the night.\n__Athena__,:\tPthhhhh!\n__Euripides__,:\tAll right, three-quarters of the night. Actually, the system is beginning to sound acceptible. This session key business solves a problem that I thought of last night: the problem of mutual authentication.\nPause.\nMind if I talk for a minute?\n__Athena__,:\t(A trifle coldly) Be my guest.\n__Euripides__,:\t\nYou are so kind. (__Euripides__, clears his throat.) Last night, while visions of session keys and authenticators danced in your head, I was trying to find new problems with the system, and I found one that I thought was pretty serious. I'll illustrate it by way of the following scenario.\n\nSuppose you are sick of your current job and have determined that it is in your best interest to move on. You want to print your resume on the company's wizz-bang laser printer so that headhunters and potential employers can take note of your classiness.\n\nSo you enter the printing command, and direct it to send the resume to the appropriate print server. The command gets the proper service ticket, if you don't already have it, then sends the ticket in your name to the appropriate print server. At least that's where you think it's headed. You don't in fact know that the request is headed for the right print server.\n\nSuppose that some unscrupulous hacker--say it's your boss--has screwed system around so that he redirects your request and its ticket to the print server in his office. His print service program doesn't care about the ticket or its contents. It throws away the ticket and sends a message to your workstation indicating that the ticket passed muster, and that the server is ready and willing to print your job. The printing command sends the job to the fraudulant print server and the enemy ends up with your resume.\n\nI'll state the problem by way of contrast. Without session keys and authenticators, Charon can protect its servers from false users, but it cannot protect its users from false servers. The system needs a way for client programs to authenticate the server before sending sensitive information to the service. The system must allow for mutual authentication.\n\nBut the session key solves this problem as long as you design your client programs properly. Back to the print server scenario. I want a print client program that makes sure the service it's sending jobs to is the legitimate service.\n\nHere's what such a program does. I enter the printing command and give it a filename, the name of my resume. Assume that I have a print service ticket and session key. The client program uses the session key to build an authenticator, then sends the authenticator and ticket to the \"supposed\" print server. The client DOES NOT send the resume yet; it waits for a response from the service.\n\nThe real service receives the ticket and authenticator, decrypts the ticket and extracts the session key, then uses the session key to decrypt the authenticator. This done, the service runs all the appropriate authentication tests.\n\nAssume the tests confirm my identity. Now the server prepares a reply packet so that it can prove its identity to the client program. It uses its copy of the session key to encrypt the reply packet, then sends the packet to the waiting client.\n\nThe client receives the packet and attempts to decrypt it with my copy of the session key. If the packet decrypts properly and yields the correct server response message, my client program knows that the server that encrypted the packet is the real server. Now the client sends the resume job to the print service.\n\nSuppose my boss screwed around the system so that his print server poses as the one I want. My client sends the authenticator and ticket to the \"print service\" and waits for a response. The fake print service cannot generate the correct response because it cannot decrypt the ticket and get the session key. My client will not send the job unless it receives the correct response. Eventually the client gives up waiting and exits. My print job does not get completed, but at least my resume did not end up on the desk of the enemy.\n\nYou know, I think we have a solid basis on which to implement the Charon Authentication System.\n\n__Athena__,:\tPerhaps. Anyway, I don't like the name \"Charon.\"\n__Euripides__,:\tYou don't? Since when?\n__Athena__,:\tI've never liked it, because the name doesn't make sense. I was talking to my Uncle Hades about it the other day, and he suggested another name, the name of his three-headed watch dog.\n__Euripides__,:\tOh, you mean \"Cerberus.\"\n__Athena__,:\tBite your tongue Rip! \"Cerberus\" indeed . . .\n__Euripides__,:\tEr, isn't that the name?\n__Athena__,:\tYeah, if you happen to be a Roman! I'm a Greek goddess, he's a Greek watch dog, and his name is \"Kerberos,\" \"Kerberos\" with a K.\n__Euripides__,:\tOkay, okay, don't throw thunderbolts. I'll buy the name. Actually, it has a nice ring to it. Adios Charon and hello to Kerberos.\n\n","source":"_posts/3a/kerberos.md","raw":"---\ntitle: Kerberos\ncategories: authentication\ndate: 2019-12-09 18:45:50\n---\nThis is the classic dialogue to explain the principle of Kerberos.\n\n## Dramatis Personae\n__Athena__:     an up and coming system developer.\n__Euripides__:  a seasoned developer and resident crank.\n\n## Scene I\nA cubicle area. __Athena__ and __Euripides__ are working at neighboring terminals.\n\n__Athena__:\tHey Rip, this timesharing system is a drag. I can't get any work done because everyone else is logged in.\n__Euripides__:\tDon't complain to me. I only work here.\n__Athena__:\tYou know what we need? We need to give everyone their own workstation so they don't have to worry about sharing computer cycles. And we'll use a network to connect all the workstations so folks can communicate with one another.\n__Euripides__:\tFine. So what do we need, about a thousand workstations?\n__Athena__:\tMore or less.\n__Euripides__:\tHave you seen the size of a typical workstation's disk drive? There isn't enough room for all the software that you have on a timesharing machine.\n__Athena__:\tI figured that out already. We can keep copies of the system software on various server machines. When you login to a workstation, the workstation accesses the system software by making a network connection with one of the servers. This setup lets a whole bunch of workstations use the same copy of the system software, and it makes software updates convenient. You don't have to trundle around to each workstation. Just modify the system software servers.\n__Euripides__:\tAll right. What are you going to do about personal files? With a timesharing system I can login and get to my files from any terminal that is connected to the system. Will I be able to walk up to any workstation and automatically get to my files? Or do I have to make like a PC user and keep my files on diskette? I hope not.\n__Athena__:\tI think we can use other machines to provide personal file storage. You can login to any workstation and get to your files.\n__Euripides__:\tWhat about printing? Does every workstation have its own printer? Whose money are you spending anyway? And what about electronic mail? How are you going to distribute mail to all these workstations?\n__Athena__:\tAh . . . Well obviously we don't have the cash to give everyone a printer, but we could have machines dedicated to print service. You send a job to a print server, and it prints it for you. You could do sort of the same thing with mail. Have a machine dedicated to mail service. You want your mail, you contact the mail server and pick up your mail.\n__Euripides__:\tYour workstation system sounds really good Tina. When I get mine, you know what I'm going to do? I'm going to find out your username, and get my workstation to think that I am you. Then I'm going to contact the mail server and pick up your mail. I'm going to contact your file server and remove your files, and--\n__Athena__:\tCan you do that?\n__Euripides__:\tSure! How are these network servers going to know that I'm not you?\n__Athena__:\tGee, I don't know. I guess I need to do some thinking.\n__Euripides__:\tSounds like it. Let me know when you figure it out.\n\n## Scene II\n__Euripides__,' office, the next morning. Euripides sits at his desk, reading his mail. __Athena__, knocks on the door.\n__Athena__,:\tWell I've figured out how to secure an open network environment so that unscrupulous folks like you cannot use network services in other people's names.\n__Euripides__,:\tIs that so? Have a seat.\nShe does.\n__Athena__,:\tBefore I describe it, can I lay down one ground rule about this discussion?\n__Euripides__,:\tWhat's your rule?\n__Athena__,:\t\nWell suppose I say something like the following: \"I want my electronic mail, so I contact the mail server and ask it to send the mail to my workstation.\" In reality I'm not the entity that contacts the mail server. I'm using a program to contact the mail server and retrieve my mail, a program that is a CLIENT of the mail service program.\n\nBut I don't want to say \"the client does such-and-such\" every time I refer to a transaction between the user and a network server. I'd just as soon say \"I do such-and-such,\" keeping in mind of course that a client program is doing things on my behalf. Is that okay with you?\n\n__Euripides__,:\tSure. No problem.\n__Athena__,:\tGood. All right, I'll begin by stating the problem I have solved. In an open network environment, machines that provide services must be able to confirm the identities of people who request service. If I contact the mail server and ask for my mail, the service program must be able to verify that I am who I claim to be, right?\n__Euripides__,:\tRight.\n__Athena__,:\tYou could solve the problem clumsily by requiring the mail server to ask for a password before I could use it. I prove who I am to the server by giving it my password.\n__Euripides__,:\tThat's clumsy all right. In a system like that, every server has to know your password. If the network has one thousand users, each server has to know one thousand passwords. If you want to change your password, you have to contact all servers and notify them of the change. I take it your system isn't this stupid.\n__Athena__,:\tMy system isn't stupid. It works like this: Not only do people have passwords, services have passwords too. Each user knows her or his password, each service program knows its password, and there's an AUTHENTICATION SERVICE that knows ALL passwords--each user's password, and each service's password. The authentication service stores the passwords in a single, centralized database.\n__Euripides__,:\tDo you have a name for this authentication service?\n__Athena__,:\tI haven't thought of one yet. Do you have any ideas?\n__Euripides__,:\tWhat's the name of that fellow who ferries the dead across the River Styx?\n__Athena__,:\tCharon?\n__Euripides__,:\tYeah, that's him. He won't take you across the river unless you can prove your identity.\n__Athena__,:\tThere you go Rip, trying to rewrite Greek mythology again. Charon doesn't care about your identity. He just wants to make sure that you're dead.\n__Euripides__,:\tHave you got a better name?\nPause.\n__Athena__,:\tNo, not really.\n__Euripides__,:\tThen let's call the authentication service \"Charon.\"\n__Athena__,:\t\nOkay. I guess I should describe the system, huh?\n\nLet's say you want to use a service, the mail service. In my system you cannot use a service unless, ah, Charon tells the service that you are who you claim to be. And you can't get the okay to use a service unless you have authenticated yourself to Charon. When you request authentication from Charon, you have to tell Charon the service for which you want the okay. If you want to use the mail server, you've got to tell Charon.\n\nCharon asks you to prove your identity. You do so by providing your secret password. Charon takes your password and compares it to the one that is registered for you in the Charon database. If the two passwords match, Charon considers your identity proven.\n\nCharon now has to convince the mail server that you are who you say you are. Since Charon knows all service passwords, it knows the mail service's password. It's conceivable that Charon could give you the password, which you could forward to the mail service as proof that you have authenticated yourself to Charon.\n\nThe problem is, Charon cannot give you the password directly, because then you would know it. The next time you wanted mail, you could circumvent Charon and use the mail server without correctly identifying yourself. You could even pretend to be someone else, and use the mail server in that other person's name.\n\nSo instead of giving you the mail server's password, Charon gives you a mail service TICKET. This ticket contains a version of your username that has been ENCRYPTED USING the MAIL SERVER'S PASSWORD.\n\nTicket in hand, you can now ask the mail service for your mail. You make your request by telling the mail server who you are, and furnishing the ticket that proves you are who you say you are.\n\nThe server uses its password to decrypt the ticket, and if the ticket decrypts properly, the server ends up with the username that Charon placed in the ticket.\n\nThe service compares this name with the name you sent along with the ticket. If the names match, the mail server considers your identity proven and proceeds to give you your mail.\n\nWhat do you think of those apples?\n\n__Euripides__,:\tI've got some questions.\n__Athena__,:\tI figured. Well go ahead.\n__Euripides__,:\tWhen a service program decrypts a ticket, how does it know that it has decrypted the ticket properly?\n__Athena__,:\tI don't know.\n__Euripides__,:\tMaybe you should include the service's name in the ticket. That way when a service decrypts a ticket, it can gauge its success on whether or not it can find its name in the decrypted ticket.\n__Athena__,:\t\nThat sounds good to me. So the ticket looks something like this:\n\n(She scrawls the following on a pad of paper:)\n   TICKET -  {username:servicename}\n__Euripides__,:\tSo the service ticket contains just your username and the servicename?\n__Athena__,:\tEncrypted with the service's password.\n__Euripides__,:\tI don't think that's enough information to make the ticket secure.\n__Athena__,:\tWhat do you mean?\n__Euripides__,:\tLet's suppose you ask Charon for a mail server ticket. Charon prepares that ticket so that it has your username \"tina\" in it. Suppose I copy that ticket as it wizzes by on its way across the network from Charon to you. Suppose I convince my insecure workstation that my username is \"tina.\" The mail client program on my workstation thinks I am you. In your name, the program forwards the stolen ticket to the mail server. The server decrypts the ticket and sees that it is valid. The username in the ticket matches the name of the user who sent the ticket. The mail server gives me your mail . . .\n__Athena__,:\tOh! Well that's not so good.\n__Euripides__,:\t\nBut I think I know a way to fix this problem. Or to at least provide a partial fix to it. I think Charon should include more information in the service tickets it produces. In addition to the username, the ticket should also include the NETWORK ADDRESS from which the user asked Charon for the ticket. That gives you an additional level of security.\n\nI'll illustrate. Suppose I steal your mail ticket now. The ticket has your workstation's network address in it, and this address does not match my workstation's address. In your name I forward the purloined ticket to the mail server. The server program extracts the username and network address from the ticket and attempts to match that information against the username and network address of the entity that sent the ticket. The username matches, but the network address does not. The server rejects the ticket because obviously it was stolen.\n\n__Athena__,:\tBravo, bravo! I wish I had thought of that.\n__Euripides__,:\tWell that's what I'm around for.\n__Athena__,:\t\nSo the revised ticket design looks like this:\n\nShe scrawls the following on a chalkboard:\n\n  TICKET -   {username:ws_address:servicename}\n__Athena__,:\tNow I'm really excited. Let's build a Charon system and see if it works!\n__Euripides__,:\tNot so fast. I have some other questions about your system.\n__Athena__,:\tAll right. (Athena leans forward in her chair) Shoot.\n__Euripides__,:\tSounds like I've got to get a new ticket every time I want to use a service. If I'm putting in a full day's work, I'll probably want to get my mail more than once. Do I have to get a new ticket every time I want to get my mail? If that's true, I don't like your system.\n__Athena__,:\tAh . . . Well I don't see why tickets can't be reusable. If you get a ticket for the mail server, you ought to be able to use it again and again. For instance, when the mail client program makes a request for service in your name, it forwards a COPY of the ticket to the mail server.\n__Euripides__,:\tThat's better. But I still have problems. You seem to imply that I have to give Charon my password every time I want to use a service for which I don't have a ticket. I login and want to access my files. I fire off a request to Charon for the proper ticket and this means that I've had to use my password. Then I want to read my mail. Another request to Charon, I have to enter my password again. Now suppose I want to send one of my mail messages to the print server. Another Charon request and, well you get the picture.\n__Athena__,:\tUh, yeah, I do.\n__Euripides__,:\tAnd if that weren't bad enough, consider this: it sounds like when you authenticate yourself to Charon, you send your secret password over the network in cleartext. Clever people like yours truly can monitor the network and steal copies of people's passwords. If I've got your password, I can use any service in your name. __Athena__, sighs.\n__Athena__,:\tThese are serious problems. Guess I need to go back to the drawing board.\n\n## Scene III\nThe next morning, __Athena__, catches __Euripides__, at the coffee area. She taps him on the shoulder as he fills his cup.\nThe two head for the coffee machine.\n\n__Athena__,:\tI've got a new version of Charon that solves our problems.\n__Euripides__,:\tReally? That was quick.\n__Athena__,:\tWell, you know, problems of this nature keep me up all night.\n__Euripides__,:\tMust be your guilty conscience. Shall we repair to yon small conference room?\n__Athena__,:\tWhy not?\nThe two move to the small conference room.\n__Athena__,:\tI'll begin by stating the problems again, but I'll invert them so that they become requirements of the system.\n__Athena__, clears her throat.\n__Athena__,:\tThe first requirement: Users only have to enter their passwords once, at the beginning of their workstation sessions. This requirement implies that you shouldn't have to enter your password every time you need a new service ticket. The second requirement: passwords should not be sent over the network in clear text.\n__Euripides__,:\tOkay.\n__Athena__,:\t\nI'll start with the first requirement: you should only have to use your password once. I've met this requirement by inventing a new network service. It's called the \"ticket-granting\" service, a service that issues Charon tickets to users who have already proven their identity to Charon. You can use this ticket-granting service if you have a ticket for it, a ticket-granting ticket.\n\nThe ticket-granting service is really just a version of Charon in as much as it has access to the Charon database. It's a part of Charon that lets you authenticate yourself with a ticket instead of a password.\n\nAnyhow, the authentication system now works as follows: you login to a workstation and use a program called kinit to contact the Charon server. You prove your identity to Charon, and the kinit program gets you a ticket-granting ticket.\n\nNow say you want to get your mail from the mail server. You don't have a mail server ticket yet, so you use the \"ticket-granting\" ticket to get the mail server ticket for you. You don't have to use your password to get the new ticket.\n\n__Euripides__,:\tDo I have to get a new \"ticket-granting\" ticket every time I need to get to another network service?.\n__Athena__,:\tNo. Remember, we agreed last time that tickets can be reused. Once you have acquired a ticket-granting ticket, you don't need to get another. You use the ticket-granting ticket to get the other tickets you need.\n__Euripides__,:\tOkay, that makes sense. And since you can reuse tickets, once the ticket-granting service has given you a ticket for a particular service, you don't need to get that particular ticket again.\n__Athena__,:\tYeah, isn't that elegant?\n__Euripides__,:\tOkay, I buy it so far . . . As long as you didn't have to send your password in cleartext over the network when you got the ticket-granting ticket.\n__Athena__,:\t\nLike I said, I've solved that problem as well. The thing is, when I say you have to contact Charon to get the ticket-granting ticket, I make it sound as though you have to send your password in cleartext over the network to the Charon Server. But it doesn't have to be that way.\n\nHere's really what happens. When you use the kinit program to get the ticket-granting ticket, kinit doesn't send your password to the Charon server, kinit sends only your username.\n\n__Euripides__,:\tFine.\n__Athena__,:\t\nCharon uses the username to look up your password. Next Charon builds a packet of data that contains the ticket-granting ticket. Before it sends you the packet, Charon uses your password to encrypt the packet's contents.\n\nYour workstation receives the ticket packet. You enter your password. Kinit attempts to decrypt the ticket with the password you entered. If kinit succeeds, you have successfully authenticated yourself to Charon. You now possess a ticket-granting ticket, and that ticket can get you the other tickets you require.\n\nHow's that for some fancy thinking?\n\n__Euripides__,:\tI don't know . . . I'm trying to think myself. You know, I think the parts of the system that you just described work pretty well. Your system requires me to authenticate myself only once. Thereafter Charon can issue me service tickets without my being aware of it. Seamless, seamless in that regard. But there's something about the design of the service ticket that troubles me somehow. It has to do with the fact that tickets are reusable. Now I agree that they have to be reusable, but reusable tickets are, by their nature, very dangerous.\n__Athena__,:\tWhat do you mean?\n__Euripides__,:\t\nLook at it this way. Suppose you are using an insecure workstation. In the course of your login session you acquire a mail service ticket, a printing service ticket, and a file service ticket. Suppose you inadvertantly leave these tickets on the workstation when you logout.\n\nNow suppose I login to the workstation and find those tickets. I'm feeling like causing trouble, so I make the workstation think that I am you. Since the tickets are made out in your name, I can use the mail client program to access your mail, I can use the file service client to access and remove your files, and I can use the printing command to run up huge bills on your account. All because these tickets have been accidentally left lying around.\n\nAnd nothing can keep me from copying these tickets to a place of my own. I can continue to use them for all eternity.\n\n__Athena__,:\t\nBut that's an easy fix. We just write a program that destroys a user's tickets after each login session. You can't use tickets that have been destroyed.\n\n__Euripides__,:\t\nWell obviously your system must have a ticket-destroying program, but it's foolish to make users rely on such a thing. You can't count on users to remember to destroy their tickets every time they finish a workstation session. And even if you rely upon your users to destroy their tickets, consider the following scenario.\n\nI've got a program that watches the network and copies service tickets as they zip accross the network. Suppose I feel like victimizing you. I wait for you to begin a workstation session, I turn on my program and copy a bunch of your tickets.\n\nI wait for you to finish your session, and eventually you logout and leave. I fiddle with my workstation's network software and change its address so that it matches the address of the workstation you were using when you acquired the tickets I copied. I make my workstation believe that I am you. I have your tickets, your username, and the correct network address. I can REPLAY these tickets and use services in your name.\n\nIt doesn't matter that you destroyed your tickets before you ended your workstation session. The tickets I have stolen are valid for as long as I care to use them, because your current ticket design does not place a limit on the number of times you can reuse a ticket, or on how long a ticket remains valid.\n\n__Athena__,:\tOh I see what you're saying! Tickets can't be valid forever because they would then constitute a huge security risk. We have to restrict the length of time for which a ticket can be used, perhaps give each ticket some kind of expiration date.\n__Euripides__,:\tExactly. I think each ticket needs to have two additional pieces of information: a lifespan that indicates the length of time for which the ticket is valid, and a timestamp that indicates the date and time at which Charon issued the ticket. So a ticket would look something like this:\n__Euripides__, goes to the chalkboard and scrawls the following:\n\n   TICKET   {username:address:servicename:lifespan:timestamp}\n__Euripides__,:\tNow when a service decrypts tickets, it checks the ticket's username and address against the name and address of the person sending the ticket, and it uses the timestamp and lifespan information to see if the ticket has expired.\n__Athena__,:\tAll right. What kind of lifetime should the typical service ticket have?\n__Euripides__,:\tI don't know. Probably the length of a typical workstation session. Say eight hours.\n__Athena__,:\tSo if I sit at my workstation for more than eight hours, all my tickets expire. That includes my ticket-granting ticket. So I have to reauthenticate myself to Charon after eight hours.\n__Euripides__,:\tThat's not unreasonable is it?\n__Athena__,:\tI guess not. So we're settled -- tickets expire after eight hours. Now I've got a question for you. Suppose I have copied YOUR tickets from the network--\n__Euripides__,:\t(Eyes twinkling) Aw, Tina! You wouldn't really do that would you?\n__Athena__,:\t\nThis is just for the sake of argument. I've copied your tickets. Now I wait for you to logout. Suppose you have a doctor's appointment or a class to attend, so you end your workstation session after a couple of hours. You are a smart boots and have destroyed your copies of the tickets before logging out.\n\nBut I've stolen your tickets, and they are good for about six hours. That gives me ample time to pillage your files and print one thousand copies of whatever in your name.\n\nSee, the lifetime-timestamp business works fine in the event that a ticket thief chooses to replay the ticket after the ticket has expired. If the thief can replay the ticket before that . . .\n\n__Euripides__,:\tUh, well . . . Of course you are right.\n__Athena__,:\tI think we have run into a major problem. (She sighs.)\nPause.\n__Euripides__,:\tI guess that means you'll be busy tonight. Want more coffee?\n__Athena__,:\tWhy not.\n\n## Scene IV\nThe next morning in __Euripides__,' office. __Athena__, knocks on the door.\n\n__Euripides__,:\tYou've got rings under your eyes this morning.\n__Athena__,:\tWell, you know. Another one of those long nights.\n__Euripides__,:\tHave you solved the replay problem?\n__Athena__,:\tI think so.\n__Euripides__,:\tHave a seat.\nShe does.\n__Athena__,:\tAs usual, I feel compelled to restate the problem. Tickets are reusable within a limited timespan, say eight hours. If someone steals your tickets and chooses to replay them before they expire, we can't do anything to stop them.\n__Euripides__,:\tThat's the problem.\n__Athena__,:\tWe could beat the problem if we designed the tickets so they couldn't be reusable.\n__Euripides__,:\tBut then you would have to get a new ticket every time you wanted to use a network service.\n__Athena__,:\t\nRight. That is a clumsy solution at best. (Pause.) Ah, how do I proceed with my argument? (She ponders for a moment.)\n\nAll right, I'm going to restate the problem again, this time in the form of a requirement. A network service must be able to prove that the person using a ticket is the same person to whom that ticket was issued.\n\nLet me trace the authentication process again and see if I can tease out an appropriate way to illustrate my solution to this problem.\n\nI want to use a certain network service. I access that service by starting a client program on my workstation. The client sends three things to the service machine-- my name, my workstation's network address, and the appropriate service ticket.\n\nThe ticket contains the name of the person it was issued to and the address of the workstation that person was using when he or she acquired the ticket. It also contains an expiration date in the form of a lifespan and a timestamp. All this information has been encrypted in the service's Charon password.\n\nOur current authentication scheme relies on the following tests:\n\nCan the service decrypt the ticket?\nHas the ticket expired?\nDo the name and workstation address specified in the ticket match the name and address of the person who sent the ticket?\nWhat do these tests prove? The first test proves that the ticket either did or did not come from Charon. If the ticket cannot be decrypted, it did not come from the real Charon. The real Charon would have encrypted the ticket with the service's password. Charon and the service are the only two entities that know the service's password. If the ticket decrypts successfully, the service knows that it came from the real Charon. This test prevents folks from building fake Charon tickets.\n\nThe second test checks the ticket's lifespan and timestamp. If it has expired, the service rejects the ticket. This test stops people from using old tickets, tickets that perhaps were stolen.\n\nThe third test checks the ticket-user's name and address against the name and address of the person specified in the ticket. If the test fails, the ticket-user has obtained (perhaps surreptitiously) another person's ticket. The ticket is of course rejected.\n\nIf the names and addresses do match, what has the test proved? Nothing. Scallywags can steal tickets from the network, change their workstation addresses and usernames appropriately, and rifle other folks resources. As I pointed out yesterday, tickets can be replayed as long as they haven't expired. They can be replayed because a service cannot determine that the person sending the ticket is actually the ticket's legitimate owner.\n\nThe service cannot make this determination because it does not share a secret with the user. Look at it this way. If I'm on watch at Elsinore, you know, the castle in Hamlet, and you are supposed to relieve me, I'm not supposed to let you take my place unless you can provide the correct password. That's the case where the two of us share a secret. And it's probably a secret that someone else made up for everyone who stands on watch.\n\nSo I was thinking last night, why not have Charon make up a password for the legitimate ticket-owner to share with the service? Charon gives a copy of this session key to the service, and a copy to the user. When the service receives a ticket from a user, it can use the session key to test the user's identity.\n\n__Euripides__,:\tWait a second. How is Charon going to give both parties the session key?\n__Athena__,:\tThe ticket-owner gets the session key as part of the reply from Charon. Like this:\nShe scrawls the following on a chalkboard:\n\n CHARON REPLY  -  [sessionkey|ticket]\nThe service's copy of the session key comes inside the ticket, and the service gets the key when it decrypts the ticket. So the ticket looks like this:\n\n TICKET -  {sessionkey:username:address:servicename:lifespan:timestamp}\nWhen you want to get to a service, the client program you start builds what I call an AUTHENTICATOR. The authenticator contains your name and your workstation's address. The client encrypts this information with the session key, the copy of the session key you received when you requested the ticket.\n\n  AUTHENTICATOR - {username:address} encrypted with session key\nAfter building the authenticator, the client sends it and the ticket to the service. The service cannot decrypt the authenticator yet because it doesn't have the session key. That key is in the ticket, so the service first decrypts the ticket.\n\nAfter decrypting the ticket, the service ends up with the the following information:\n\nThe ticket's lifespan and timestamp;\nThe ticket-owner's name;\nThe ticket-owner's network address;\nThe session key.\nThe service checks to see if the ticket has expired. If all is well in that regard, the service next uses the session key to decrypt the authenticator. If the decryption proceeds without a hitch, the service ends up with a username and a network address. The service tests this information against the name and address found in the ticket, AND the name and address of the person who sent the ticket and authenticator. If everything matches, the service has determined that the ticket-sender is indeed the ticket's real owner.\n\n__Athena__, pauses, clears her throat, drinks some coffee.\n\nI think the session key-authenticator business takes care of the replay problem.\n\n__Euripides__,:\tMaybe. But I wonder . . . To break this version of the system, I must have the proper authenticator for the service.\n__Athena__,:\tNo. You must have the authenticator AND the ticket for the service. The authenticator is worthless without the ticket because the service cannot decrypt the authenticator without first having the appropriate session key, and the service cannnot get the appropriate session key without first decrypting the ticket.\n__Euripides__,:\tOkay, I understand that, but didn't you say that when a client program contacts the server, it sends the ticket and matching authenticator together?\n__Athena__,:\tYes, I guess I said that.\n__Euripides__,:\tIf that's what actually happens, what prevents me from stealing the ticket and authenticator at the same time? I'm sure I could write a program to do the job. If I've got the ticket and its authenticator, I believe I can use the two as long as the ticket has not expired. I just have to change my workstation address and username appropriately. True?\n__Athena__,:\t(Biting her lip) True. How dispiriting.\n__Euripides__,:\tWait, wait, wait! This isn't such a big deal. Tickets are reusable as long as they haven't expired, but that doesn't mean that authenticators have to be reusable. Suppose we design the system so that authenticators can only be used once. Does that buy us anything?\n__Athena__,:\t\nWell, it might. Let's see, the client program builds the authenticator, then sends it with the ticket to the service. You copy both ticket and authenticator as they move from my workstation to the server. But the ticket and authenticator arrive at the server before you can send your copies. If the authenticator can only be used once, your copy of it is no good, and you lose when you attempt to replay your ticket and authenticator.\n\nWell, that's a relief. So all we have to do is invent a way to make the authenticator a one-time usable thing.\n\n__Euripides__,:\t\nNo problem. Let's just put a lifespan and timestamp on them. Suppose each authenticator has a lifespan of a couple of minutes. When you want to use a service, your client program builds the authenticator, stamps it with the current time, then sends it and the ticket to the server.\n\nThe server receives the ticket and authenticator and goes about its business. When the server decrypts the authenticator, it checks the authenticator's lifespan and timestamp. If the authenticator hasn't expired, and everything else checks properly, the server considers you authenticated.\n\nSuppose I copied the athenticator and ticket as they crossed the network. I have to change my workstation's network address and my username, and I have to do this all in a couple of minutes. That's a pretty tall order. In fact I don't think it's possible. Unless . . .\n\nWell, here's a potential problem. Suppose that instead of copying the ticket and authenticator as they travel from your workstation to the server, I copy original ticket packet that comes from Charon, the packet you receive when you ask Charon to give you a ticket.\n\nThis packet, as I recall, has two copies of the session key in it: one for you and one for the service. The one for the service is hidden in the ticket and I can't get to it, but what about the other one, the one you use to build authenticators?\n\nIf I can get that copy of the session key, I can build my own authenticators, and if I can build my own authenticators, I can break the system.\n\n__Athena__,:\t\nThat's something I thought about last night, but then I traced the process of acquiring tickets and found that it wasn't possible to steal authenticators that way.\n\nYou sit down at a workstation and use the kinit program to get your ticket-granting ticket. Kinit asks for your username, and after you enter it, kinit forwards the name to Charon.\n\nCharon uses your name to look up your password, then proceeds to build a ticket-granting ticket for you. As part of this process, Charon creates a session key that you will share with the ticket-granting service. Charon puts a copy of the session key in the ticket-granting ticket, and puts your copy in the the ticket packet that you are about to receive. But before it sends you this packet, Charon encrypts the whole thing with your password.\n\nCharon sends the packet across the network. Someone can copy the packet as it goes by, but they can't do anything with it because it has been encrypted with your password. Specifically, no one can steal the ticket-granting session key.\n\nKinit receives the ticket packet and prompts you for a password, which you enter. If you enter the correct password, kinit can decrypt the packet and give you your copy of the session key.\n\nNow that you've taken care of the kinit business, you want to get your mail. You start the mail client program. This program looks for a mail service ticket and doesn't find one (after all, you haven't tried to get your mail yet). The client must use the ticket-granting ticket to ask the ticket-granting service for a mail service ticket.\n\nThe client builds an authenticator for the ticket-granting transaction and encrypts the authenticator with your copy of the ticket-granting session key. The client then sends Charon the authenticator, the ticket-granting ticket, your name, your workstation's address, and the name of the mail service.\n\nThe ticket-granting service receives this stuff and runs through the authentication checks. If everything checks properly, the ticket-granting service ends up with a copy of the session key that it shares with you. Now the ticket-granting service builds you a mail service ticket, and during this process, creates a new session key for you to share with the mail service.\n\nThe ticket-granting service now prepares a ticket packet to send back to your workstation. The packet contains the ticket and your copy of the mail service session key. But before it sends the packet, the ticket-granting service encrypts the packet with its copy of the TICKET-GRANTING session key. That done, the packet is sent on its way.\n\nSo here comes the mail service ticket packet, loping across the network. Suppose some network ogre copies it as it goes by. The ogre is out of luck because the packet is encrypted with the ticket-granting session key; you and the ticket-granting service are the only entities that know this key. Since the ogre cannot decrypt the mail ticket packet, the ogre cannot discover the MAIL SESSION KEY. Without this session key, the ogre cannot use any of the mail service tickets you might subsequently send across the network.\n\nSo I think we're safe. What do you think?\n\n__Euripides__,:\tPerhaps.\n__Athena__,:\tPerhaps! Is that all you can say!\n__Euripides__,:\t(laughing) Don't get upset. You should know my ways by now. I guess it is mean of me, and you up half the night.\n__Athena__,:\tPthhhhh!\n__Euripides__,:\tAll right, three-quarters of the night. Actually, the system is beginning to sound acceptible. This session key business solves a problem that I thought of last night: the problem of mutual authentication.\nPause.\nMind if I talk for a minute?\n__Athena__,:\t(A trifle coldly) Be my guest.\n__Euripides__,:\t\nYou are so kind. (__Euripides__, clears his throat.) Last night, while visions of session keys and authenticators danced in your head, I was trying to find new problems with the system, and I found one that I thought was pretty serious. I'll illustrate it by way of the following scenario.\n\nSuppose you are sick of your current job and have determined that it is in your best interest to move on. You want to print your resume on the company's wizz-bang laser printer so that headhunters and potential employers can take note of your classiness.\n\nSo you enter the printing command, and direct it to send the resume to the appropriate print server. The command gets the proper service ticket, if you don't already have it, then sends the ticket in your name to the appropriate print server. At least that's where you think it's headed. You don't in fact know that the request is headed for the right print server.\n\nSuppose that some unscrupulous hacker--say it's your boss--has screwed system around so that he redirects your request and its ticket to the print server in his office. His print service program doesn't care about the ticket or its contents. It throws away the ticket and sends a message to your workstation indicating that the ticket passed muster, and that the server is ready and willing to print your job. The printing command sends the job to the fraudulant print server and the enemy ends up with your resume.\n\nI'll state the problem by way of contrast. Without session keys and authenticators, Charon can protect its servers from false users, but it cannot protect its users from false servers. The system needs a way for client programs to authenticate the server before sending sensitive information to the service. The system must allow for mutual authentication.\n\nBut the session key solves this problem as long as you design your client programs properly. Back to the print server scenario. I want a print client program that makes sure the service it's sending jobs to is the legitimate service.\n\nHere's what such a program does. I enter the printing command and give it a filename, the name of my resume. Assume that I have a print service ticket and session key. The client program uses the session key to build an authenticator, then sends the authenticator and ticket to the \"supposed\" print server. The client DOES NOT send the resume yet; it waits for a response from the service.\n\nThe real service receives the ticket and authenticator, decrypts the ticket and extracts the session key, then uses the session key to decrypt the authenticator. This done, the service runs all the appropriate authentication tests.\n\nAssume the tests confirm my identity. Now the server prepares a reply packet so that it can prove its identity to the client program. It uses its copy of the session key to encrypt the reply packet, then sends the packet to the waiting client.\n\nThe client receives the packet and attempts to decrypt it with my copy of the session key. If the packet decrypts properly and yields the correct server response message, my client program knows that the server that encrypted the packet is the real server. Now the client sends the resume job to the print service.\n\nSuppose my boss screwed around the system so that his print server poses as the one I want. My client sends the authenticator and ticket to the \"print service\" and waits for a response. The fake print service cannot generate the correct response because it cannot decrypt the ticket and get the session key. My client will not send the job unless it receives the correct response. Eventually the client gives up waiting and exits. My print job does not get completed, but at least my resume did not end up on the desk of the enemy.\n\nYou know, I think we have a solid basis on which to implement the Charon Authentication System.\n\n__Athena__,:\tPerhaps. Anyway, I don't like the name \"Charon.\"\n__Euripides__,:\tYou don't? Since when?\n__Athena__,:\tI've never liked it, because the name doesn't make sense. I was talking to my Uncle Hades about it the other day, and he suggested another name, the name of his three-headed watch dog.\n__Euripides__,:\tOh, you mean \"Cerberus.\"\n__Athena__,:\tBite your tongue Rip! \"Cerberus\" indeed . . .\n__Euripides__,:\tEr, isn't that the name?\n__Athena__,:\tYeah, if you happen to be a Roman! I'm a Greek goddess, he's a Greek watch dog, and his name is \"Kerberos,\" \"Kerberos\" with a K.\n__Euripides__,:\tOkay, okay, don't throw thunderbolts. I'll buy the name. Actually, it has a nice ring to it. Adios Charon and hello to Kerberos.\n\n","slug":"3a/kerberos","published":1,"updated":"2019-12-12T05:42:07.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7ockxe7001slkyxcul95u24","content":"<p>This is the classic dialogue to explain the principle of Kerberos.</p>\n<h2 id=\"Dramatis-Personae\"><a href=\"#Dramatis-Personae\" class=\"headerlink\" title=\"Dramatis Personae\"></a>Dramatis Personae</h2><p><strong>Athena</strong>:     an up and coming system developer.<br><strong>Euripides</strong>:  a seasoned developer and resident crank.</p>\n<h2 id=\"Scene-I\"><a href=\"#Scene-I\" class=\"headerlink\" title=\"Scene I\"></a>Scene I</h2><p>A cubicle area. <strong>Athena</strong> and <strong>Euripides</strong> are working at neighboring terminals.</p>\n<p><strong>Athena</strong>:    Hey Rip, this timesharing system is a drag. I can’t get any work done because everyone else is logged in.<br><strong>Euripides</strong>:    Don’t complain to me. I only work here.<br><strong>Athena</strong>:    You know what we need? We need to give everyone their own workstation so they don’t have to worry about sharing computer cycles. And we’ll use a network to connect all the workstations so folks can communicate with one another.<br><strong>Euripides</strong>:    Fine. So what do we need, about a thousand workstations?<br><strong>Athena</strong>:    More or less.<br><strong>Euripides</strong>:    Have you seen the size of a typical workstation’s disk drive? There isn’t enough room for all the software that you have on a timesharing machine.<br><strong>Athena</strong>:    I figured that out already. We can keep copies of the system software on various server machines. When you login to a workstation, the workstation accesses the system software by making a network connection with one of the servers. This setup lets a whole bunch of workstations use the same copy of the system software, and it makes software updates convenient. You don’t have to trundle around to each workstation. Just modify the system software servers.<br><strong>Euripides</strong>:    All right. What are you going to do about personal files? With a timesharing system I can login and get to my files from any terminal that is connected to the system. Will I be able to walk up to any workstation and automatically get to my files? Or do I have to make like a PC user and keep my files on diskette? I hope not.<br><strong>Athena</strong>:    I think we can use other machines to provide personal file storage. You can login to any workstation and get to your files.<br><strong>Euripides</strong>:    What about printing? Does every workstation have its own printer? Whose money are you spending anyway? And what about electronic mail? How are you going to distribute mail to all these workstations?<br><strong>Athena</strong>:    Ah . . . Well obviously we don’t have the cash to give everyone a printer, but we could have machines dedicated to print service. You send a job to a print server, and it prints it for you. You could do sort of the same thing with mail. Have a machine dedicated to mail service. You want your mail, you contact the mail server and pick up your mail.<br><strong>Euripides</strong>:    Your workstation system sounds really good Tina. When I get mine, you know what I’m going to do? I’m going to find out your username, and get my workstation to think that I am you. Then I’m going to contact the mail server and pick up your mail. I’m going to contact your file server and remove your files, and–<br><strong>Athena</strong>:    Can you do that?<br><strong>Euripides</strong>:    Sure! How are these network servers going to know that I’m not you?<br><strong>Athena</strong>:    Gee, I don’t know. I guess I need to do some thinking.<br><strong>Euripides</strong>:    Sounds like it. Let me know when you figure it out.</p>\n<h2 id=\"Scene-II\"><a href=\"#Scene-II\" class=\"headerlink\" title=\"Scene II\"></a>Scene II</h2><p><strong>Euripides</strong>,’ office, the next morning. Euripides sits at his desk, reading his mail. <strong>Athena</strong>, knocks on the door.<br><strong>Athena</strong>,:    Well I’ve figured out how to secure an open network environment so that unscrupulous folks like you cannot use network services in other people’s names.<br><strong>Euripides</strong>,:    Is that so? Have a seat.<br>She does.<br><strong>Athena</strong>,:    Before I describe it, can I lay down one ground rule about this discussion?<br><strong>Euripides</strong>,:    What’s your rule?<br><strong>Athena</strong>,:<br>Well suppose I say something like the following: “I want my electronic mail, so I contact the mail server and ask it to send the mail to my workstation.” In reality I’m not the entity that contacts the mail server. I’m using a program to contact the mail server and retrieve my mail, a program that is a CLIENT of the mail service program.</p>\n<p>But I don’t want to say “the client does such-and-such” every time I refer to a transaction between the user and a network server. I’d just as soon say “I do such-and-such,” keeping in mind of course that a client program is doing things on my behalf. Is that okay with you?</p>\n<p><strong>Euripides</strong>,:    Sure. No problem.<br><strong>Athena</strong>,:    Good. All right, I’ll begin by stating the problem I have solved. In an open network environment, machines that provide services must be able to confirm the identities of people who request service. If I contact the mail server and ask for my mail, the service program must be able to verify that I am who I claim to be, right?<br><strong>Euripides</strong>,:    Right.<br><strong>Athena</strong>,:    You could solve the problem clumsily by requiring the mail server to ask for a password before I could use it. I prove who I am to the server by giving it my password.<br><strong>Euripides</strong>,:    That’s clumsy all right. In a system like that, every server has to know your password. If the network has one thousand users, each server has to know one thousand passwords. If you want to change your password, you have to contact all servers and notify them of the change. I take it your system isn’t this stupid.<br><strong>Athena</strong>,:    My system isn’t stupid. It works like this: Not only do people have passwords, services have passwords too. Each user knows her or his password, each service program knows its password, and there’s an AUTHENTICATION SERVICE that knows ALL passwords–each user’s password, and each service’s password. The authentication service stores the passwords in a single, centralized database.<br><strong>Euripides</strong>,:    Do you have a name for this authentication service?<br><strong>Athena</strong>,:    I haven’t thought of one yet. Do you have any ideas?<br><strong>Euripides</strong>,:    What’s the name of that fellow who ferries the dead across the River Styx?<br><strong>Athena</strong>,:    Charon?<br><strong>Euripides</strong>,:    Yeah, that’s him. He won’t take you across the river unless you can prove your identity.<br><strong>Athena</strong>,:    There you go Rip, trying to rewrite Greek mythology again. Charon doesn’t care about your identity. He just wants to make sure that you’re dead.<br><strong>Euripides</strong>,:    Have you got a better name?<br>Pause.<br><strong>Athena</strong>,:    No, not really.<br><strong>Euripides</strong>,:    Then let’s call the authentication service “Charon.”<br><strong>Athena</strong>,:<br>Okay. I guess I should describe the system, huh?</p>\n<p>Let’s say you want to use a service, the mail service. In my system you cannot use a service unless, ah, Charon tells the service that you are who you claim to be. And you can’t get the okay to use a service unless you have authenticated yourself to Charon. When you request authentication from Charon, you have to tell Charon the service for which you want the okay. If you want to use the mail server, you’ve got to tell Charon.</p>\n<p>Charon asks you to prove your identity. You do so by providing your secret password. Charon takes your password and compares it to the one that is registered for you in the Charon database. If the two passwords match, Charon considers your identity proven.</p>\n<p>Charon now has to convince the mail server that you are who you say you are. Since Charon knows all service passwords, it knows the mail service’s password. It’s conceivable that Charon could give you the password, which you could forward to the mail service as proof that you have authenticated yourself to Charon.</p>\n<p>The problem is, Charon cannot give you the password directly, because then you would know it. The next time you wanted mail, you could circumvent Charon and use the mail server without correctly identifying yourself. You could even pretend to be someone else, and use the mail server in that other person’s name.</p>\n<p>So instead of giving you the mail server’s password, Charon gives you a mail service TICKET. This ticket contains a version of your username that has been ENCRYPTED USING the MAIL SERVER’S PASSWORD.</p>\n<p>Ticket in hand, you can now ask the mail service for your mail. You make your request by telling the mail server who you are, and furnishing the ticket that proves you are who you say you are.</p>\n<p>The server uses its password to decrypt the ticket, and if the ticket decrypts properly, the server ends up with the username that Charon placed in the ticket.</p>\n<p>The service compares this name with the name you sent along with the ticket. If the names match, the mail server considers your identity proven and proceeds to give you your mail.</p>\n<p>What do you think of those apples?</p>\n<p><strong>Euripides</strong>,:    I’ve got some questions.<br><strong>Athena</strong>,:    I figured. Well go ahead.<br><strong>Euripides</strong>,:    When a service program decrypts a ticket, how does it know that it has decrypted the ticket properly?<br><strong>Athena</strong>,:    I don’t know.<br><strong>Euripides</strong>,:    Maybe you should include the service’s name in the ticket. That way when a service decrypts a ticket, it can gauge its success on whether or not it can find its name in the decrypted ticket.<br><strong>Athena</strong>,:<br>That sounds good to me. So the ticket looks something like this:</p>\n<p>(She scrawls the following on a pad of paper:)<br>   TICKET -  {username:servicename}<br><strong>Euripides</strong>,:    So the service ticket contains just your username and the servicename?<br><strong>Athena</strong>,:    Encrypted with the service’s password.<br><strong>Euripides</strong>,:    I don’t think that’s enough information to make the ticket secure.<br><strong>Athena</strong>,:    What do you mean?<br><strong>Euripides</strong>,:    Let’s suppose you ask Charon for a mail server ticket. Charon prepares that ticket so that it has your username “tina” in it. Suppose I copy that ticket as it wizzes by on its way across the network from Charon to you. Suppose I convince my insecure workstation that my username is “tina.” The mail client program on my workstation thinks I am you. In your name, the program forwards the stolen ticket to the mail server. The server decrypts the ticket and sees that it is valid. The username in the ticket matches the name of the user who sent the ticket. The mail server gives me your mail . . .<br><strong>Athena</strong>,:    Oh! Well that’s not so good.<br><strong>Euripides</strong>,:<br>But I think I know a way to fix this problem. Or to at least provide a partial fix to it. I think Charon should include more information in the service tickets it produces. In addition to the username, the ticket should also include the NETWORK ADDRESS from which the user asked Charon for the ticket. That gives you an additional level of security.</p>\n<p>I’ll illustrate. Suppose I steal your mail ticket now. The ticket has your workstation’s network address in it, and this address does not match my workstation’s address. In your name I forward the purloined ticket to the mail server. The server program extracts the username and network address from the ticket and attempts to match that information against the username and network address of the entity that sent the ticket. The username matches, but the network address does not. The server rejects the ticket because obviously it was stolen.</p>\n<p><strong>Athena</strong>,:    Bravo, bravo! I wish I had thought of that.<br><strong>Euripides</strong>,:    Well that’s what I’m around for.<br><strong>Athena</strong>,:<br>So the revised ticket design looks like this:</p>\n<p>She scrawls the following on a chalkboard:</p>\n<p>  TICKET -   {username:ws_address:servicename}<br><strong>Athena</strong>,:    Now I’m really excited. Let’s build a Charon system and see if it works!<br><strong>Euripides</strong>,:    Not so fast. I have some other questions about your system.<br><strong>Athena</strong>,:    All right. (Athena leans forward in her chair) Shoot.<br><strong>Euripides</strong>,:    Sounds like I’ve got to get a new ticket every time I want to use a service. If I’m putting in a full day’s work, I’ll probably want to get my mail more than once. Do I have to get a new ticket every time I want to get my mail? If that’s true, I don’t like your system.<br><strong>Athena</strong>,:    Ah . . . Well I don’t see why tickets can’t be reusable. If you get a ticket for the mail server, you ought to be able to use it again and again. For instance, when the mail client program makes a request for service in your name, it forwards a COPY of the ticket to the mail server.<br><strong>Euripides</strong>,:    That’s better. But I still have problems. You seem to imply that I have to give Charon my password every time I want to use a service for which I don’t have a ticket. I login and want to access my files. I fire off a request to Charon for the proper ticket and this means that I’ve had to use my password. Then I want to read my mail. Another request to Charon, I have to enter my password again. Now suppose I want to send one of my mail messages to the print server. Another Charon request and, well you get the picture.<br><strong>Athena</strong>,:    Uh, yeah, I do.<br><strong>Euripides</strong>,:    And if that weren’t bad enough, consider this: it sounds like when you authenticate yourself to Charon, you send your secret password over the network in cleartext. Clever people like yours truly can monitor the network and steal copies of people’s passwords. If I’ve got your password, I can use any service in your name. <strong>Athena</strong>, sighs.<br><strong>Athena</strong>,:    These are serious problems. Guess I need to go back to the drawing board.</p>\n<h2 id=\"Scene-III\"><a href=\"#Scene-III\" class=\"headerlink\" title=\"Scene III\"></a>Scene III</h2><p>The next morning, <strong>Athena</strong>, catches <strong>Euripides</strong>, at the coffee area. She taps him on the shoulder as he fills his cup.<br>The two head for the coffee machine.</p>\n<p><strong>Athena</strong>,:    I’ve got a new version of Charon that solves our problems.<br><strong>Euripides</strong>,:    Really? That was quick.<br><strong>Athena</strong>,:    Well, you know, problems of this nature keep me up all night.<br><strong>Euripides</strong>,:    Must be your guilty conscience. Shall we repair to yon small conference room?<br><strong>Athena</strong>,:    Why not?<br>The two move to the small conference room.<br><strong>Athena</strong>,:    I’ll begin by stating the problems again, but I’ll invert them so that they become requirements of the system.<br><strong>Athena</strong>, clears her throat.<br><strong>Athena</strong>,:    The first requirement: Users only have to enter their passwords once, at the beginning of their workstation sessions. This requirement implies that you shouldn’t have to enter your password every time you need a new service ticket. The second requirement: passwords should not be sent over the network in clear text.<br><strong>Euripides</strong>,:    Okay.<br><strong>Athena</strong>,:<br>I’ll start with the first requirement: you should only have to use your password once. I’ve met this requirement by inventing a new network service. It’s called the “ticket-granting” service, a service that issues Charon tickets to users who have already proven their identity to Charon. You can use this ticket-granting service if you have a ticket for it, a ticket-granting ticket.</p>\n<p>The ticket-granting service is really just a version of Charon in as much as it has access to the Charon database. It’s a part of Charon that lets you authenticate yourself with a ticket instead of a password.</p>\n<p>Anyhow, the authentication system now works as follows: you login to a workstation and use a program called kinit to contact the Charon server. You prove your identity to Charon, and the kinit program gets you a ticket-granting ticket.</p>\n<p>Now say you want to get your mail from the mail server. You don’t have a mail server ticket yet, so you use the “ticket-granting” ticket to get the mail server ticket for you. You don’t have to use your password to get the new ticket.</p>\n<p><strong>Euripides</strong>,:    Do I have to get a new “ticket-granting” ticket every time I need to get to another network service?.<br><strong>Athena</strong>,:    No. Remember, we agreed last time that tickets can be reused. Once you have acquired a ticket-granting ticket, you don’t need to get another. You use the ticket-granting ticket to get the other tickets you need.<br><strong>Euripides</strong>,:    Okay, that makes sense. And since you can reuse tickets, once the ticket-granting service has given you a ticket for a particular service, you don’t need to get that particular ticket again.<br><strong>Athena</strong>,:    Yeah, isn’t that elegant?<br><strong>Euripides</strong>,:    Okay, I buy it so far . . . As long as you didn’t have to send your password in cleartext over the network when you got the ticket-granting ticket.<br><strong>Athena</strong>,:<br>Like I said, I’ve solved that problem as well. The thing is, when I say you have to contact Charon to get the ticket-granting ticket, I make it sound as though you have to send your password in cleartext over the network to the Charon Server. But it doesn’t have to be that way.</p>\n<p>Here’s really what happens. When you use the kinit program to get the ticket-granting ticket, kinit doesn’t send your password to the Charon server, kinit sends only your username.</p>\n<p><strong>Euripides</strong>,:    Fine.<br><strong>Athena</strong>,:<br>Charon uses the username to look up your password. Next Charon builds a packet of data that contains the ticket-granting ticket. Before it sends you the packet, Charon uses your password to encrypt the packet’s contents.</p>\n<p>Your workstation receives the ticket packet. You enter your password. Kinit attempts to decrypt the ticket with the password you entered. If kinit succeeds, you have successfully authenticated yourself to Charon. You now possess a ticket-granting ticket, and that ticket can get you the other tickets you require.</p>\n<p>How’s that for some fancy thinking?</p>\n<p><strong>Euripides</strong>,:    I don’t know . . . I’m trying to think myself. You know, I think the parts of the system that you just described work pretty well. Your system requires me to authenticate myself only once. Thereafter Charon can issue me service tickets without my being aware of it. Seamless, seamless in that regard. But there’s something about the design of the service ticket that troubles me somehow. It has to do with the fact that tickets are reusable. Now I agree that they have to be reusable, but reusable tickets are, by their nature, very dangerous.<br><strong>Athena</strong>,:    What do you mean?<br><strong>Euripides</strong>,:<br>Look at it this way. Suppose you are using an insecure workstation. In the course of your login session you acquire a mail service ticket, a printing service ticket, and a file service ticket. Suppose you inadvertantly leave these tickets on the workstation when you logout.</p>\n<p>Now suppose I login to the workstation and find those tickets. I’m feeling like causing trouble, so I make the workstation think that I am you. Since the tickets are made out in your name, I can use the mail client program to access your mail, I can use the file service client to access and remove your files, and I can use the printing command to run up huge bills on your account. All because these tickets have been accidentally left lying around.</p>\n<p>And nothing can keep me from copying these tickets to a place of my own. I can continue to use them for all eternity.</p>\n<p><strong>Athena</strong>,:<br>But that’s an easy fix. We just write a program that destroys a user’s tickets after each login session. You can’t use tickets that have been destroyed.</p>\n<p><strong>Euripides</strong>,:<br>Well obviously your system must have a ticket-destroying program, but it’s foolish to make users rely on such a thing. You can’t count on users to remember to destroy their tickets every time they finish a workstation session. And even if you rely upon your users to destroy their tickets, consider the following scenario.</p>\n<p>I’ve got a program that watches the network and copies service tickets as they zip accross the network. Suppose I feel like victimizing you. I wait for you to begin a workstation session, I turn on my program and copy a bunch of your tickets.</p>\n<p>I wait for you to finish your session, and eventually you logout and leave. I fiddle with my workstation’s network software and change its address so that it matches the address of the workstation you were using when you acquired the tickets I copied. I make my workstation believe that I am you. I have your tickets, your username, and the correct network address. I can REPLAY these tickets and use services in your name.</p>\n<p>It doesn’t matter that you destroyed your tickets before you ended your workstation session. The tickets I have stolen are valid for as long as I care to use them, because your current ticket design does not place a limit on the number of times you can reuse a ticket, or on how long a ticket remains valid.</p>\n<p><strong>Athena</strong>,:    Oh I see what you’re saying! Tickets can’t be valid forever because they would then constitute a huge security risk. We have to restrict the length of time for which a ticket can be used, perhaps give each ticket some kind of expiration date.<br><strong>Euripides</strong>,:    Exactly. I think each ticket needs to have two additional pieces of information: a lifespan that indicates the length of time for which the ticket is valid, and a timestamp that indicates the date and time at which Charon issued the ticket. So a ticket would look something like this:<br><strong>Euripides</strong>, goes to the chalkboard and scrawls the following:</p>\n<p>   TICKET   {username:address:servicename:lifespan:timestamp}<br><strong>Euripides</strong>,:    Now when a service decrypts tickets, it checks the ticket’s username and address against the name and address of the person sending the ticket, and it uses the timestamp and lifespan information to see if the ticket has expired.<br><strong>Athena</strong>,:    All right. What kind of lifetime should the typical service ticket have?<br><strong>Euripides</strong>,:    I don’t know. Probably the length of a typical workstation session. Say eight hours.<br><strong>Athena</strong>,:    So if I sit at my workstation for more than eight hours, all my tickets expire. That includes my ticket-granting ticket. So I have to reauthenticate myself to Charon after eight hours.<br><strong>Euripides</strong>,:    That’s not unreasonable is it?<br><strong>Athena</strong>,:    I guess not. So we’re settled – tickets expire after eight hours. Now I’ve got a question for you. Suppose I have copied YOUR tickets from the network–<br><strong>Euripides</strong>,:    (Eyes twinkling) Aw, Tina! You wouldn’t really do that would you?<br><strong>Athena</strong>,:<br>This is just for the sake of argument. I’ve copied your tickets. Now I wait for you to logout. Suppose you have a doctor’s appointment or a class to attend, so you end your workstation session after a couple of hours. You are a smart boots and have destroyed your copies of the tickets before logging out.</p>\n<p>But I’ve stolen your tickets, and they are good for about six hours. That gives me ample time to pillage your files and print one thousand copies of whatever in your name.</p>\n<p>See, the lifetime-timestamp business works fine in the event that a ticket thief chooses to replay the ticket after the ticket has expired. If the thief can replay the ticket before that . . .</p>\n<p><strong>Euripides</strong>,:    Uh, well . . . Of course you are right.<br><strong>Athena</strong>,:    I think we have run into a major problem. (She sighs.)<br>Pause.<br><strong>Euripides</strong>,:    I guess that means you’ll be busy tonight. Want more coffee?<br><strong>Athena</strong>,:    Why not.</p>\n<h2 id=\"Scene-IV\"><a href=\"#Scene-IV\" class=\"headerlink\" title=\"Scene IV\"></a>Scene IV</h2><p>The next morning in <strong>Euripides</strong>,’ office. <strong>Athena</strong>, knocks on the door.</p>\n<p><strong>Euripides</strong>,:    You’ve got rings under your eyes this morning.<br><strong>Athena</strong>,:    Well, you know. Another one of those long nights.<br><strong>Euripides</strong>,:    Have you solved the replay problem?<br><strong>Athena</strong>,:    I think so.<br><strong>Euripides</strong>,:    Have a seat.<br>She does.<br><strong>Athena</strong>,:    As usual, I feel compelled to restate the problem. Tickets are reusable within a limited timespan, say eight hours. If someone steals your tickets and chooses to replay them before they expire, we can’t do anything to stop them.<br><strong>Euripides</strong>,:    That’s the problem.<br><strong>Athena</strong>,:    We could beat the problem if we designed the tickets so they couldn’t be reusable.<br><strong>Euripides</strong>,:    But then you would have to get a new ticket every time you wanted to use a network service.<br><strong>Athena</strong>,:<br>Right. That is a clumsy solution at best. (Pause.) Ah, how do I proceed with my argument? (She ponders for a moment.)</p>\n<p>All right, I’m going to restate the problem again, this time in the form of a requirement. A network service must be able to prove that the person using a ticket is the same person to whom that ticket was issued.</p>\n<p>Let me trace the authentication process again and see if I can tease out an appropriate way to illustrate my solution to this problem.</p>\n<p>I want to use a certain network service. I access that service by starting a client program on my workstation. The client sends three things to the service machine– my name, my workstation’s network address, and the appropriate service ticket.</p>\n<p>The ticket contains the name of the person it was issued to and the address of the workstation that person was using when he or she acquired the ticket. It also contains an expiration date in the form of a lifespan and a timestamp. All this information has been encrypted in the service’s Charon password.</p>\n<p>Our current authentication scheme relies on the following tests:</p>\n<p>Can the service decrypt the ticket?<br>Has the ticket expired?<br>Do the name and workstation address specified in the ticket match the name and address of the person who sent the ticket?<br>What do these tests prove? The first test proves that the ticket either did or did not come from Charon. If the ticket cannot be decrypted, it did not come from the real Charon. The real Charon would have encrypted the ticket with the service’s password. Charon and the service are the only two entities that know the service’s password. If the ticket decrypts successfully, the service knows that it came from the real Charon. This test prevents folks from building fake Charon tickets.</p>\n<p>The second test checks the ticket’s lifespan and timestamp. If it has expired, the service rejects the ticket. This test stops people from using old tickets, tickets that perhaps were stolen.</p>\n<p>The third test checks the ticket-user’s name and address against the name and address of the person specified in the ticket. If the test fails, the ticket-user has obtained (perhaps surreptitiously) another person’s ticket. The ticket is of course rejected.</p>\n<p>If the names and addresses do match, what has the test proved? Nothing. Scallywags can steal tickets from the network, change their workstation addresses and usernames appropriately, and rifle other folks resources. As I pointed out yesterday, tickets can be replayed as long as they haven’t expired. They can be replayed because a service cannot determine that the person sending the ticket is actually the ticket’s legitimate owner.</p>\n<p>The service cannot make this determination because it does not share a secret with the user. Look at it this way. If I’m on watch at Elsinore, you know, the castle in Hamlet, and you are supposed to relieve me, I’m not supposed to let you take my place unless you can provide the correct password. That’s the case where the two of us share a secret. And it’s probably a secret that someone else made up for everyone who stands on watch.</p>\n<p>So I was thinking last night, why not have Charon make up a password for the legitimate ticket-owner to share with the service? Charon gives a copy of this session key to the service, and a copy to the user. When the service receives a ticket from a user, it can use the session key to test the user’s identity.</p>\n<p><strong>Euripides</strong>,:    Wait a second. How is Charon going to give both parties the session key?<br><strong>Athena</strong>,:    The ticket-owner gets the session key as part of the reply from Charon. Like this:<br>She scrawls the following on a chalkboard:</p>\n<p> CHARON REPLY  -  [sessionkey|ticket]<br>The service’s copy of the session key comes inside the ticket, and the service gets the key when it decrypts the ticket. So the ticket looks like this:</p>\n<p> TICKET -  {sessionkey:username:address:servicename:lifespan:timestamp}<br>When you want to get to a service, the client program you start builds what I call an AUTHENTICATOR. The authenticator contains your name and your workstation’s address. The client encrypts this information with the session key, the copy of the session key you received when you requested the ticket.</p>\n<p>  AUTHENTICATOR - {username:address} encrypted with session key<br>After building the authenticator, the client sends it and the ticket to the service. The service cannot decrypt the authenticator yet because it doesn’t have the session key. That key is in the ticket, so the service first decrypts the ticket.</p>\n<p>After decrypting the ticket, the service ends up with the the following information:</p>\n<p>The ticket’s lifespan and timestamp;<br>The ticket-owner’s name;<br>The ticket-owner’s network address;<br>The session key.<br>The service checks to see if the ticket has expired. If all is well in that regard, the service next uses the session key to decrypt the authenticator. If the decryption proceeds without a hitch, the service ends up with a username and a network address. The service tests this information against the name and address found in the ticket, AND the name and address of the person who sent the ticket and authenticator. If everything matches, the service has determined that the ticket-sender is indeed the ticket’s real owner.</p>\n<p><strong>Athena</strong>, pauses, clears her throat, drinks some coffee.</p>\n<p>I think the session key-authenticator business takes care of the replay problem.</p>\n<p><strong>Euripides</strong>,:    Maybe. But I wonder . . . To break this version of the system, I must have the proper authenticator for the service.<br><strong>Athena</strong>,:    No. You must have the authenticator AND the ticket for the service. The authenticator is worthless without the ticket because the service cannot decrypt the authenticator without first having the appropriate session key, and the service cannnot get the appropriate session key without first decrypting the ticket.<br><strong>Euripides</strong>,:    Okay, I understand that, but didn’t you say that when a client program contacts the server, it sends the ticket and matching authenticator together?<br><strong>Athena</strong>,:    Yes, I guess I said that.<br><strong>Euripides</strong>,:    If that’s what actually happens, what prevents me from stealing the ticket and authenticator at the same time? I’m sure I could write a program to do the job. If I’ve got the ticket and its authenticator, I believe I can use the two as long as the ticket has not expired. I just have to change my workstation address and username appropriately. True?<br><strong>Athena</strong>,:    (Biting her lip) True. How dispiriting.<br><strong>Euripides</strong>,:    Wait, wait, wait! This isn’t such a big deal. Tickets are reusable as long as they haven’t expired, but that doesn’t mean that authenticators have to be reusable. Suppose we design the system so that authenticators can only be used once. Does that buy us anything?<br><strong>Athena</strong>,:<br>Well, it might. Let’s see, the client program builds the authenticator, then sends it with the ticket to the service. You copy both ticket and authenticator as they move from my workstation to the server. But the ticket and authenticator arrive at the server before you can send your copies. If the authenticator can only be used once, your copy of it is no good, and you lose when you attempt to replay your ticket and authenticator.</p>\n<p>Well, that’s a relief. So all we have to do is invent a way to make the authenticator a one-time usable thing.</p>\n<p><strong>Euripides</strong>,:<br>No problem. Let’s just put a lifespan and timestamp on them. Suppose each authenticator has a lifespan of a couple of minutes. When you want to use a service, your client program builds the authenticator, stamps it with the current time, then sends it and the ticket to the server.</p>\n<p>The server receives the ticket and authenticator and goes about its business. When the server decrypts the authenticator, it checks the authenticator’s lifespan and timestamp. If the authenticator hasn’t expired, and everything else checks properly, the server considers you authenticated.</p>\n<p>Suppose I copied the athenticator and ticket as they crossed the network. I have to change my workstation’s network address and my username, and I have to do this all in a couple of minutes. That’s a pretty tall order. In fact I don’t think it’s possible. Unless . . .</p>\n<p>Well, here’s a potential problem. Suppose that instead of copying the ticket and authenticator as they travel from your workstation to the server, I copy original ticket packet that comes from Charon, the packet you receive when you ask Charon to give you a ticket.</p>\n<p>This packet, as I recall, has two copies of the session key in it: one for you and one for the service. The one for the service is hidden in the ticket and I can’t get to it, but what about the other one, the one you use to build authenticators?</p>\n<p>If I can get that copy of the session key, I can build my own authenticators, and if I can build my own authenticators, I can break the system.</p>\n<p><strong>Athena</strong>,:<br>That’s something I thought about last night, but then I traced the process of acquiring tickets and found that it wasn’t possible to steal authenticators that way.</p>\n<p>You sit down at a workstation and use the kinit program to get your ticket-granting ticket. Kinit asks for your username, and after you enter it, kinit forwards the name to Charon.</p>\n<p>Charon uses your name to look up your password, then proceeds to build a ticket-granting ticket for you. As part of this process, Charon creates a session key that you will share with the ticket-granting service. Charon puts a copy of the session key in the ticket-granting ticket, and puts your copy in the the ticket packet that you are about to receive. But before it sends you this packet, Charon encrypts the whole thing with your password.</p>\n<p>Charon sends the packet across the network. Someone can copy the packet as it goes by, but they can’t do anything with it because it has been encrypted with your password. Specifically, no one can steal the ticket-granting session key.</p>\n<p>Kinit receives the ticket packet and prompts you for a password, which you enter. If you enter the correct password, kinit can decrypt the packet and give you your copy of the session key.</p>\n<p>Now that you’ve taken care of the kinit business, you want to get your mail. You start the mail client program. This program looks for a mail service ticket and doesn’t find one (after all, you haven’t tried to get your mail yet). The client must use the ticket-granting ticket to ask the ticket-granting service for a mail service ticket.</p>\n<p>The client builds an authenticator for the ticket-granting transaction and encrypts the authenticator with your copy of the ticket-granting session key. The client then sends Charon the authenticator, the ticket-granting ticket, your name, your workstation’s address, and the name of the mail service.</p>\n<p>The ticket-granting service receives this stuff and runs through the authentication checks. If everything checks properly, the ticket-granting service ends up with a copy of the session key that it shares with you. Now the ticket-granting service builds you a mail service ticket, and during this process, creates a new session key for you to share with the mail service.</p>\n<p>The ticket-granting service now prepares a ticket packet to send back to your workstation. The packet contains the ticket and your copy of the mail service session key. But before it sends the packet, the ticket-granting service encrypts the packet with its copy of the TICKET-GRANTING session key. That done, the packet is sent on its way.</p>\n<p>So here comes the mail service ticket packet, loping across the network. Suppose some network ogre copies it as it goes by. The ogre is out of luck because the packet is encrypted with the ticket-granting session key; you and the ticket-granting service are the only entities that know this key. Since the ogre cannot decrypt the mail ticket packet, the ogre cannot discover the MAIL SESSION KEY. Without this session key, the ogre cannot use any of the mail service tickets you might subsequently send across the network.</p>\n<p>So I think we’re safe. What do you think?</p>\n<p><strong>Euripides</strong>,:    Perhaps.<br><strong>Athena</strong>,:    Perhaps! Is that all you can say!<br><strong>Euripides</strong>,:    (laughing) Don’t get upset. You should know my ways by now. I guess it is mean of me, and you up half the night.<br><strong>Athena</strong>,:    Pthhhhh!<br><strong>Euripides</strong>,:    All right, three-quarters of the night. Actually, the system is beginning to sound acceptible. This session key business solves a problem that I thought of last night: the problem of mutual authentication.<br>Pause.<br>Mind if I talk for a minute?<br><strong>Athena</strong>,:    (A trifle coldly) Be my guest.<br><strong>Euripides</strong>,:<br>You are so kind. (<strong>Euripides</strong>, clears his throat.) Last night, while visions of session keys and authenticators danced in your head, I was trying to find new problems with the system, and I found one that I thought was pretty serious. I’ll illustrate it by way of the following scenario.</p>\n<p>Suppose you are sick of your current job and have determined that it is in your best interest to move on. You want to print your resume on the company’s wizz-bang laser printer so that headhunters and potential employers can take note of your classiness.</p>\n<p>So you enter the printing command, and direct it to send the resume to the appropriate print server. The command gets the proper service ticket, if you don’t already have it, then sends the ticket in your name to the appropriate print server. At least that’s where you think it’s headed. You don’t in fact know that the request is headed for the right print server.</p>\n<p>Suppose that some unscrupulous hacker–say it’s your boss–has screwed system around so that he redirects your request and its ticket to the print server in his office. His print service program doesn’t care about the ticket or its contents. It throws away the ticket and sends a message to your workstation indicating that the ticket passed muster, and that the server is ready and willing to print your job. The printing command sends the job to the fraudulant print server and the enemy ends up with your resume.</p>\n<p>I’ll state the problem by way of contrast. Without session keys and authenticators, Charon can protect its servers from false users, but it cannot protect its users from false servers. The system needs a way for client programs to authenticate the server before sending sensitive information to the service. The system must allow for mutual authentication.</p>\n<p>But the session key solves this problem as long as you design your client programs properly. Back to the print server scenario. I want a print client program that makes sure the service it’s sending jobs to is the legitimate service.</p>\n<p>Here’s what such a program does. I enter the printing command and give it a filename, the name of my resume. Assume that I have a print service ticket and session key. The client program uses the session key to build an authenticator, then sends the authenticator and ticket to the “supposed” print server. The client DOES NOT send the resume yet; it waits for a response from the service.</p>\n<p>The real service receives the ticket and authenticator, decrypts the ticket and extracts the session key, then uses the session key to decrypt the authenticator. This done, the service runs all the appropriate authentication tests.</p>\n<p>Assume the tests confirm my identity. Now the server prepares a reply packet so that it can prove its identity to the client program. It uses its copy of the session key to encrypt the reply packet, then sends the packet to the waiting client.</p>\n<p>The client receives the packet and attempts to decrypt it with my copy of the session key. If the packet decrypts properly and yields the correct server response message, my client program knows that the server that encrypted the packet is the real server. Now the client sends the resume job to the print service.</p>\n<p>Suppose my boss screwed around the system so that his print server poses as the one I want. My client sends the authenticator and ticket to the “print service” and waits for a response. The fake print service cannot generate the correct response because it cannot decrypt the ticket and get the session key. My client will not send the job unless it receives the correct response. Eventually the client gives up waiting and exits. My print job does not get completed, but at least my resume did not end up on the desk of the enemy.</p>\n<p>You know, I think we have a solid basis on which to implement the Charon Authentication System.</p>\n<p><strong>Athena</strong>,:    Perhaps. Anyway, I don’t like the name “Charon.”<br><strong>Euripides</strong>,:    You don’t? Since when?<br><strong>Athena</strong>,:    I’ve never liked it, because the name doesn’t make sense. I was talking to my Uncle Hades about it the other day, and he suggested another name, the name of his three-headed watch dog.<br><strong>Euripides</strong>,:    Oh, you mean “Cerberus.”<br><strong>Athena</strong>,:    Bite your tongue Rip! “Cerberus” indeed . . .<br><strong>Euripides</strong>,:    Er, isn’t that the name?<br><strong>Athena</strong>,:    Yeah, if you happen to be a Roman! I’m a Greek goddess, he’s a Greek watch dog, and his name is “Kerberos,” “Kerberos” with a K.<br><strong>Euripides</strong>,:    Okay, okay, don’t throw thunderbolts. I’ll buy the name. Actually, it has a nice ring to it. Adios Charon and hello to Kerberos.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is the classic dialogue to explain the principle of Kerberos.</p>\n<h2 id=\"Dramatis-Personae\"><a href=\"#Dramatis-Personae\" class=\"headerlink\" title=\"Dramatis Personae\"></a>Dramatis Personae</h2><p><strong>Athena</strong>:     an up and coming system developer.<br><strong>Euripides</strong>:  a seasoned developer and resident crank.</p>\n<h2 id=\"Scene-I\"><a href=\"#Scene-I\" class=\"headerlink\" title=\"Scene I\"></a>Scene I</h2><p>A cubicle area. <strong>Athena</strong> and <strong>Euripides</strong> are working at neighboring terminals.</p>\n<p><strong>Athena</strong>:    Hey Rip, this timesharing system is a drag. I can’t get any work done because everyone else is logged in.<br><strong>Euripides</strong>:    Don’t complain to me. I only work here.<br><strong>Athena</strong>:    You know what we need? We need to give everyone their own workstation so they don’t have to worry about sharing computer cycles. And we’ll use a network to connect all the workstations so folks can communicate with one another.<br><strong>Euripides</strong>:    Fine. So what do we need, about a thousand workstations?<br><strong>Athena</strong>:    More or less.<br><strong>Euripides</strong>:    Have you seen the size of a typical workstation’s disk drive? There isn’t enough room for all the software that you have on a timesharing machine.<br><strong>Athena</strong>:    I figured that out already. We can keep copies of the system software on various server machines. When you login to a workstation, the workstation accesses the system software by making a network connection with one of the servers. This setup lets a whole bunch of workstations use the same copy of the system software, and it makes software updates convenient. You don’t have to trundle around to each workstation. Just modify the system software servers.<br><strong>Euripides</strong>:    All right. What are you going to do about personal files? With a timesharing system I can login and get to my files from any terminal that is connected to the system. Will I be able to walk up to any workstation and automatically get to my files? Or do I have to make like a PC user and keep my files on diskette? I hope not.<br><strong>Athena</strong>:    I think we can use other machines to provide personal file storage. You can login to any workstation and get to your files.<br><strong>Euripides</strong>:    What about printing? Does every workstation have its own printer? Whose money are you spending anyway? And what about electronic mail? How are you going to distribute mail to all these workstations?<br><strong>Athena</strong>:    Ah . . . Well obviously we don’t have the cash to give everyone a printer, but we could have machines dedicated to print service. You send a job to a print server, and it prints it for you. You could do sort of the same thing with mail. Have a machine dedicated to mail service. You want your mail, you contact the mail server and pick up your mail.<br><strong>Euripides</strong>:    Your workstation system sounds really good Tina. When I get mine, you know what I’m going to do? I’m going to find out your username, and get my workstation to think that I am you. Then I’m going to contact the mail server and pick up your mail. I’m going to contact your file server and remove your files, and–<br><strong>Athena</strong>:    Can you do that?<br><strong>Euripides</strong>:    Sure! How are these network servers going to know that I’m not you?<br><strong>Athena</strong>:    Gee, I don’t know. I guess I need to do some thinking.<br><strong>Euripides</strong>:    Sounds like it. Let me know when you figure it out.</p>\n<h2 id=\"Scene-II\"><a href=\"#Scene-II\" class=\"headerlink\" title=\"Scene II\"></a>Scene II</h2><p><strong>Euripides</strong>,’ office, the next morning. Euripides sits at his desk, reading his mail. <strong>Athena</strong>, knocks on the door.<br><strong>Athena</strong>,:    Well I’ve figured out how to secure an open network environment so that unscrupulous folks like you cannot use network services in other people’s names.<br><strong>Euripides</strong>,:    Is that so? Have a seat.<br>She does.<br><strong>Athena</strong>,:    Before I describe it, can I lay down one ground rule about this discussion?<br><strong>Euripides</strong>,:    What’s your rule?<br><strong>Athena</strong>,:<br>Well suppose I say something like the following: “I want my electronic mail, so I contact the mail server and ask it to send the mail to my workstation.” In reality I’m not the entity that contacts the mail server. I’m using a program to contact the mail server and retrieve my mail, a program that is a CLIENT of the mail service program.</p>\n<p>But I don’t want to say “the client does such-and-such” every time I refer to a transaction between the user and a network server. I’d just as soon say “I do such-and-such,” keeping in mind of course that a client program is doing things on my behalf. Is that okay with you?</p>\n<p><strong>Euripides</strong>,:    Sure. No problem.<br><strong>Athena</strong>,:    Good. All right, I’ll begin by stating the problem I have solved. In an open network environment, machines that provide services must be able to confirm the identities of people who request service. If I contact the mail server and ask for my mail, the service program must be able to verify that I am who I claim to be, right?<br><strong>Euripides</strong>,:    Right.<br><strong>Athena</strong>,:    You could solve the problem clumsily by requiring the mail server to ask for a password before I could use it. I prove who I am to the server by giving it my password.<br><strong>Euripides</strong>,:    That’s clumsy all right. In a system like that, every server has to know your password. If the network has one thousand users, each server has to know one thousand passwords. If you want to change your password, you have to contact all servers and notify them of the change. I take it your system isn’t this stupid.<br><strong>Athena</strong>,:    My system isn’t stupid. It works like this: Not only do people have passwords, services have passwords too. Each user knows her or his password, each service program knows its password, and there’s an AUTHENTICATION SERVICE that knows ALL passwords–each user’s password, and each service’s password. The authentication service stores the passwords in a single, centralized database.<br><strong>Euripides</strong>,:    Do you have a name for this authentication service?<br><strong>Athena</strong>,:    I haven’t thought of one yet. Do you have any ideas?<br><strong>Euripides</strong>,:    What’s the name of that fellow who ferries the dead across the River Styx?<br><strong>Athena</strong>,:    Charon?<br><strong>Euripides</strong>,:    Yeah, that’s him. He won’t take you across the river unless you can prove your identity.<br><strong>Athena</strong>,:    There you go Rip, trying to rewrite Greek mythology again. Charon doesn’t care about your identity. He just wants to make sure that you’re dead.<br><strong>Euripides</strong>,:    Have you got a better name?<br>Pause.<br><strong>Athena</strong>,:    No, not really.<br><strong>Euripides</strong>,:    Then let’s call the authentication service “Charon.”<br><strong>Athena</strong>,:<br>Okay. I guess I should describe the system, huh?</p>\n<p>Let’s say you want to use a service, the mail service. In my system you cannot use a service unless, ah, Charon tells the service that you are who you claim to be. And you can’t get the okay to use a service unless you have authenticated yourself to Charon. When you request authentication from Charon, you have to tell Charon the service for which you want the okay. If you want to use the mail server, you’ve got to tell Charon.</p>\n<p>Charon asks you to prove your identity. You do so by providing your secret password. Charon takes your password and compares it to the one that is registered for you in the Charon database. If the two passwords match, Charon considers your identity proven.</p>\n<p>Charon now has to convince the mail server that you are who you say you are. Since Charon knows all service passwords, it knows the mail service’s password. It’s conceivable that Charon could give you the password, which you could forward to the mail service as proof that you have authenticated yourself to Charon.</p>\n<p>The problem is, Charon cannot give you the password directly, because then you would know it. The next time you wanted mail, you could circumvent Charon and use the mail server without correctly identifying yourself. You could even pretend to be someone else, and use the mail server in that other person’s name.</p>\n<p>So instead of giving you the mail server’s password, Charon gives you a mail service TICKET. This ticket contains a version of your username that has been ENCRYPTED USING the MAIL SERVER’S PASSWORD.</p>\n<p>Ticket in hand, you can now ask the mail service for your mail. You make your request by telling the mail server who you are, and furnishing the ticket that proves you are who you say you are.</p>\n<p>The server uses its password to decrypt the ticket, and if the ticket decrypts properly, the server ends up with the username that Charon placed in the ticket.</p>\n<p>The service compares this name with the name you sent along with the ticket. If the names match, the mail server considers your identity proven and proceeds to give you your mail.</p>\n<p>What do you think of those apples?</p>\n<p><strong>Euripides</strong>,:    I’ve got some questions.<br><strong>Athena</strong>,:    I figured. Well go ahead.<br><strong>Euripides</strong>,:    When a service program decrypts a ticket, how does it know that it has decrypted the ticket properly?<br><strong>Athena</strong>,:    I don’t know.<br><strong>Euripides</strong>,:    Maybe you should include the service’s name in the ticket. That way when a service decrypts a ticket, it can gauge its success on whether or not it can find its name in the decrypted ticket.<br><strong>Athena</strong>,:<br>That sounds good to me. So the ticket looks something like this:</p>\n<p>(She scrawls the following on a pad of paper:)<br>   TICKET -  {username:servicename}<br><strong>Euripides</strong>,:    So the service ticket contains just your username and the servicename?<br><strong>Athena</strong>,:    Encrypted with the service’s password.<br><strong>Euripides</strong>,:    I don’t think that’s enough information to make the ticket secure.<br><strong>Athena</strong>,:    What do you mean?<br><strong>Euripides</strong>,:    Let’s suppose you ask Charon for a mail server ticket. Charon prepares that ticket so that it has your username “tina” in it. Suppose I copy that ticket as it wizzes by on its way across the network from Charon to you. Suppose I convince my insecure workstation that my username is “tina.” The mail client program on my workstation thinks I am you. In your name, the program forwards the stolen ticket to the mail server. The server decrypts the ticket and sees that it is valid. The username in the ticket matches the name of the user who sent the ticket. The mail server gives me your mail . . .<br><strong>Athena</strong>,:    Oh! Well that’s not so good.<br><strong>Euripides</strong>,:<br>But I think I know a way to fix this problem. Or to at least provide a partial fix to it. I think Charon should include more information in the service tickets it produces. In addition to the username, the ticket should also include the NETWORK ADDRESS from which the user asked Charon for the ticket. That gives you an additional level of security.</p>\n<p>I’ll illustrate. Suppose I steal your mail ticket now. The ticket has your workstation’s network address in it, and this address does not match my workstation’s address. In your name I forward the purloined ticket to the mail server. The server program extracts the username and network address from the ticket and attempts to match that information against the username and network address of the entity that sent the ticket. The username matches, but the network address does not. The server rejects the ticket because obviously it was stolen.</p>\n<p><strong>Athena</strong>,:    Bravo, bravo! I wish I had thought of that.<br><strong>Euripides</strong>,:    Well that’s what I’m around for.<br><strong>Athena</strong>,:<br>So the revised ticket design looks like this:</p>\n<p>She scrawls the following on a chalkboard:</p>\n<p>  TICKET -   {username:ws_address:servicename}<br><strong>Athena</strong>,:    Now I’m really excited. Let’s build a Charon system and see if it works!<br><strong>Euripides</strong>,:    Not so fast. I have some other questions about your system.<br><strong>Athena</strong>,:    All right. (Athena leans forward in her chair) Shoot.<br><strong>Euripides</strong>,:    Sounds like I’ve got to get a new ticket every time I want to use a service. If I’m putting in a full day’s work, I’ll probably want to get my mail more than once. Do I have to get a new ticket every time I want to get my mail? If that’s true, I don’t like your system.<br><strong>Athena</strong>,:    Ah . . . Well I don’t see why tickets can’t be reusable. If you get a ticket for the mail server, you ought to be able to use it again and again. For instance, when the mail client program makes a request for service in your name, it forwards a COPY of the ticket to the mail server.<br><strong>Euripides</strong>,:    That’s better. But I still have problems. You seem to imply that I have to give Charon my password every time I want to use a service for which I don’t have a ticket. I login and want to access my files. I fire off a request to Charon for the proper ticket and this means that I’ve had to use my password. Then I want to read my mail. Another request to Charon, I have to enter my password again. Now suppose I want to send one of my mail messages to the print server. Another Charon request and, well you get the picture.<br><strong>Athena</strong>,:    Uh, yeah, I do.<br><strong>Euripides</strong>,:    And if that weren’t bad enough, consider this: it sounds like when you authenticate yourself to Charon, you send your secret password over the network in cleartext. Clever people like yours truly can monitor the network and steal copies of people’s passwords. If I’ve got your password, I can use any service in your name. <strong>Athena</strong>, sighs.<br><strong>Athena</strong>,:    These are serious problems. Guess I need to go back to the drawing board.</p>\n<h2 id=\"Scene-III\"><a href=\"#Scene-III\" class=\"headerlink\" title=\"Scene III\"></a>Scene III</h2><p>The next morning, <strong>Athena</strong>, catches <strong>Euripides</strong>, at the coffee area. She taps him on the shoulder as he fills his cup.<br>The two head for the coffee machine.</p>\n<p><strong>Athena</strong>,:    I’ve got a new version of Charon that solves our problems.<br><strong>Euripides</strong>,:    Really? That was quick.<br><strong>Athena</strong>,:    Well, you know, problems of this nature keep me up all night.<br><strong>Euripides</strong>,:    Must be your guilty conscience. Shall we repair to yon small conference room?<br><strong>Athena</strong>,:    Why not?<br>The two move to the small conference room.<br><strong>Athena</strong>,:    I’ll begin by stating the problems again, but I’ll invert them so that they become requirements of the system.<br><strong>Athena</strong>, clears her throat.<br><strong>Athena</strong>,:    The first requirement: Users only have to enter their passwords once, at the beginning of their workstation sessions. This requirement implies that you shouldn’t have to enter your password every time you need a new service ticket. The second requirement: passwords should not be sent over the network in clear text.<br><strong>Euripides</strong>,:    Okay.<br><strong>Athena</strong>,:<br>I’ll start with the first requirement: you should only have to use your password once. I’ve met this requirement by inventing a new network service. It’s called the “ticket-granting” service, a service that issues Charon tickets to users who have already proven their identity to Charon. You can use this ticket-granting service if you have a ticket for it, a ticket-granting ticket.</p>\n<p>The ticket-granting service is really just a version of Charon in as much as it has access to the Charon database. It’s a part of Charon that lets you authenticate yourself with a ticket instead of a password.</p>\n<p>Anyhow, the authentication system now works as follows: you login to a workstation and use a program called kinit to contact the Charon server. You prove your identity to Charon, and the kinit program gets you a ticket-granting ticket.</p>\n<p>Now say you want to get your mail from the mail server. You don’t have a mail server ticket yet, so you use the “ticket-granting” ticket to get the mail server ticket for you. You don’t have to use your password to get the new ticket.</p>\n<p><strong>Euripides</strong>,:    Do I have to get a new “ticket-granting” ticket every time I need to get to another network service?.<br><strong>Athena</strong>,:    No. Remember, we agreed last time that tickets can be reused. Once you have acquired a ticket-granting ticket, you don’t need to get another. You use the ticket-granting ticket to get the other tickets you need.<br><strong>Euripides</strong>,:    Okay, that makes sense. And since you can reuse tickets, once the ticket-granting service has given you a ticket for a particular service, you don’t need to get that particular ticket again.<br><strong>Athena</strong>,:    Yeah, isn’t that elegant?<br><strong>Euripides</strong>,:    Okay, I buy it so far . . . As long as you didn’t have to send your password in cleartext over the network when you got the ticket-granting ticket.<br><strong>Athena</strong>,:<br>Like I said, I’ve solved that problem as well. The thing is, when I say you have to contact Charon to get the ticket-granting ticket, I make it sound as though you have to send your password in cleartext over the network to the Charon Server. But it doesn’t have to be that way.</p>\n<p>Here’s really what happens. When you use the kinit program to get the ticket-granting ticket, kinit doesn’t send your password to the Charon server, kinit sends only your username.</p>\n<p><strong>Euripides</strong>,:    Fine.<br><strong>Athena</strong>,:<br>Charon uses the username to look up your password. Next Charon builds a packet of data that contains the ticket-granting ticket. Before it sends you the packet, Charon uses your password to encrypt the packet’s contents.</p>\n<p>Your workstation receives the ticket packet. You enter your password. Kinit attempts to decrypt the ticket with the password you entered. If kinit succeeds, you have successfully authenticated yourself to Charon. You now possess a ticket-granting ticket, and that ticket can get you the other tickets you require.</p>\n<p>How’s that for some fancy thinking?</p>\n<p><strong>Euripides</strong>,:    I don’t know . . . I’m trying to think myself. You know, I think the parts of the system that you just described work pretty well. Your system requires me to authenticate myself only once. Thereafter Charon can issue me service tickets without my being aware of it. Seamless, seamless in that regard. But there’s something about the design of the service ticket that troubles me somehow. It has to do with the fact that tickets are reusable. Now I agree that they have to be reusable, but reusable tickets are, by their nature, very dangerous.<br><strong>Athena</strong>,:    What do you mean?<br><strong>Euripides</strong>,:<br>Look at it this way. Suppose you are using an insecure workstation. In the course of your login session you acquire a mail service ticket, a printing service ticket, and a file service ticket. Suppose you inadvertantly leave these tickets on the workstation when you logout.</p>\n<p>Now suppose I login to the workstation and find those tickets. I’m feeling like causing trouble, so I make the workstation think that I am you. Since the tickets are made out in your name, I can use the mail client program to access your mail, I can use the file service client to access and remove your files, and I can use the printing command to run up huge bills on your account. All because these tickets have been accidentally left lying around.</p>\n<p>And nothing can keep me from copying these tickets to a place of my own. I can continue to use them for all eternity.</p>\n<p><strong>Athena</strong>,:<br>But that’s an easy fix. We just write a program that destroys a user’s tickets after each login session. You can’t use tickets that have been destroyed.</p>\n<p><strong>Euripides</strong>,:<br>Well obviously your system must have a ticket-destroying program, but it’s foolish to make users rely on such a thing. You can’t count on users to remember to destroy their tickets every time they finish a workstation session. And even if you rely upon your users to destroy their tickets, consider the following scenario.</p>\n<p>I’ve got a program that watches the network and copies service tickets as they zip accross the network. Suppose I feel like victimizing you. I wait for you to begin a workstation session, I turn on my program and copy a bunch of your tickets.</p>\n<p>I wait for you to finish your session, and eventually you logout and leave. I fiddle with my workstation’s network software and change its address so that it matches the address of the workstation you were using when you acquired the tickets I copied. I make my workstation believe that I am you. I have your tickets, your username, and the correct network address. I can REPLAY these tickets and use services in your name.</p>\n<p>It doesn’t matter that you destroyed your tickets before you ended your workstation session. The tickets I have stolen are valid for as long as I care to use them, because your current ticket design does not place a limit on the number of times you can reuse a ticket, or on how long a ticket remains valid.</p>\n<p><strong>Athena</strong>,:    Oh I see what you’re saying! Tickets can’t be valid forever because they would then constitute a huge security risk. We have to restrict the length of time for which a ticket can be used, perhaps give each ticket some kind of expiration date.<br><strong>Euripides</strong>,:    Exactly. I think each ticket needs to have two additional pieces of information: a lifespan that indicates the length of time for which the ticket is valid, and a timestamp that indicates the date and time at which Charon issued the ticket. So a ticket would look something like this:<br><strong>Euripides</strong>, goes to the chalkboard and scrawls the following:</p>\n<p>   TICKET   {username:address:servicename:lifespan:timestamp}<br><strong>Euripides</strong>,:    Now when a service decrypts tickets, it checks the ticket’s username and address against the name and address of the person sending the ticket, and it uses the timestamp and lifespan information to see if the ticket has expired.<br><strong>Athena</strong>,:    All right. What kind of lifetime should the typical service ticket have?<br><strong>Euripides</strong>,:    I don’t know. Probably the length of a typical workstation session. Say eight hours.<br><strong>Athena</strong>,:    So if I sit at my workstation for more than eight hours, all my tickets expire. That includes my ticket-granting ticket. So I have to reauthenticate myself to Charon after eight hours.<br><strong>Euripides</strong>,:    That’s not unreasonable is it?<br><strong>Athena</strong>,:    I guess not. So we’re settled – tickets expire after eight hours. Now I’ve got a question for you. Suppose I have copied YOUR tickets from the network–<br><strong>Euripides</strong>,:    (Eyes twinkling) Aw, Tina! You wouldn’t really do that would you?<br><strong>Athena</strong>,:<br>This is just for the sake of argument. I’ve copied your tickets. Now I wait for you to logout. Suppose you have a doctor’s appointment or a class to attend, so you end your workstation session after a couple of hours. You are a smart boots and have destroyed your copies of the tickets before logging out.</p>\n<p>But I’ve stolen your tickets, and they are good for about six hours. That gives me ample time to pillage your files and print one thousand copies of whatever in your name.</p>\n<p>See, the lifetime-timestamp business works fine in the event that a ticket thief chooses to replay the ticket after the ticket has expired. If the thief can replay the ticket before that . . .</p>\n<p><strong>Euripides</strong>,:    Uh, well . . . Of course you are right.<br><strong>Athena</strong>,:    I think we have run into a major problem. (She sighs.)<br>Pause.<br><strong>Euripides</strong>,:    I guess that means you’ll be busy tonight. Want more coffee?<br><strong>Athena</strong>,:    Why not.</p>\n<h2 id=\"Scene-IV\"><a href=\"#Scene-IV\" class=\"headerlink\" title=\"Scene IV\"></a>Scene IV</h2><p>The next morning in <strong>Euripides</strong>,’ office. <strong>Athena</strong>, knocks on the door.</p>\n<p><strong>Euripides</strong>,:    You’ve got rings under your eyes this morning.<br><strong>Athena</strong>,:    Well, you know. Another one of those long nights.<br><strong>Euripides</strong>,:    Have you solved the replay problem?<br><strong>Athena</strong>,:    I think so.<br><strong>Euripides</strong>,:    Have a seat.<br>She does.<br><strong>Athena</strong>,:    As usual, I feel compelled to restate the problem. Tickets are reusable within a limited timespan, say eight hours. If someone steals your tickets and chooses to replay them before they expire, we can’t do anything to stop them.<br><strong>Euripides</strong>,:    That’s the problem.<br><strong>Athena</strong>,:    We could beat the problem if we designed the tickets so they couldn’t be reusable.<br><strong>Euripides</strong>,:    But then you would have to get a new ticket every time you wanted to use a network service.<br><strong>Athena</strong>,:<br>Right. That is a clumsy solution at best. (Pause.) Ah, how do I proceed with my argument? (She ponders for a moment.)</p>\n<p>All right, I’m going to restate the problem again, this time in the form of a requirement. A network service must be able to prove that the person using a ticket is the same person to whom that ticket was issued.</p>\n<p>Let me trace the authentication process again and see if I can tease out an appropriate way to illustrate my solution to this problem.</p>\n<p>I want to use a certain network service. I access that service by starting a client program on my workstation. The client sends three things to the service machine– my name, my workstation’s network address, and the appropriate service ticket.</p>\n<p>The ticket contains the name of the person it was issued to and the address of the workstation that person was using when he or she acquired the ticket. It also contains an expiration date in the form of a lifespan and a timestamp. All this information has been encrypted in the service’s Charon password.</p>\n<p>Our current authentication scheme relies on the following tests:</p>\n<p>Can the service decrypt the ticket?<br>Has the ticket expired?<br>Do the name and workstation address specified in the ticket match the name and address of the person who sent the ticket?<br>What do these tests prove? The first test proves that the ticket either did or did not come from Charon. If the ticket cannot be decrypted, it did not come from the real Charon. The real Charon would have encrypted the ticket with the service’s password. Charon and the service are the only two entities that know the service’s password. If the ticket decrypts successfully, the service knows that it came from the real Charon. This test prevents folks from building fake Charon tickets.</p>\n<p>The second test checks the ticket’s lifespan and timestamp. If it has expired, the service rejects the ticket. This test stops people from using old tickets, tickets that perhaps were stolen.</p>\n<p>The third test checks the ticket-user’s name and address against the name and address of the person specified in the ticket. If the test fails, the ticket-user has obtained (perhaps surreptitiously) another person’s ticket. The ticket is of course rejected.</p>\n<p>If the names and addresses do match, what has the test proved? Nothing. Scallywags can steal tickets from the network, change their workstation addresses and usernames appropriately, and rifle other folks resources. As I pointed out yesterday, tickets can be replayed as long as they haven’t expired. They can be replayed because a service cannot determine that the person sending the ticket is actually the ticket’s legitimate owner.</p>\n<p>The service cannot make this determination because it does not share a secret with the user. Look at it this way. If I’m on watch at Elsinore, you know, the castle in Hamlet, and you are supposed to relieve me, I’m not supposed to let you take my place unless you can provide the correct password. That’s the case where the two of us share a secret. And it’s probably a secret that someone else made up for everyone who stands on watch.</p>\n<p>So I was thinking last night, why not have Charon make up a password for the legitimate ticket-owner to share with the service? Charon gives a copy of this session key to the service, and a copy to the user. When the service receives a ticket from a user, it can use the session key to test the user’s identity.</p>\n<p><strong>Euripides</strong>,:    Wait a second. How is Charon going to give both parties the session key?<br><strong>Athena</strong>,:    The ticket-owner gets the session key as part of the reply from Charon. Like this:<br>She scrawls the following on a chalkboard:</p>\n<p> CHARON REPLY  -  [sessionkey|ticket]<br>The service’s copy of the session key comes inside the ticket, and the service gets the key when it decrypts the ticket. So the ticket looks like this:</p>\n<p> TICKET -  {sessionkey:username:address:servicename:lifespan:timestamp}<br>When you want to get to a service, the client program you start builds what I call an AUTHENTICATOR. The authenticator contains your name and your workstation’s address. The client encrypts this information with the session key, the copy of the session key you received when you requested the ticket.</p>\n<p>  AUTHENTICATOR - {username:address} encrypted with session key<br>After building the authenticator, the client sends it and the ticket to the service. The service cannot decrypt the authenticator yet because it doesn’t have the session key. That key is in the ticket, so the service first decrypts the ticket.</p>\n<p>After decrypting the ticket, the service ends up with the the following information:</p>\n<p>The ticket’s lifespan and timestamp;<br>The ticket-owner’s name;<br>The ticket-owner’s network address;<br>The session key.<br>The service checks to see if the ticket has expired. If all is well in that regard, the service next uses the session key to decrypt the authenticator. If the decryption proceeds without a hitch, the service ends up with a username and a network address. The service tests this information against the name and address found in the ticket, AND the name and address of the person who sent the ticket and authenticator. If everything matches, the service has determined that the ticket-sender is indeed the ticket’s real owner.</p>\n<p><strong>Athena</strong>, pauses, clears her throat, drinks some coffee.</p>\n<p>I think the session key-authenticator business takes care of the replay problem.</p>\n<p><strong>Euripides</strong>,:    Maybe. But I wonder . . . To break this version of the system, I must have the proper authenticator for the service.<br><strong>Athena</strong>,:    No. You must have the authenticator AND the ticket for the service. The authenticator is worthless without the ticket because the service cannot decrypt the authenticator without first having the appropriate session key, and the service cannnot get the appropriate session key without first decrypting the ticket.<br><strong>Euripides</strong>,:    Okay, I understand that, but didn’t you say that when a client program contacts the server, it sends the ticket and matching authenticator together?<br><strong>Athena</strong>,:    Yes, I guess I said that.<br><strong>Euripides</strong>,:    If that’s what actually happens, what prevents me from stealing the ticket and authenticator at the same time? I’m sure I could write a program to do the job. If I’ve got the ticket and its authenticator, I believe I can use the two as long as the ticket has not expired. I just have to change my workstation address and username appropriately. True?<br><strong>Athena</strong>,:    (Biting her lip) True. How dispiriting.<br><strong>Euripides</strong>,:    Wait, wait, wait! This isn’t such a big deal. Tickets are reusable as long as they haven’t expired, but that doesn’t mean that authenticators have to be reusable. Suppose we design the system so that authenticators can only be used once. Does that buy us anything?<br><strong>Athena</strong>,:<br>Well, it might. Let’s see, the client program builds the authenticator, then sends it with the ticket to the service. You copy both ticket and authenticator as they move from my workstation to the server. But the ticket and authenticator arrive at the server before you can send your copies. If the authenticator can only be used once, your copy of it is no good, and you lose when you attempt to replay your ticket and authenticator.</p>\n<p>Well, that’s a relief. So all we have to do is invent a way to make the authenticator a one-time usable thing.</p>\n<p><strong>Euripides</strong>,:<br>No problem. Let’s just put a lifespan and timestamp on them. Suppose each authenticator has a lifespan of a couple of minutes. When you want to use a service, your client program builds the authenticator, stamps it with the current time, then sends it and the ticket to the server.</p>\n<p>The server receives the ticket and authenticator and goes about its business. When the server decrypts the authenticator, it checks the authenticator’s lifespan and timestamp. If the authenticator hasn’t expired, and everything else checks properly, the server considers you authenticated.</p>\n<p>Suppose I copied the athenticator and ticket as they crossed the network. I have to change my workstation’s network address and my username, and I have to do this all in a couple of minutes. That’s a pretty tall order. In fact I don’t think it’s possible. Unless . . .</p>\n<p>Well, here’s a potential problem. Suppose that instead of copying the ticket and authenticator as they travel from your workstation to the server, I copy original ticket packet that comes from Charon, the packet you receive when you ask Charon to give you a ticket.</p>\n<p>This packet, as I recall, has two copies of the session key in it: one for you and one for the service. The one for the service is hidden in the ticket and I can’t get to it, but what about the other one, the one you use to build authenticators?</p>\n<p>If I can get that copy of the session key, I can build my own authenticators, and if I can build my own authenticators, I can break the system.</p>\n<p><strong>Athena</strong>,:<br>That’s something I thought about last night, but then I traced the process of acquiring tickets and found that it wasn’t possible to steal authenticators that way.</p>\n<p>You sit down at a workstation and use the kinit program to get your ticket-granting ticket. Kinit asks for your username, and after you enter it, kinit forwards the name to Charon.</p>\n<p>Charon uses your name to look up your password, then proceeds to build a ticket-granting ticket for you. As part of this process, Charon creates a session key that you will share with the ticket-granting service. Charon puts a copy of the session key in the ticket-granting ticket, and puts your copy in the the ticket packet that you are about to receive. But before it sends you this packet, Charon encrypts the whole thing with your password.</p>\n<p>Charon sends the packet across the network. Someone can copy the packet as it goes by, but they can’t do anything with it because it has been encrypted with your password. Specifically, no one can steal the ticket-granting session key.</p>\n<p>Kinit receives the ticket packet and prompts you for a password, which you enter. If you enter the correct password, kinit can decrypt the packet and give you your copy of the session key.</p>\n<p>Now that you’ve taken care of the kinit business, you want to get your mail. You start the mail client program. This program looks for a mail service ticket and doesn’t find one (after all, you haven’t tried to get your mail yet). The client must use the ticket-granting ticket to ask the ticket-granting service for a mail service ticket.</p>\n<p>The client builds an authenticator for the ticket-granting transaction and encrypts the authenticator with your copy of the ticket-granting session key. The client then sends Charon the authenticator, the ticket-granting ticket, your name, your workstation’s address, and the name of the mail service.</p>\n<p>The ticket-granting service receives this stuff and runs through the authentication checks. If everything checks properly, the ticket-granting service ends up with a copy of the session key that it shares with you. Now the ticket-granting service builds you a mail service ticket, and during this process, creates a new session key for you to share with the mail service.</p>\n<p>The ticket-granting service now prepares a ticket packet to send back to your workstation. The packet contains the ticket and your copy of the mail service session key. But before it sends the packet, the ticket-granting service encrypts the packet with its copy of the TICKET-GRANTING session key. That done, the packet is sent on its way.</p>\n<p>So here comes the mail service ticket packet, loping across the network. Suppose some network ogre copies it as it goes by. The ogre is out of luck because the packet is encrypted with the ticket-granting session key; you and the ticket-granting service are the only entities that know this key. Since the ogre cannot decrypt the mail ticket packet, the ogre cannot discover the MAIL SESSION KEY. Without this session key, the ogre cannot use any of the mail service tickets you might subsequently send across the network.</p>\n<p>So I think we’re safe. What do you think?</p>\n<p><strong>Euripides</strong>,:    Perhaps.<br><strong>Athena</strong>,:    Perhaps! Is that all you can say!<br><strong>Euripides</strong>,:    (laughing) Don’t get upset. You should know my ways by now. I guess it is mean of me, and you up half the night.<br><strong>Athena</strong>,:    Pthhhhh!<br><strong>Euripides</strong>,:    All right, three-quarters of the night. Actually, the system is beginning to sound acceptible. This session key business solves a problem that I thought of last night: the problem of mutual authentication.<br>Pause.<br>Mind if I talk for a minute?<br><strong>Athena</strong>,:    (A trifle coldly) Be my guest.<br><strong>Euripides</strong>,:<br>You are so kind. (<strong>Euripides</strong>, clears his throat.) Last night, while visions of session keys and authenticators danced in your head, I was trying to find new problems with the system, and I found one that I thought was pretty serious. I’ll illustrate it by way of the following scenario.</p>\n<p>Suppose you are sick of your current job and have determined that it is in your best interest to move on. You want to print your resume on the company’s wizz-bang laser printer so that headhunters and potential employers can take note of your classiness.</p>\n<p>So you enter the printing command, and direct it to send the resume to the appropriate print server. The command gets the proper service ticket, if you don’t already have it, then sends the ticket in your name to the appropriate print server. At least that’s where you think it’s headed. You don’t in fact know that the request is headed for the right print server.</p>\n<p>Suppose that some unscrupulous hacker–say it’s your boss–has screwed system around so that he redirects your request and its ticket to the print server in his office. His print service program doesn’t care about the ticket or its contents. It throws away the ticket and sends a message to your workstation indicating that the ticket passed muster, and that the server is ready and willing to print your job. The printing command sends the job to the fraudulant print server and the enemy ends up with your resume.</p>\n<p>I’ll state the problem by way of contrast. Without session keys and authenticators, Charon can protect its servers from false users, but it cannot protect its users from false servers. The system needs a way for client programs to authenticate the server before sending sensitive information to the service. The system must allow for mutual authentication.</p>\n<p>But the session key solves this problem as long as you design your client programs properly. Back to the print server scenario. I want a print client program that makes sure the service it’s sending jobs to is the legitimate service.</p>\n<p>Here’s what such a program does. I enter the printing command and give it a filename, the name of my resume. Assume that I have a print service ticket and session key. The client program uses the session key to build an authenticator, then sends the authenticator and ticket to the “supposed” print server. The client DOES NOT send the resume yet; it waits for a response from the service.</p>\n<p>The real service receives the ticket and authenticator, decrypts the ticket and extracts the session key, then uses the session key to decrypt the authenticator. This done, the service runs all the appropriate authentication tests.</p>\n<p>Assume the tests confirm my identity. Now the server prepares a reply packet so that it can prove its identity to the client program. It uses its copy of the session key to encrypt the reply packet, then sends the packet to the waiting client.</p>\n<p>The client receives the packet and attempts to decrypt it with my copy of the session key. If the packet decrypts properly and yields the correct server response message, my client program knows that the server that encrypted the packet is the real server. Now the client sends the resume job to the print service.</p>\n<p>Suppose my boss screwed around the system so that his print server poses as the one I want. My client sends the authenticator and ticket to the “print service” and waits for a response. The fake print service cannot generate the correct response because it cannot decrypt the ticket and get the session key. My client will not send the job unless it receives the correct response. Eventually the client gives up waiting and exits. My print job does not get completed, but at least my resume did not end up on the desk of the enemy.</p>\n<p>You know, I think we have a solid basis on which to implement the Charon Authentication System.</p>\n<p><strong>Athena</strong>,:    Perhaps. Anyway, I don’t like the name “Charon.”<br><strong>Euripides</strong>,:    You don’t? Since when?<br><strong>Athena</strong>,:    I’ve never liked it, because the name doesn’t make sense. I was talking to my Uncle Hades about it the other day, and he suggested another name, the name of his three-headed watch dog.<br><strong>Euripides</strong>,:    Oh, you mean “Cerberus.”<br><strong>Athena</strong>,:    Bite your tongue Rip! “Cerberus” indeed . . .<br><strong>Euripides</strong>,:    Er, isn’t that the name?<br><strong>Athena</strong>,:    Yeah, if you happen to be a Roman! I’m a Greek goddess, he’s a Greek watch dog, and his name is “Kerberos,” “Kerberos” with a K.<br><strong>Euripides</strong>,:    Okay, okay, don’t throw thunderbolts. I’ll buy the name. Actually, it has a nice ring to it. Adios Charon and hello to Kerberos.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck7ockxc80009lkyx4f71fwiz","category_id":"ck7ockxcc000blkyxa8fs8ih7","_id":"ck7ockxct000ilkyxck6zelrz"},{"post_id":"ck7ockxc9000alkyxap16dvjt","category_id":"ck7ockxcr000flkyxahky3k03","_id":"ck7ockxcx000nlkyxfdz99r1s"},{"post_id":"ck7ockxcs000hlkyxh70u7xzb","category_id":"ck7ockxcr000flkyxahky3k03","_id":"ck7ockxcy000plkyx1kv4akpm"},{"post_id":"ck7ockxcl000clkyx5deebmqs","category_id":"ck7ockxcc000blkyxa8fs8ih7","_id":"ck7ockxd1000slkyx1hhz05fn"},{"post_id":"ck7ockxcm000dlkyxgraobwtr","category_id":"ck7ockxcr000flkyxahky3k03","_id":"ck7ockxd4000vlkyx27cf96tf"},{"post_id":"ck7ockxcv000klkyxcfbiaetj","category_id":"ck7ockxd1000rlkyx0z7o0zmt","_id":"ck7ockxd8000zlkyx1bnp8gsu"},{"post_id":"ck7ockxcw000llkyxdjjweozm","category_id":"ck7ockxd5000wlkyxgrtoflc4","_id":"ck7ockxdb0013lkyx356q4iw8"},{"post_id":"ck7ockxcy000qlkyx49robbyg","category_id":"ck7ockxd80010lkyxappe3ute","_id":"ck7ockxdf0018lkyx1qz43fnm"},{"post_id":"ck7ockxd3000ulkyxcw52eg47","category_id":"ck7ockxdc0015lkyxdz22hnus","_id":"ck7ockxdj001clkyxem5c5tiu"},{"post_id":"ck7ockxd5000xlkyx6gaedzqx","category_id":"ck7ockxdf0019lkyxcd44gjx8","_id":"ck7ockxdl001glkyxf2ffb9hi"},{"post_id":"ck7ockxdg001alkyx0ntvap4o","category_id":"ck7ockxdj001dlkyx7v1xfe96","_id":"ck7ockxdn001klkyx64p80ixv"},{"post_id":"ck7ockxdl001hlkyxacuh1kk3","category_id":"ck7ockxdn001jlkyx96xy7m0d","_id":"ck7ockxdn001llkyxdm4w8np8"},{"post_id":"ck7ockxdt001mlkyxhnle8jvt","category_id":"ck7ockxdn001jlkyx96xy7m0d","_id":"ck7ockxdv001plkyxd9vc8vw8"},{"post_id":"ck7ockxdu001nlkyxh20pgtx2","category_id":"ck7ockxdn001jlkyx96xy7m0d","_id":"ck7ockxdw001qlkyx6bsa95ed"},{"post_id":"ck7ockxdv001olkyx9677av3i","category_id":"ck7ockxdn001jlkyx96xy7m0d","_id":"ck7ockxdw001rlkyxfvrq8z2o"},{"post_id":"ck7ockxe7001slkyxcul95u24","category_id":"ck7ockxe7001tlkyxa4xz6h6e","_id":"ck7ockxe8001ulkyx94yigpb8"}],"PostTag":[],"Tag":[]}}